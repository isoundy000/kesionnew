(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 148:
/*!**************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/teacher.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetAllTeacherList = GetAllTeacherList;exports.GetTeacherInfo = GetTeacherInfo;exports.SaveTeacherEvaluate = SaveTeacherEvaluate;exports.GetWordsList = GetWordsList;exports.SaveTeacherWords = SaveTeacherWords;exports.DoCollect = DoCollect;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n\n\n// 名师列表\nfunction GetAllTeacherList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetAllTeacherList', params);\n}\n\n// 名师详情\nfunction GetTeacherInfo(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetTeacherInfo', params, ['appToken', 'userId']);\n}\n\n// 名师评价\nfunction SaveTeacherEvaluate(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/SaveTeacherEvaluate', params, ['appToken', 'userId']);\n}\n\n// 留言列表\nfunction GetWordsList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetWordsList', params, ['appToken', 'userId']);\n}\n\n// 留言\nfunction SaveTeacherWords(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/SaveTeacherWords', params, ['appToken', 'userId']);\n}\n\n// 收藏\nfunction DoCollect(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/DoCollect', params, ['appToken', 'userId']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL3RlYWNoZXIuanMiXSwibmFtZXMiOlsiR2V0QWxsVGVhY2hlckxpc3QiLCJwYXJhbXMiLCJHZXRUZWFjaGVySW5mbyIsIlNhdmVUZWFjaGVyRXZhbHVhdGUiLCJHZXRXb3Jkc0xpc3QiLCJTYXZlVGVhY2hlcldvcmRzIiwiRG9Db2xsZWN0Il0sIm1hcHBpbmdzIjoib1RBQUE7Ozs7QUFJQTtBQUNPLFNBQVNBLGlCQUFULENBQTJCQyxNQUEzQixFQUFtQztBQUN6QyxTQUFPLHVCQUFJLCtCQUFKLEVBQW9DQSxNQUFwQyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTQyxjQUFULENBQXdCRCxNQUF4QixFQUFnQztBQUN0QyxTQUFPLHVCQUFJLDRCQUFKLEVBQWlDQSxNQUFqQyxFQUF3QyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQXhDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNFLG1CQUFULENBQTZCRixNQUE3QixFQUFxQztBQUMzQyxTQUFPLHdCQUFLLGlDQUFMLEVBQXVDQSxNQUF2QyxFQUE4QyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQTlDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNHLFlBQVQsQ0FBc0JILE1BQXRCLEVBQThCO0FBQ3BDLFNBQU8sdUJBQUksMEJBQUosRUFBK0JBLE1BQS9CLEVBQXNDLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBdEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0ksZ0JBQVQsQ0FBMEJKLE1BQTFCLEVBQWtDO0FBQ3hDLFNBQU8sdUJBQUksOEJBQUosRUFBbUNBLE1BQW5DLEVBQTBDLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBMUMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0ssU0FBVCxDQUFtQkwsTUFBbkIsRUFBMkI7QUFDakMsU0FBTyx3QkFBSyx1QkFBTCxFQUE2QkEsTUFBN0IsRUFBb0MsQ0FBQyxVQUFELEVBQVksUUFBWixDQUFwQyxDQUFQO0FBQ0EiLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuXHRHRVQsUE9TVFxyXG59IGZyb20gJy4vbWFpbi5lbnRyYW5jZS5qcydcclxuXHJcbi8vIOWQjeW4iOWIl+ihqFxyXG5leHBvcnQgZnVuY3Rpb24gR2V0QWxsVGVhY2hlckxpc3QocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvR2V0QWxsVGVhY2hlckxpc3QnLHBhcmFtcylcdFxyXG59XHJcblxyXG4vLyDlkI3luIjor6bmg4VcclxuZXhwb3J0IGZ1bmN0aW9uIEdldFRlYWNoZXJJbmZvKHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL0dldFRlYWNoZXJJbmZvJyxwYXJhbXMsWydhcHBUb2tlbicsJ3VzZXJJZCddKVx0XHJcbn1cclxuXHJcbi8vIOWQjeW4iOivhOS7t1xyXG5leHBvcnQgZnVuY3Rpb24gU2F2ZVRlYWNoZXJFdmFsdWF0ZShwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9hcHAvU2F2ZVRlYWNoZXJFdmFsdWF0ZScscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcclxufVxyXG5cclxuLy8g55WZ6KiA5YiX6KGoXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRXb3Jkc0xpc3QocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvR2V0V29yZHNMaXN0JyxwYXJhbXMsWydhcHBUb2tlbicsJ3VzZXJJZCddKVxyXG59XHJcblxyXG4vLyDnlZnoqIBcclxuZXhwb3J0IGZ1bmN0aW9uIFNhdmVUZWFjaGVyV29yZHMocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvU2F2ZVRlYWNoZXJXb3JkcycscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcclxufVxyXG5cclxuLy8g5pS26JePXHJcbmV4cG9ydCBmdW5jdGlvbiBEb0NvbGxlY3QocGFyYW1zKSB7XHJcblx0cmV0dXJuIFBPU1QoJy93ZWJhcGkvYXBwL0RvQ29sbGVjdCcscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///148\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!**************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/store/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 17));\nvar _user = __webpack_require__(/*! ../api/user */ 18);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n\n\n_vue.default.use(_vuex.default);\nvar store = new _vuex.default.Store({\n  state: {\n    siteName: '欣程网校',\n    isLogin: 0,\n    userInfo: {},\n\n    appToken: '',\n    userId: '',\n    readyStatus: false,\n    schoolId: '',\n    model: [],\n    wechatOpenID: '',\n    SRC: 'http://www.xkvo.net',\n    isshowprice: true,\n    version: '',\n    versionNum: '1.2',\n    //APP是否开启缓存\n    isCache: false },\n\n  mutations: {\n    /**\r\n                * 设置状态\r\n                */\n    setState: function setState(state) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var keys = Object.keys(data);\n      keys.map(function (k) {\n        state[k] = data[k];\n      });\n    },\n    updateUserInfo: function updateUserInfo(state, data) {\n      state.isLogin = data.UserID > 0 ? 1 : 0,\n      data.UserFace = data.UserFace + '?' + Math.ceil(Math.random() * 9999999999);\n      state.userInfo = data;\n      state.appToken = data.ApiToken || '';\n      state.userId = data.UserID || '';\n      state.schoolId = data.SchoolID || '';\n      state.readyStatus = true;\n    } },\n\n  actions: {\n    /**\r\n              * 获取用户信息\r\n              */\n    getUserInfo: function getUserInfo(_ref) {var commit = _ref.commit;\n      return new Promise(function (resolve) {\n        (0, _user.GetUserInfo)().then(function (response) {\n          var data = response.data[0];\n          commit('updateUserInfo', data);\n          resolve();\n        });\n      });\n    },\n    /**\r\n        * 获取微信小程序当前用户的openID\r\n        */\n    getWechatOpenID: function getWechatOpenID() {\n      return new Promise(function (resolve) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      });\n    },\n    /**\r\n        * 账号登陆\r\n        */\n    login: function login(store) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve) {\n        store.commit('setState', {\n          readyStatus: false });\n\n        var params = false;\n\n        if (data.username && data.password) {\n          params = data;\n        } else {\n          /** 已存储用用户名、密码，自动登录获取apptoken*/\n          if (uni.getStorageSync('userName') && uni.getStorageSync('passWord')) {\n            params = {\n              username: uni.getStorageSync('userName'),\n              password: uni.getStorageSync('passWord') };\n\n          }\n        }\n        if (params) {\n          (0, _user.Login)(params).then(function (res) {\n            store.dispatch('getIsVerify').then(function () {\n              if (res.result) {\n                uni.setStorageSync('userName', params.username);\n                uni.setStorageSync('passWord', params.password);\n                store.commit('updateUserInfo', res.data[0]);\n              } else {\n                store.commit('updateUserInfo', {});\n              }\n              resolve(res);\n            });\n          });\n        } else {\n          store.dispatch('getIsVerify').then(function () {\n            store.commit('updateUserInfo', {});\n          });\n\n        }\n      });\n    },\n    getIsVerify: function getIsVerify(store) {\n      return new Promise(function (resolve) {\n        (0, _user.GetIsVerify)().then(function (res) {\n          store.commit('setState', {\n            isCache: res.iscache,\n            version: res.version });\n\n\n\n\n\n\n\n\n          store.commit('setState', {\n            isshowprice: res.isappverify });\n\n\n          resolve();\n        });\n      });\n    },\n    /**\r\n        * 账号退出\r\n        */\n    loginout: function loginout() {\n      return new Promise(function (resolve) {\n        uni.setStorageSync('userName', '');\n        uni.setStorageSync('passWord', '');\n        store.commit('updateUserInfo', {});\n        resolve();\n      });\n    } } });\n\n\nstore.dispatch('login');\n\n/**\r\n                          * 添加ready事件\r\n                          */\nstore.ready = function (callback) {var _this = this;\n  if (this.state.readyStatus) {\n    callback(this.state);\n  } else {\n    setTimeout(function () {\n      _this.ready(callback);\n    }, 100);\n  }\n};var _default =\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!***********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/user.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.checkIsLogin = checkIsLogin;exports.GetMiniProgramOpenID = GetMiniProgramOpenID;exports.LoginOut = LoginOut;exports.SendSmsCode = SendSmsCode;exports.UserReg = UserReg;exports.ModifyPass = ModifyPass;exports.Login = Login;exports.GetUserInfo = GetUserInfo;exports.GetArea = GetArea;exports.GetPassByMobile = GetPassByMobile;exports.ModifyUserFace = ModifyUserFace;exports.SaveUesrBasicInfo = SaveUesrBasicInfo;exports.GetUserCourseOrderList = GetUserCourseOrderList;exports.InitialUserPayCourse = InitialUserPayCourse;exports.DoUserPayCourse = DoUserPayCourse;exports.DeleteUserCourseOrder = DeleteUserCourseOrder;exports.GetUserFavoriteList = GetUserFavoriteList;exports.GetUserAskFavriteList = GetUserAskFavriteList;exports.GetUserMessageReciveList = GetUserMessageReciveList;exports.GetOneSiteMsgInfo = GetOneSiteMsgInfo;exports.DoUserSiteMsg = DoUserSiteMsg;exports.GetUserUpgradeVIP = GetUserUpgradeVIP;exports.PayUserUpgradeVIP = PayUserUpgradeVIP;exports.GetUserCouponList = GetUserCouponList;exports.GetUserRedPacketList = GetUserRedPacketList;exports.GetUserAskTopList = GetUserAskTopList;exports.GetUserCourseList = GetUserCourseList;exports.GetIsVerify = GetIsVerify;exports.GetUserSpecialList = GetUserSpecialList;exports.Pasttrial = Pasttrial;exports.GetUserFeePackageList = GetUserFeePackageList;exports.GetUserFeePackageBuyList = GetUserFeePackageBuyList;exports.ActivateUserFeePackage = ActivateUserFeePackage;exports.InitialPayUserFeePackage = InitialPayUserFeePackage;exports.PayUserFeePackage = PayUserFeePackage;exports.GetUserFeePackageDetail = GetUserFeePackageDetail;exports.GetUserFeePackageBuyDetail = GetUserFeePackageBuyDetail;exports.GetMyRoomList = GetMyRoomList;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取登录状态*/\nfunction checkIsLogin(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/CheckUser', params);\n}\n/*获取小程序加密信息 openid、access_token 等*/\nfunction GetMiniProgramOpenID(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/GetMiniProgramOpenID', params);\n}\n\n/*退出登录*/\nfunction LoginOut(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/LoginOut', params, ['appToken']);\n}\n/*手机验证码*/\nfunction SendSmsCode(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/SendSmsCode', params);\n}\n/*用户注册*/\nfunction UserReg(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/UserReg', params);\n}\n/*修改密码*/\nfunction ModifyPass(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/ModifyPass', params, ['appToken']);\n}\n/*用户登录*/\nfunction Login(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/Login', params);\n}\n/*获取用户信息*/\nfunction GetUserInfo(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/GetUserInfo', params, ['appToken']);\n}\n/*获取省市区数据*/\nfunction GetArea(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/GetArea', params);\n}\n/*找回密码*/\nfunction GetPassByMobile(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/GetPassByMobile', params);\n}\n/*修改头像*/\nfunction ModifyUserFace(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/ModifyUserFace', params, ['appToken', 'userId']);\n}\n/*修改基本资料*/\nfunction SaveUesrBasicInfo(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/SaveUesrBasicInfo', params, ['appToken']);\n}\n/**我的订单 课程订单列表*/\nfunction GetUserCourseOrderList(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/GetUserCourseOrderList', params, ['appToken']);\n}\n/**我的订单 课程订单支付初始化*/\nfunction InitialUserPayCourse(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/InitialUserPayCourse', params, ['appToken']);\n}\n/**我的订单 课程订单支付*/\nfunction DoUserPayCourse(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/DoUserPayCourse', params, ['appToken']);\n}\n/**我的订单 删除课程订单*/\nfunction DeleteUserCourseOrder(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/DeleteUserCourseOrder', params, ['appToken']);\n}\n/**我的收藏列表*/\nfunction GetUserFavoriteList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserFavoriteList', params, ['appToken']);\n}\n/**问题收藏列表*/\nfunction GetUserAskFavriteList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserAskFavriteList', params, ['appToken']);\n}\n/**我收到的消息*/\nfunction GetUserMessageReciveList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserMessageReciveList', params, ['appToken']);\n}\n/**消息详情*/\nfunction GetOneSiteMsgInfo(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetOneSiteMsgInfo', params, ['appToken']);\n}\n/**删除消息*/\nfunction DoUserSiteMsg(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/DoUserSiteMsg', params, ['appToken']);\n}\n/**升级vip*/\nfunction GetUserUpgradeVIP(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserUpgradeVIP', params, ['appToken']);\n}\n/**购买vip*/\nfunction PayUserUpgradeVIP(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/PayUserUpgradeVIP', params, ['appToken']);\n}\n/**优惠券列表*/\nfunction GetUserCouponList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserCouponList', params, ['appToken']);\n}\n/**红包列表*/\nfunction GetUserRedPacketList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserRedPacketList', params, ['appToken']);\n}\n/**我的问答*/\nfunction GetUserAskTopList(params) {\n  return (0, _mainEntrance.GET)('/webapi/User/GetUserAskTopList', params, ['userId']);\n}\n/**我的课程*/\nfunction GetUserCourseList(params) {\n  return (0, _mainEntrance.POST)('/webapi/User/GetUserCourseList', params, ['appToken']);\n}\n\n/**审核状态*/\nfunction GetIsVerify(params) {\n  return (0, _mainEntrance.GET)('/webapi/Other/GetIsVerify', params);\n}\n/**我的专栏*/\nfunction GetUserSpecialList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserSpecialList', params, ['appToken']);\n}\n/**建议、举报*/\nfunction Pasttrial(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/Pasttrial', params, ['appToken']);\n}\n/**我的学习卡*/\nfunction GetUserFeePackageList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserFeePackageList', params, ['appToken']);\n}\n/**学习卡列表*/\nfunction GetUserFeePackageBuyList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserFeePackageBuyList', params, ['appToken']);\n}\n/**激活学习卡*/\nfunction ActivateUserFeePackage(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/ActivateUserFeePackage', params, ['appToken']);\n}\n/**初始化购买学习卡数据*/\nfunction InitialPayUserFeePackage(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/InitialPayUserFeePackage', params, ['appToken']);\n}\n/**购买支付学习卡*/\nfunction PayUserFeePackage(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/PayUserFeePackage', params, ['appToken']);\n}\n/**我的营销卡详情*/\nfunction GetUserFeePackageDetail(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserFeePackageDetail', params, ['appToken']);\n}\n/**所有营销卡详情*/\nfunction GetUserFeePackageBuyDetail(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetUserFeePackageBuyDetail', params, ['appToken']);\n}\n/**我的班级*/\nfunction GetMyRoomList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetMyRoomList', params, ['appToken']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 181:
/*!*******************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/learn-record.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.MyCourseList = MyCourseList;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n\n\n// 学习记录列表\nfunction MyCourseList(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/MyCourseList', params, ['appToken', 'userId']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL2xlYXJuLXJlY29yZC5qcyJdLCJuYW1lcyI6WyJNeUNvdXJzZUxpc3QiLCJwYXJhbXMiXSwibWFwcGluZ3MiOiJrR0FBQTs7OztBQUlBO0FBQ08sU0FBU0EsWUFBVCxDQUFzQkMsTUFBdEIsRUFBOEI7QUFDcEMsU0FBTyx1QkFBSSw2QkFBSixFQUFrQ0EsTUFBbEMsRUFBeUMsQ0FBQyxVQUFELEVBQVksUUFBWixDQUF6QyxDQUFQO0FBQ0EiLCJmaWxlIjoiMTgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuXHRHRVQsUE9TVFxyXG59IGZyb20gJy4vbWFpbi5lbnRyYW5jZS5qcydcclxuXHJcbi8vIOWtpuS5oOiusOW9leWIl+ihqFxyXG5leHBvcnQgZnVuY3Rpb24gTXlDb3Vyc2VMaXN0KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvQ291cnNlL015Q291cnNlTGlzdCcscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcdFxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///181\n");

/***/ }),

/***/ 19:
/*!********************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/main.entrance.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.GET = GET;exports.POST = POST;\nvar _store = _interopRequireDefault(__webpack_require__(/*! ../store */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nfunction getStore() {\n  return new Promise(function (resolve) {\n    if (typeof _store.default === 'object') {\n      resolve(_store.default);\n    } else {\n      setTimeout(function () {\n        getStore().then(function (store) {\n          resolve(store);\n        });\n      }, 100);\n    }\n  });\n}\nfunction loginVerification(res) {\n  if (res.data.msg && (res.data.msg === '无效apptoken' || res.data.msg.indexOf('请先登录') !== -1)) {\n    uni.hideLoading();\n    _store.default.dispatch('loginout').then(function () {\n      uni.showModal({\n        title: '提示',\n        content: '您的账户未登陆，或在异地登陆，请重新登陆！',\n        success: function success(res) {\n          if (res.confirm) {\n            uni.navigateTo({\n              url: '/pages/user/login/index' });\n\n          }\n        } });\n\n    });\n  } else {\n    return true;\n  }\n}\nfunction GET(url) {var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var defultParams = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve, reject) {\n    getStore().then(function (store) {\n      //from有的地方传的不是student\n      if (params.from === '') {\n        params.from = 'student';\n      }\n      params.version = store.state.versionNum;\n      if (typeof defultParams === 'object') {\n        store.ready(function (state) {\n\n          if (defultParams.indexOf('userId') != -1) {\n            params.userid = state.userId;\n          }\n          if (defultParams.indexOf('appToken') != -1) {\n            params.apptoken = state.appToken;\n          }\n\n          uni.request({\n            url: state.SRC + url,\n            method: 'GET',\n            sslVerify: false,\n            data: params,\n            success: function success(res) {\n              if (loginVerification(res)) {\n                resolve(res.data);\n              }\n            },\n            fail: function fail(err) {\n              reject(err);\n            } });\n\n        });\n\n\n      } else {\n        uni.request({\n          url: store.state.SRC + url,\n          method: 'GET',\n          data: params,\n          sslVerify: false,\n          success: function success(res) {\n            if (loginVerification(res)) {\n              resolve(res.data);\n            }\n          },\n          fail: function fail(err) {\n            reject(err);\n          } });\n\n      }\n    });\n  });\n}\n\nfunction POST(url) {var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var defultParams = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve, reject) {\n    getStore().then(function (store) {\n      if (params.from === '') {\n        params.from = 'student';\n      }\n      params.version = store.state.versionNum;\n      if (typeof defultParams === 'object') {\n        store.ready(function (state) {\n\n          if (defultParams.indexOf('userId') != -1) {\n            params.userid = state.userId;\n          }\n          if (defultParams.indexOf('appToken') != -1) {\n            params.apptoken = state.appToken;\n          }\n          uni.request({\n            url: state.SRC + url,\n            method: 'POST',\n            sslVerify: false,\n            data: params,\n            success: function success(res) {\n              if (loginVerification(res)) {\n                resolve(res.data);\n              }\n            },\n            fail: function fail(err) {\n              reject(err);\n            } });\n\n        });\n\n      } else {\n        uni.request({\n          url: store.state.SRC + url,\n          method: 'POST',\n          sslVerify: false,\n          data: params,\n          success: function success(res) {\n            if (loginVerification(res)) {\n              resolve(res.data);\n            }\n          },\n          fail: function fail(err) {\n            reject(err);\n          } });\n\n      }\n    });\n  });\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!******************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 21));var _runtimeModule = _interopRequireDefault(__webpack_require__(/*! ./common/regenerator-runtime/runtime-module */ 24));var _chat = _interopRequireDefault(__webpack_require__(/*! ./common/chat/chat */ 28));var _index = _interopRequireDefault(__webpack_require__(/*! ./store/index */ 37));var _index2 = _interopRequireDefault(__webpack_require__(/*! ./common/api/index */ 40));var _utils = _interopRequireDefault(__webpack_require__(/*! ./common/utils/utils */ 38));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var chat;var checkParams = function checkParams(t, e) {for (var a = 0, o = e.length; a < o; a++) {var _o = e[a];if (_o.indexOf(\"|\") > -1) {var _ret = function () {var e = _o.split(\"|\");if (Object.keys(t).find(function (t) {return t === e[0] || t === e[1];})) return { v: void 0 };}();if (typeof _ret === \"object\") return _ret.v;}if (void 0 === t[_o]) throw new Error(\"\\u7F3A\\u5C11\\u53C2\\u6570\".concat(_o));}};function initChat() {var _store$get = _index.default.get(\"main\"),t = _store$get.userName,e = _store$get.channelId,a = _store$get.avatarUrl,o = _store$get.channelDetail,_store$get2 = _index.default.get(\"app\"),r = _store$get2.userId,n = { userId: r, userName: t, roomName: e, pic: a, userType: o.isPPT ? \"slice\" : \"student\" };return chatClose(), (chat = new _chat.default(_objectSpread({}, n, { micUserId: n.userId }))).setup(), _index.default.set({ \"main.chat\": chat }), chat;}function chatClose() {chat && (chat.disconnectSocket(), chat = null);}var destory = function destory() {chatClose(), _index.default.reset();},logVersion = function logVersion() {console.log(__f__(\"VERSION: 1.1.0\", \" at lib\\\\polyv\\\\index.js:1\"));};function setApp(t) {if (logVersion(), \"object\" != typeof t) throw Error(\"请传入正确格式参数\");checkParams(t, [\"apiId\", \"apiSecret|verifyUrl\"]), _index.default.set(\"app\", t);}var _dealDetail = /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(t) {var e, _ref2, _e;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:e = \"Y\" === t.playbackEnabled && t.hasPlayback;t.isPPT = \"ppt\" === t.scene;_context.prev = 2;if (!e) {_context.next = 11;break;}_context.next = 6;return _index2.default.getPlayBackVideos({ channelId: t.channelId });case 6:_ref2 = _context.sent;_e = _ref2.data;if (!(200 !== _e.code)) {_context.next = 10;break;}throw _e;case 10:t.playbackList = _e.data.contents;case 11:_context.next = 16;break;case 13:_context.prev = 13;_context.t0 = _context[\"catch\"](2);console.error(__f__(_context.t0, \" at lib\\\\polyv\\\\index.js:1\"));case 16:return _context.abrupt(\"return\", t);case 17:case \"end\":return _context.stop();}}}, _callee, this, [[2, 13]]);}));return function _dealDetail(_x) {return _ref.apply(this, arguments);};}(),_getPolyvUserId = function _getPolyvUserId(t) {return new Promise(function (e, a) {var o = _index.default.get(\"main.openId\"),r = _index.default.get(\"app.userId\");t === o && r ? e({ data: r }) : _index2.default.getUserId(t).then(function (t) {200 !== t.data.code && a(t), e(t.data);});});},_requestDetail = function _requestDetail(t) {return _index2.default.getChannelDetail(t).then(function (t) {if (200 !== t.data.code) throw t;return t.data;});};function init(t) {return new Promise(function (e, a) {_utils.default.isObj(t) || a(Error(\"options must be object!\")), checkParams(t, [\"openId\", \"channelId\", \"userName\", \"avatarUrl\"]), t && t.pptDelayTime || (t.pptDelayTime = 3e3), _index.default.set(\"main\", _objectSpread({}, t)), _index.default.set({ \"main.userInfo\": _objectSpread({}, t) });var o = t.openId,r = t.channelId,_t$immediateChat = t.immediateChat,n = _t$immediateChat === void 0 ? !0 : _t$immediateChat;Promise.all([_getPolyvUserId(o), _requestDetail(r)]).then( /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(a) {var _a, o, r, i, s;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_a = _slicedToArray(a, 2);o = _a[0];r = _a[1];i = o.data;_context2.next = 6;return _dealDetail(r.data);case 6:s = _context2.sent;s.useVideo = t.useVideo || !1, _index.default.set({ \"app.userId\": i, \"main.channelDetail\": s }), n && initChat(), e({ detail: s, chat: chat });case 8:case \"end\":return _context2.stop();}}}, _callee2, this);}));return function (_x2) {return _ref3.apply(this, arguments);};}()).catch(function (t) {\"[object Object]\" === Object.prototype.toString.call(t) && a(t.data), a(t);});});}var _default = { setApp: setApp, init: init, destory: destory, initChat: initChat, api: _index2.default };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 22);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 23);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 238:
/*!*************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/course.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetCourseTypeList = GetCourseTypeList;exports.GetCourseClass = GetCourseClass;exports.GetVodList = GetVodList;exports.PlayVod = PlayVod;exports.PlayLive = PlayLive;exports.getCourseCatalog = getCourseCatalog;exports.GetBj = GetBj;exports.SaveBj = SaveBj;exports.GetPaper = GetPaper;exports.SaveAskTopic = SaveAskTopic;exports.GetUserAskTopList = GetUserAskTopList;exports.SaveLearnProgress = SaveLearnProgress;\nvar _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取课程类型*/\nfunction GetCourseTypeList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetCourseTypeList', params, ['appToken']);\n}\n/*获取课程分类*/\nfunction GetCourseClass(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/GetCourseClass', params);\n}\n/*获取课程列表*/\nfunction GetVodList(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/GetVodList', params);\n}\n\n/*获取课时播放*/\nfunction PlayVod(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/PlayVod', params, ['appToken']);\n}\n\n/*获取直播信息*/\nfunction PlayLive(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/PlayLive', params, ['appToken']);\n}\n\n/*获取课时列表(数据重构)*/\nfunction getCourseCatalog() {var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Promise(function (resolve) {\n    /**\r\n                                          * 将秒数转换 mm:ss 格式\r\n                                          * @param ss 秒\r\n                                          */\n    var secondsConversion = function secondsConversion(ss) {\n      var time = Number(ss);\n      var hour = Math.floor(time / 3600);\n      var minute = Math.floor((time - hour * 3600) / 60);\n      var second = time - hour * 3600 - minute * 60;\n      hour = hour.toString().length < 2 ? '0' + hour : hour;\n      minute = minute.toString().length < 2 ? '0' + minute : minute;\n      second = second.toString().length < 2 ? '0' + second : second;\n      return hour === '00' ? minute + ':' + second : hour + ':' + minute + ':' + second;\n    };\n    var courseType = props.courseType;\n    var url = courseType === 'face' ? '/plus/ajaxs.ashx?a=getcosInfo&isface=1' : '/plus/ajaxs.ashx?a=getcosInfo';\n    (0, _mainEntrance.GET)(url + '&courseid=' + props.courseid, {\n      schoolid: props.schoolid },\n    ['appToken']).then(function (data) {\n      console.log(__f__(data, \" at api\\\\course.js:49\"));\n      var coursebuyurl = data.Course.coursebuyurl;\n      var teachway = data.Course.teachway;\n      /**课程购买情况*/\n      var courseFree = data.Course.isfree == 0;\n      var specialPermission = false;\n      var buyallcos_isCanLearn = false;\n      var myPeriodids = [];\n      var Pay = data.Pay;\n      var isloginplay = data.isloginplay;\n      var ispower = data.ispower;\n      var timespan = data.timespan;\n      /**判断是否有特殊权限*/\n      if (ispower == 1) {\n        specialPermission = true;\n\n      } else if (Pay) {\n\n        /**是否购买了整个课程*/\n        var isbuyallcos = Pay.isbuyallcos;\n        var shixian = Pay.shixian;\n        if (isbuyallcos == 1) {\n          if (shixian == 0) {\n            /**该课程未限制时间*/\n            buyallcos_isCanLearn = true;\n          } else {\n            /**限制了时间，检查课程是否已过期*/\n            var enddate = new Date(Pay.enddate).getTime();\n            if (enddate > timespan) {\n              buyallcos_isCanLearn = true;\n            }\n          }\n\n        } else {\n          var _periodlist = Pay.periodlist;\n          _periodlist.map(function (period_item) {\n            var enddate = period_item.enddate ? new Date(period_item.enddate).getTime() : null;\n            var ids = period_item.periodids.split(',');\n            for (var p = 0; p < ids.length; p++) {\n              myPeriodids.push({\n                id: ids[p],\n                shixian: period_item.shixian,\n                enddate: enddate });\n\n            }\n          });\n        }\n      }\n      /**\r\n         * 课程学习情况\r\n         */\n      var periodlist = data.Course.periodlist || [];\n      var periods = [];\n      var periodArr = [];\n      var chapterIndex = 0;\n      var sectionIndex = 0;\n      var periodIndex = 0;\n      /*重新构造目录结构*/\n      periodlist.map(function (item) {\n        var addtype = Number(item.addtype);\n        var parentid = item.parentid;\n        switch (addtype) {\n          case 0:\n            /**章*/\n            chapterIndex++;\n            item.$id = chapterIndex;\n            item.$unit = '第 ' + chapterIndex + ' 章';\n            item.$textID = '第 ' + chapterIndex + ' 章';\n            item.$enname = 'chapter';\n            periods.push(item);\n            break;\n          case 2:\n            /**节*/\n            item.$enname = 'section';\n            if (parentid == 0) {\n              sectionIndex++;\n              item.$id = sectionIndex;\n              item.$unit = '第 ' + sectionIndex + ' 节';\n              item.$textID = '第 ' + sectionIndex + ' 节';\n              periods.push(item);\n            } else {\n              periods.map(function (cpt, i) {\n                if (cpt.periodid == parentid) {\n                  if (!cpt.$childs) {\n                    cpt.$childs = [];\n                  }\n                  item.$id = i + 1 + '.' + (cpt.$childs.length + 1);\n                  item.$unit = '第 ' + (cpt.$childs.length + 1) + ' 节';\n                  item.$textID = '第' + (i + 1) + '章 ' + (cpt.$childs.length + 1) + '节';\n                  cpt.$childs.push(item);\n                }\n              });\n            }\n            break;\n          case 1:\n          case 4:\n            /**\r\n                   * isCanLearn\r\n                   * 0 不可观看\r\n                   * 1 可观看\r\n                   * 2 已过期\r\n                   * 3 可试听\r\n                   */\n            item.$enname = 'period';\n            var isCanLearn = 0;\n            if (specialPermission || courseFree || item.isfree == 0 || buyallcos_isCanLearn) {\n              /**该课时免费*/\n              isCanLearn = 1;\n            } else if (item.islistening == 1) {\n              isCanLearn = 3;\n            } else if (Pay) {\n              if (Pay.isbuyallcos == 1 && buyallcos_isCanLearn) {\n                /**\r\n                                                                  * 购买了整个课程，并且课程未到期\r\n                                                                  */\n                isCanLearn = 1;\n              } else {\n                /**\r\n                       * 按课时购买\r\n                       * 遍历当前课时是否存在购买队列，并且课时未到期\r\n                       */\n                for (var p = 0; p < myPeriodids.length; p++) {\n                  var period_item = myPeriodids[p];\n                  if (period_item.id == item.periodid) {\n                    if (period_item.shixian == 0) {\n                      isCanLearn = 1;\n                      break;\n                    } else {\n                      if (period_item.enddate > timespan) {\n                        /**课时未到期，已满足学习条件，直接跳出循环*/\n                        isCanLearn = 1;\n                        break;\n                      } else {\n                        /**\r\n                               * 当前课时已过期，但不跳出循环，继续查找是否有重复购买同课时并且满足学习条件\r\n                               */\n                        if (period_item.islistening == 1) {\n                          isCanLearn = 3;\n                        } else {\n                          isCanLearn = 2;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            switch (Number(item.type)) {\n              case 0:\n                item.$type_name = '视频';\n                break;\n              case 1:\n                item.$type_name = '音频';\n                break;\n              case 2:\n                item.$type_name = '图文';\n                break;\n              case 3:\n                item.$type_name = 'PDF';\n                break;\n              default:\n                item.$type_name = '';}\n\n            /**课时时间处理 */\n            if (item.type > 1) {\n              item.$duration = '';\n            } else if (item.timecount) {\n              var time = secondsConversion(item.timecount);\n              item.$duration = time;\n            }\n            /**直播时间 */\n            if (teachway == 5 && item.livetime && item.invaliddate) {\n              var timestamp_liveTime = new Date(item.livetime);\n              var timestamp_invaliddate = new Date(item.invaliddate);\n              if (item.status == 0) {\n                item.$liveStateText = '直播未开始';\n                item.$liveState = 0;\n              } else if (item.status == 1) {\n                item.$liveStateText = '正在直播';\n                item.$liveState = 1;\n              } else if (item.status == 2) {\n                item.$liveStateText = '直播已结束';\n                item.$liveState = 2;\n              }\n              item.$livetime = timestamp_liveTime.getFullYear() + '/' + (timestamp_liveTime.getMonth() + 1) + '/' + timestamp_liveTime.getDate() + ' ' + timestamp_liveTime.getHours() + ':' + timestamp_liveTime.getMinutes();\n\n              if (timestamp_liveTime.getFullYear() === timestamp_invaliddate.getFullYear() && timestamp_liveTime.getMonth() === timestamp_invaliddate.getMonth() && timestamp_liveTime.getDate() === timestamp_invaliddate.getDate()) {\n                item.$invaliddate = timestamp_invaliddate.getHours() + ':' + timestamp_invaliddate.getMinutes();\n              } else {\n                item.$invaliddate = timestamp_invaliddate.getFullYear() + '/' + (timestamp_invaliddate.getMonth() + 1) + '/' + timestamp_invaliddate.getDate() + ' ' + timestamp_invaliddate.getHours() + ':' + timestamp_invaliddate.getMinutes();\n              }\n              item.$showLiveTime = true;\n            }\n\n            /**课时状态*/\n            var stateText = '去购买';\n\n            switch (isCanLearn) {\n              case 1:\n                if (teachway == 5) {\n                  stateText = '进入直播';\n                } else {\n                  if (item.haslearnpercent > 0) {\n                    stateText = '继续学习';\n                  } else {\n                    stateText = '开始学习';\n                  }\n                }\n                break;\n              case 2:\n                stateText = '已过期';\n                break;\n              case 3:\n                if (teachway == 5) {\n                  stateText = '进入直播';\n                } else {\n                  stateText = '免费观看';\n                }\n                break;}\n\n            item.$stateText = stateText;\n            item.$isCanLearn = isCanLearn;\n            /**更多按钮 */\n            var btns = [];\n            /**课时存在题库 */\n            if (item.haspapertk) {\n              btns.push({\n                text: '题库练习',\n                url: item.exerciseinfo.exercise_url,\n                className: 'ks-catalog-title__btn-lx',\n                type: 0 },\n              {\n                text: '练习记录',\n                url: item.exerciseinfo.exercise_record_url,\n                className: 'ks-catalog-title__btn-record',\n                type: 1 });\n\n            }\n            /**课时存在资料 */\n            if (item.hasmaterial) {\n              var obj = {\n                text: '课时资料',\n                url: item.zlurl,\n                className: 'ks-catalog-title__btn-down',\n                type: 2 };\n\n              btns.push(obj);\n            }\n            item.$btns = btns;\n            item.$state = isCanLearn === 1 || isCanLearn === 3 ? true : false;\n            var _url = isCanLearn === 1 || isCanLearn === 3 ? item.url : coursebuyurl;\n            if (item.periodlock !== 'true') {\n              item.$url = _url;\n            }\n            if (item.money) {\n              item.$money = parseFloat(item.money) ? parseFloat(item.money).toFixed(2) : false;\n            }\n            if (parentid == 0) {\n              periodIndex++;\n              item.$unit = '课时 ' + periodIndex;\n              item.$textID = '课时 ' + periodIndex;\n              periods.push(item);\n            } else {\n              periods.map(function (cpt, c) {\n                if (cpt.periodid == parentid) {\n                  if (!cpt.$childs) {\n                    cpt.$childs = [];\n                  }\n                  var _unit = cpt.addtype == 0 ? '章' : '节';\n                  item.$unit = '课时 ' + (cpt.$childs.length + 1);\n                  item.$textID = '第' + (c + 1) + _unit;\n                  cpt.$childs.push(item);\n                } else if (cpt.$childs) {\n                  cpt.$childs.map(function (sec, s) {\n                    if (sec.periodid == parentid) {\n                      if (!sec.$childs) {\n                        sec.$childs = [];\n                      }\n                      item.$unit = '课时 ' + (sec.$childs.length + 1);\n                      item.$textID = '第' + (c + 1) + '章 第' + (s + 1) + '节';\n                      sec.$childs.push(item);\n                    }\n                  });\n                }\n              });\n            }\n            periodArr.push(item);\n            break;}\n\n      });\n      resolve({\n        periods: periodArr,\n        catalogData: data });\n\n    });\n  });\n}\n/*获取课时笔记*/\nfunction GetBj(params) {\n  return (0, _mainEntrance.POST)('/webapi/course/GetBj', params, ['appToken']);\n}\n/*保存提交笔记*/\nfunction SaveBj(params) {\n  return (0, _mainEntrance.POST)('/index.aspx?c=course&a=play&action=savebj', params, ['appToken']);\n}\n/*获取课程试卷*/\nfunction GetPaper(params) {\n  return (0, _mainEntrance.POST)('/WebApi/course/GetPaper', params, ['appToken', 'userId']);\n}\n/*提交提问数据*/\nfunction SaveAskTopic(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/SaveAskTopic', params, ['appToken', 'userId']);\n}\n/*获取提问数据列表*/\nfunction GetUserAskTopList(params) {\n\n  return (0, _mainEntrance.GET)('/webapi/user/GetUserAskTopList', params, ['appToken', 'userId']);\n}\n\n/*保存学习进度*/\nfunction SaveLearnProgress(params) {\n  return (0, _mainEntrance.GET)('/index.aspx?c=course&a=play&action=save', params, ['appToken']);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///238\n");

/***/ }),

/***/ 24:
/*!******************************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/regenerator-runtime/runtime-module.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var g = \"object\" == typeof global ? global : \"object\" == typeof window ? window : \"object\" == typeof self ? self : void 0,hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0,oldRuntime = hadRuntime && g.regeneratorRuntime;if (g.regeneratorRuntime = void 0, module.exports = __webpack_require__(/*! ./runtime */ 25), hadRuntime) g.regeneratorRuntime = oldRuntime;else try {delete g.regeneratorRuntime;} catch (e) {g.regeneratorRuntime = void 0;}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../软件/HBuilderX.1.9.4.20190426/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzIl0sIm5hbWVzIjpbImciLCJnbG9iYWwiLCJ3aW5kb3ciLCJzZWxmIiwiaGFkUnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJpbmRleE9mIiwib2xkUnVudGltZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiZSJdLCJtYXBwaW5ncyI6IjhDQUFBLElBQUlBLENBQUMsR0FBQyxZQUFVLE9BQU9DLE1BQWpCLEdBQXdCQSxNQUF4QixHQUErQixZQUFVLE9BQU9DLE1BQWpCLEdBQXdCQSxNQUF4QixHQUErQixZQUFVLE9BQU9DLElBQWpCLEdBQXNCQSxJQUF0QixTQUFwRSxDQUFvR0MsVUFBVSxHQUFDSixDQUFDLENBQUNLLGtCQUFGLElBQXNCQyxNQUFNLENBQUNDLG1CQUFQLENBQTJCUCxDQUEzQixFQUE4QlEsT0FBOUIsQ0FBc0Msb0JBQXRDLEtBQTZELENBQWxNLENBQW9NQyxVQUFVLEdBQUNMLFVBQVUsSUFBRUosQ0FBQyxDQUFDSyxrQkFBN04sQ0FBZ1AsSUFBR0wsQ0FBQyxDQUFDSyxrQkFBRixHQUFxQixLQUFLLENBQTFCLEVBQTRCSyxNQUFNLENBQUNDLE9BQVAsR0FBZUMsbUJBQU8sQ0FBQyxtQkFBRCxDQUFsRCxFQUFnRVIsVUFBbkUsRUFBOEVKLENBQUMsQ0FBQ0ssa0JBQUYsR0FBcUJJLFVBQXJCLENBQTlFLEtBQW1ILElBQUcsQ0FBQyxPQUFPVCxDQUFDLENBQUNLLGtCQUFULENBQTRCLENBQWhDLENBQWdDLE9BQU1RLENBQU4sRUFBUSxDQUFDYixDQUFDLENBQUNLLGtCQUFGLEdBQXFCLEtBQUssQ0FBMUIsQ0FBNEIsQyIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnPVwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyxoYWRSdW50aW1lPWcucmVnZW5lcmF0b3JSdW50aW1lJiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpPj0wLG9sZFJ1bnRpbWU9aGFkUnVudGltZSYmZy5yZWdlbmVyYXRvclJ1bnRpbWU7aWYoZy5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwLG1vZHVsZS5leHBvcnRzPXJlcXVpcmUoXCIuL3J1bnRpbWVcIiksaGFkUnVudGltZSlnLnJlZ2VuZXJhdG9yUnVudGltZT1vbGRSdW50aW1lO2Vsc2UgdHJ5e2RlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZX1jYXRjaChlKXtnLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDB9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!***********************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/regenerator-runtime/runtime.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {!function (t) {\"use strict\";var r,e = Object.prototype,n = e.hasOwnProperty,o = \"function\" == typeof Symbol ? Symbol : {},i = o.iterator || \"@@iterator\",a = o.toStringTag || \"@@toStringTag\",c = \"object\" == typeof module,u = t.regeneratorRuntime;if (u) c && (module.exports = u);else {(u = t.regeneratorRuntime = c ? module.exports : {}).wrap = m;var h = \"suspendedStart\",s = \"suspendedYield\",f = \"executing\",l = \"completed\",p = {},y = {};y[i] = function () {return this;};var v = Object.getPrototypeOf,d = v && v(v(N([])));d && d !== e && n.call(d, i) && (y = d);var g = b.prototype = L.prototype = Object.create(y);x.prototype = g.constructor = b, b.constructor = x, b[a] = x.displayName = \"GeneratorFunction\", u.isGeneratorFunction = function (t) {var r = \"function\" == typeof t && t.constructor;return !!r && (r === x || \"GeneratorFunction\" === (r.displayName || r.name));}, u.mark = function (t) {return Object.setPrototypeOf ? Object.setPrototypeOf(t, b) : (t.__proto__ = b, a in t || (t[a] = \"GeneratorFunction\")), t.prototype = Object.create(g), t;}, u.awrap = function (t) {return { __await: t };}, E(j.prototype), u.AsyncIterator = j, u.async = function (t, r, e, n) {var o = new j(m(t, r, e, n));return u.isGeneratorFunction(r) ? o : o.next().then(function (t) {return t.done ? t.value : o.next();});}, E(g), g[a] = \"Generator\", g.toString = function () {return \"[object Generator]\";}, u.keys = function (t) {var r = [];for (var e in t) {r.push(e);}return r.reverse(), function e() {for (; r.length;) {var n = r.pop();if (n in t) return e.value = n, e.done = !1, e;}return e.done = !0, e;};}, u.values = N, G.prototype = { constructor: G, reset: function reset(t) {if (this.prev = 0, this.next = 0, this.sent = this._sent = r, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = r, this.tryEntries.forEach(k), !t) for (var e in this) {\"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = r);}}, stop: function stop() {this.done = !0;var t = this.tryEntries[0].completion;if (\"throw\" === t.type) throw t.arg;return this.rval;}, dispatchException: function dispatchException(t) {if (this.done) throw t;var e = this;function o(n, o) {return c.type = \"throw\", c.arg = t, e.next = n, o && (e.method = \"next\", e.arg = r), !!o;}for (var i = this.tryEntries.length - 1; i >= 0; --i) {var a = this.tryEntries[i],c = a.completion;if (\"root\" === a.tryLoc) return o(\"end\");if (a.tryLoc <= this.prev) {var u = n.call(a, \"catchLoc\"),h = n.call(a, \"finallyLoc\");if (u && h) {if (this.prev < a.catchLoc) return o(a.catchLoc, !0);if (this.prev < a.finallyLoc) return o(a.finallyLoc);} else if (u) {if (this.prev < a.catchLoc) return o(a.catchLoc, !0);} else {if (!h) throw new Error(\"try statement without catch or finally\");if (this.prev < a.finallyLoc) return o(a.finallyLoc);}}}}, abrupt: function abrupt(t, r) {for (var e = this.tryEntries.length - 1; e >= 0; --e) {var o = this.tryEntries[e];if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {var i = o;break;}}i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= r && r <= i.finallyLoc && (i = null);var a = i ? i.completion : {};return a.type = t, a.arg = r, i ? (this.method = \"next\", this.next = i.finallyLoc, p) : this.complete(a);}, complete: function complete(t, r) {if (\"throw\" === t.type) throw t.arg;return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), p;}, finish: function finish(t) {for (var r = this.tryEntries.length - 1; r >= 0; --r) {var e = this.tryEntries[r];if (e.finallyLoc === t) return this.complete(e.completion, e.afterLoc), k(e), p;}}, catch: function _catch(t) {for (var r = this.tryEntries.length - 1; r >= 0; --r) {var e = this.tryEntries[r];if (e.tryLoc === t) {var n = e.completion;if (\"throw\" === n.type) {var o = n.arg;k(e);}return o;}}throw new Error(\"illegal catch attempt\");}, delegateYield: function delegateYield(t, e, n) {return this.delegate = { iterator: N(t), resultName: e, nextLoc: n }, \"next\" === this.method && (this.arg = r), p;} };}function m(t, r, e, n) {var o = r && r.prototype instanceof L ? r : L,i = Object.create(o.prototype),a = new G(n || []);return i._invoke = function (t, r, e) {var n = h;return function (o, i) {if (n === f) throw new Error(\"Generator is already running\");if (n === l) {if (\"throw\" === o) throw i;return P();}for (e.method = o, e.arg = i;;) {var a = e.delegate;if (a) {var c = _(a, e);if (c) {if (c === p) continue;return c;}}if (\"next\" === e.method) e.sent = e._sent = e.arg;else if (\"throw\" === e.method) {if (n === h) throw n = l, e.arg;e.dispatchException(e.arg);} else \"return\" === e.method && e.abrupt(\"return\", e.arg);n = f;var u = w(t, r, e);if (\"normal\" === u.type) {if (n = e.done ? l : s, u.arg === p) continue;return { value: u.arg, done: e.done };}\"throw\" === u.type && (n = l, e.method = \"throw\", e.arg = u.arg);}};}(t, e, a), i;}function w(t, r, e) {try {return { type: \"normal\", arg: t.call(r, e) };} catch (t) {return { type: \"throw\", arg: t };}}function L() {}function x() {}function b() {}function E(t) {[\"next\", \"throw\", \"return\"].forEach(function (r) {t[r] = function (t) {return this._invoke(r, t);};});}function j(t) {function r(e, o, i, a) {var c = w(t[e], t, o);if (\"throw\" !== c.type) {var u = c.arg,h = u.value;return h && \"object\" == typeof h && n.call(h, \"__await\") ? Promise.resolve(h.__await).then(function (t) {r(\"next\", t, i, a);}, function (t) {r(\"throw\", t, i, a);}) : Promise.resolve(h).then(function (t) {u.value = t, i(u);}, a);}a(c.arg);}var e;\"object\" == typeof process && process.domain && (r = process.domain.bind(r)), this._invoke = function (t, n) {function o() {return new Promise(function (e, o) {r(t, n, e, o);});}return e = e ? e.then(o, o) : o();};}function _(t, e) {var n = t.iterator[e.method];if (n === r) {if (e.delegate = null, \"throw\" === e.method) {if (t.iterator.return && (e.method = \"return\", e.arg = r, _(t, e), \"throw\" === e.method)) return p;e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a 'throw' method\");}return p;}var o = w(n, t.iterator, e.arg);if (\"throw\" === o.type) return e.method = \"throw\", e.arg = o.arg, e.delegate = null, p;var i = o.arg;return i ? i.done ? (e[t.resultName] = i.value, e.next = t.nextLoc, \"return\" !== e.method && (e.method = \"next\", e.arg = r), e.delegate = null, p) : i : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, p);}function O(t) {var r = { tryLoc: t[0] };1 in t && (r.catchLoc = t[1]), 2 in t && (r.finallyLoc = t[2], r.afterLoc = t[3]), this.tryEntries.push(r);}function k(t) {var r = t.completion || {};r.type = \"normal\", delete r.arg, t.completion = r;}function G(t) {this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(O, this), this.reset(!0);}function N(t) {if (t) {var e = t[i];if (e) return e.call(t);if (\"function\" == typeof t.next) return t;if (!isNaN(t.length)) {var o = -1,a = function e() {for (; ++o < t.length;) {if (n.call(t, o)) return e.value = t[o], e.done = !1, e;}return e.value = r, e.done = !0, e;};return a.next = a;}}return { next: P };}function P() {return { value: r, done: !0 };}}(\"object\" == typeof global ? global : \"object\" == typeof window ? window : \"object\" == typeof self ? self : void 0);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../软件/HBuilderX.1.9.4.20190426/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2), __webpack_require__(/*! ./../../../../../../../../软件/HBuilderX.1.9.4.20190426/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 26)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 27);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 26)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!*****************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/chat.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _events = _interopRequireDefault(__webpack_require__(/*! ./events */ 29));var _md = _interopRequireDefault(__webpack_require__(/*! ../utils/md5 */ 30));var _weappSocket = _interopRequireDefault(__webpack_require__(/*! ../utils/weapp.socket.io */ 31));var _eventTypes = _interopRequireDefault(__webpack_require__(/*! ./eventTypes */ 32));var _emotionList = _interopRequireDefault(__webpack_require__(/*! ./emotionList */ 33));var _api = _interopRequireDefault(__webpack_require__(/*! ./api */ 34));var _config = __webpack_require__(/*! ../utils/config */ 39);var _roomEvents;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var socketHost = _config.URL.socketHost,roomEvents = (_roomEvents = {}, _defineProperty(_roomEvents, _eventTypes.default.KICK_USER, function (e, t) {t.user.userId == this.options.userId && (this.trigger(_eventTypes.default.BAN_USER_ROOM), this.disconnectSocket());}), _defineProperty(_roomEvents, _eventTypes.default.LOGIN_KICK, function (e, t) {this.trigger(_eventTypes.default.BAN_USER_ROOM), this.disconnectSocket();}), _defineProperty(_roomEvents, _eventTypes.default.LOGIN, function (e, t) {var s = this.addUserlist([t.user]);s.length > 0 && this.trigger(_eventTypes.default.UPDATEUSER, \"add\", s, !0);}), _defineProperty(_roomEvents, _eventTypes.default.LOGOUT, function (e, t) {var s = this.removeUser(t.uid);s && this.trigger(_eventTypes.default.UPDATEUSER, \"remove\", s);}), _defineProperty(_roomEvents, _eventTypes.default.CONNECT, function (e, t) {var _this = this;this.options.isMobile || this.getOnlineUserList().then(function (e) {_this.getQuestionHistoryMessage();var t = _this.addUserlist(e.data.data.userlist);t.length > 0 && _this.trigger(_eventTypes.default.UPDATEUSER, \"add\", t);});}), _defineProperty(_roomEvents, _eventTypes.default.MICROPHONE, function (e, t) {\"open\" !== this.status && this.clearChannelClock();}), _defineProperty(_roomEvents, _eventTypes.default.ONLINE_TEACHERINFO, function (e, t) {this.teacherData = t.data, this.hasClient = !0, console.log(__f__(this.teacherData, \" at lib\\\\polyv\\\\common\\\\chat\\\\chat.js:1\"));}), _defineProperty(_roomEvents, _eventTypes.default.SET_NICK, function (e, t) {\"error\" !== t.status && t.userId === this.userId && (this.options.userName = this.options.nick = t.nick, _api.default.setNickname(this.options.roomId, t.nick));}), _defineProperty(_roomEvents, _eventTypes.default.SLICEID, function (e, t) {this.options.session_id = t.data.sessionId;}), _defineProperty(_roomEvents, _eventTypes.default.SET_MANAGER_INFO, function (e, t) {}), _roomEvents);var Chat = /*#__PURE__*/function () {_createClass(Chat, [{ key: \"suppotSocket\", value: function suppotSocket() {return !0;} }, { key: \"hasMoreHistory\", value: function hasMoreHistory() {return this._hasMoreHistory;} }, { key: \"userlist\", value: function userlist() {return this._user.list;} }, { key: \"addUserlist\", value: function addUserlist(e) {var _this2 = this;var t = this._user,s = this._teacher,i = [];return e.forEach(function (e) {var r = e.userType;if (\"teacher\" !== e.userType || \"chatroom\" !== e.userSource) return \"manager\" === r || \"teacher\" === r || \"assistant\" === r ? (\"teacher\" === r && (_this2.hasClient = !0, _this2.teacherData = e), void (-1 === s.userId.indexOf(e.userId) && (s.list.push(e), s.id.push(e.uid), s.userId.push(e.userId), i.push(e)))) : void (-1 === t.userId.indexOf(e.userId) && (t.list.push(e), t.id.push(e.uid), t.ip.push(e.clientIp), t.userId.push(e.userId), i.push(e)));}), i;} }, { key: \"removeUser\", value: function removeUser(e) {var t = this._user,s = this._teacher,i = s.id.indexOf(e);if (-1 !== i) return \"teacher\" === s.list[i].userType && (this.hasClient = !1), s.id.splice(i, 1), s.userId.splice(i, 1), s.list.splice(i, 1);var r = t.id.indexOf(e);return -1 !== r ? (t.id.splice(r, 1), t.userId.splice(r, 1), t.list.splice(r, 1)) : void 0;} }], [{ key: \"parseString\", value: function parseString(e) {return e ? e.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").trim() : \"\";} }, { key: \"FormatTime\", value: function FormatTime(e) {var t = function t(e) {return e < 10 ? \"0\".concat(e) : e;},s = new Date(e / 1);return \"\".concat(s.getFullYear(), \"-\").concat(t(s.getMonth() + 1), \"-\").concat(t(s.getDate()), \" \").concat(t(s.getHours()), \":\").concat(t(s.getMinutes()));} }, { key: \"FormatEmotions\", value: function FormatEmotions(e) {if (!e) return \"\";var t = e.indexOf(\"[\");var _loop = function _loop() {var s = e.indexOf(\"]\", t + 1);if (-1 === s) return \"break\";var i = e.substring(0, t),r = e.substring(s + 1);var n = e.substring(t + 1, s);if (n) {var _e = _emotionList.default.filter(function (e) {return e.title === n;}),_t = _e.length > 0 ? _e[0].url : \"\";_t && (n = \"<img src=\\\"\".concat(_t, \"\\\">\"));}t = (e = i + n + r).indexOf(\"[\");};for (; t > -1;) {var _ret = _loop();if (_ret === \"break\") break;}return e;} }, { key: \"setCookie\", value: function setCookie(e, t, s) {var i = new Date().getTime() + 24 * s * 60 * 60 * 1e3;wx.setStorage({ key: \"\".concat(e).concat(t), data: i });} }, { key: \"getCookie\", value: function getCookie(e) {return wx.getStorageSync(e);} }, { key: \"getUid\", value: function getUid(e) {return parseInt(e / 1 % Math.pow(2, 32)) + \"\";} }, { key: \"getSign\", value: function getSign(e) {return (0, _md.default)(\"polyv_room_sign\".concat(e));} }]);function Chat(e) {_classCallCheck(this, Chat);this.options = Object.assign({}, e), this.options.nick = e.userName, this.userId = e.userId, this.options.roomId = e.roomId || e.roomName, this.options.sign = e.sign || Chat.getSign(this.options.roomId), this.options.roomIds = e.roomIds, this.teacherData = {}, this.historyCount = 0, this._hasMoreHistory = !1, this.roomClosed = !1, this._hasHistoryMessage = !1, this.joinChannelClock = null, this.connectDelayNumber = [2e3, 3e3, 4e3, 5e3], this._user = { list: [], id: [], userId: [], ip: [] }, this._teacher = { list: [], id: [], userId: [] }, this.lastSpeakTime = 0, this.lastAskTime = 0, this.hasClient = \"live\" === e.liveStatus;var t = this;var s = new _events.default();s.trigger = function (e) {for (var _len = arguments.length, i = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {i[_key - 1] = arguments[_key];}return s.emit.apply(s, [e, e].concat(i)), t;}, s.off = function (e) {for (var _len2 = arguments.length, i = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {i[_key2 - 1] = arguments[_key2];}return s.removeListener.apply(s, [e].concat(i)), t;}, this.on = function (e, i) {return s.on(e, i), t;}, this.off = s.off.bind(s), this.trigger = s.trigger.bind(s), this.events = _eventTypes.default;for (var _e2 in roomEvents) {roomEvents.hasOwnProperty(_e2) && this.on(_e2, roomEvents[_e2].bind(this));}}_createClass(Chat, [{ key: \"checkBanRoom\", value: function checkBanRoom() {var e = \"ban_user_room\".concat(this.options.roomName),t = Chat.getCookie(e);return !!t && (t > new Date().getTime() || (wx.removeStorageSync(e), !1));} }, { key: \"getIsKicked\", value: function getIsKicked() {return _api.default.getIsKicked(this.options.roomId, this.userId).then(function (e) {if (200 === e.data.code) return !0;throw e.data;});} }, { key: \"setup\", value: function setup() {var _this3 = this;var e = !1;this.socket = this.connectSocket();var t = this.overtimeConnect(30);this.socket.on(\"connect\", function () {clearTimeout(t), _this3.trigger(_eventTypes.default.CONNECT).login(), e || (_this3.receiveMessage().receiveClassMessage().receiveJoinResponseMessage().receiveJoinSuccessMessage().socketEvent(), e = !0);});} }, { key: \"overtimeConnect\", value: function overtimeConnect() {var _this4 = this;var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;return setTimeout(function () {_this4.trigger(_eventTypes.default.OVERTIMECONNECT);}, 1e3 * e);} }, { key: \"login\", value: function login() {var e = this.options;return this.socket.emit(\"message\", JSON.stringify({ EVENT: \"LOGIN\", values: [e.userName, e.pic, e.userId], roomId: e.roomId, type: e.userType })), this._createHeartbeat(), this;} }, { key: \"_createHeartbeat\", value: function _createHeartbeat() {var _this5 = this;this.heartbeatInterval && clearInterval(this.heartbeatInterval), this.heartbeatInterval = setInterval(function () {var e = _this5.options;_this5.socket.emit(\"message\", JSON.stringify({ EVENT: \"HEARTBEAT\", uid: e.userId }));}, 25e3);} }, { key: \"receiveClassMessage\", value: function receiveClassMessage() {var _this6 = this;return this.socket.on(\"class\", function (e) {var t = JSON.parse(e);if (t && t.EVENT) {var _e3;switch (t.EVENT) {case \"onClassStart\":_e3 = _eventTypes.default.CLASSSTART;break;case \"onClassEnd\":_e3 = _eventTypes.default.CLASSEND;break;case \"onClassControl\":_e3 = _eventTypes.default.CLASSCONTROL;}if (!_e3) return;if (_e3 === _eventTypes.default.CLASSCONTROL) {_this6.trigger(_e3, t);var s = t.type;return \"muteAllAudio\" === s ? _e3 = _eventTypes.default.MUTEALLAUDIO : \"muteAllVideo\" === s ? _e3 = _eventTypes.default.MUTEALLVIDEO : \"muteUserAudio\" === s ? _e3 = _eventTypes.default.MUTEUSERAUDIO : \"muteUserVideo\" === s && (_e3 = _eventTypes.default.MUTEUSERVIDEO), t.EVENT = _e3, delete t.type, void _this6.trigger(_e3, t);}t.EVENT = _e3, _this6.trigger(_eventTypes.default.ALLOW_MICROPHONE, t);}}), this;} }, { key: \"receiveJoinResponseMessage\", value: function receiveJoinResponseMessage() {var _this7 = this;return this.socket.on(\"joinResponse\", function (e) {var t = JSON.parse(e);t && (t.EVENT = _eventTypes.default.ALLOW_MICROPHONE, _this7.trigger(_eventTypes.default.ALLOW_MICROPHONE, t));}), this;} }, { key: \"receiveJoinSuccessMessage\", value: function receiveJoinSuccessMessage() {var _this8 = this;return this.socket.on(\"joinSuccess\", function (e) {var t = JSON.parse(e);t && (t.EVENT = _eventTypes.default.SUCCESS_MICROPHONE, _this8.trigger(_eventTypes.default.SUCCESS_MICROPHONE, t));}), this;} }, { key: \"receiveMessage\", value: function receiveMessage() {var _this9 = this;return this.socket.on(\"message\", function (e) {var t;try {t = JSON.parse(e);} catch (e) {console.error(__f__(e, \" at lib\\\\polyv\\\\common\\\\chat\\\\chat.js:1\"));}if (t && t.EVENT) {var _e4;switch (t.EVENT) {case \"CLOSEROOM\":_this9.roomClosed = t.value.closed, _e4 = t.value.closed ? _eventTypes.default.CLOSE_ROOM : _eventTypes.default.OPEN_ROOM;break;case \"GONGGAO\":_e4 = _eventTypes.default.SYSTEM_ANNOUNCEMENT;break;case \"SPEAK\":switch (t.status) {case \"error\":_e4 = _eventTypes.default.SPEAK_ERROR;break;case \"censor\":_e4 = _eventTypes.default.SPEAK_CENSOR;break;default:_e4 = _eventTypes.default.SPEAK;}break;case \"REWARD\":_e4 = _eventTypes.default.REWARD;break;case \"QUESTION\":_e4 = _eventTypes.default.QUESTION;break;case \"CLOSE_QUESTION\":_e4 = _eventTypes.default.CLOSE_QUESTION;break;case \"ANSWER\":_e4 = _eventTypes.default.ANSWER;break;case \"CUSTOMER_MESSAGE\":_e4 = _eventTypes.default.CUSTOMER_MESSAGE;break;case \"ERROR\":_e4 = _eventTypes.default.SERVER_ERROR;break;case \"KICK\":_e4 = _eventTypes.default.KICK_USER;break;case \"LOGIN_KICK\":_e4 = _eventTypes.default.LOGIN_KICK;break;case \"REMOVE_HISTORY\":_e4 = _eventTypes.default.REMOVE_HISTORY;break;case \"REMOVE_CONTENT\":_e4 = _eventTypes.default.REMOVE_CONTENT;break;case \"CLOSE_DANMU\":_e4 = _eventTypes.default.CLOSE_DANMU;break;case \"LOGIN\":_e4 = _eventTypes.default.LOGIN;break;case \"LOGOUT\":_e4 = _eventTypes.default.LOGOUT;break;case \"onSliceID\":_e4 = _eventTypes.default.SLICEID;break;case \"onSliceStart\":_e4 = _eventTypes.default.SLICESTART;break;case \"onSliceControl\":_e4 = _eventTypes.default.SLICECONTROL;break;case \"onSliceDraw\":_e4 = _eventTypes.default.SLICEDRAW;break;case \"onSliceOpen\":_e4 = _eventTypes.default.SLICEDOPEN;break;case \"S_QUESTION\":_e4 = _eventTypes.default.S_QUESTION;break;case \"T_ANSWER\":_e4 = _eventTypes.default.T_ANSWER;break;case \"BULLETIN\":_e4 = _eventTypes.default.BULLETIN;break;case \"REMOVE_BULLETIN\":_e4 = _eventTypes.default.REMOVE_BULLETIN;break;case \"FLOWERS\":_e4 = _eventTypes.default.FLOWERS;break;case \"REDPAPER\":_e4 = _eventTypes.default.REDPAPER;break;case \"SIGN_IN\":_e4 = _eventTypes.default.SIGN_IN;break;case \"STOP_SIGN_IN\":_e4 = _eventTypes.default.STOP_SIGN_IN;break;case \"LIKES\":_e4 = _eventTypes.default.LIKES;break;case \"OPEN_MICROPHONE\":_e4 = _eventTypes.default.MICROPHONE;break;case \"SET_NICK\":_e4 = _eventTypes.default.SET_NICK;break;case \"O_TEACHER_INFO\":_e4 = _eventTypes.default.ONLINE_TEACHERINFO;break;case \"SET_MANAGER_INFO\":_e4 = _eventTypes.default.SET_MANAGER_INFO;break;case \"GET_TEST_QUESTION_CONTENT\":_e4 = _eventTypes.default.GET_TEST_QUESTION_CONTENT;break;case \"GET_TEST_QUESTION_RESULT\":_e4 = _eventTypes.default.GET_TEST_QUESTION_RESULT;break;case \"STOP_TEST_QUESTION\":_e4 = _eventTypes.default.STOP_TEST_QUESTION;break;case \"SYSTEM_MESSAGE\":_e4 = _eventTypes.default.SYSTEM_MESSAGE;break;case \"CHAT_IMG\":_e4 = _eventTypes.default.CHAT_IMG;}if (!_e4) return;if (t.EVENT = _e4, _e4 === _eventTypes.default.S_QUESTION) {if (t.user.userId !== _this9.userId) return;t.user.nick || (t.user.nick = t.user.userName), _this9.lastAskTime = new Date().getTime(), t = _this9.parseData([t])[0];}if (_e4 === _eventTypes.default.T_ANSWER && t.s_userId !== _this9.userId) return;_e4 === _eventTypes.default.SPEAK && (t.content = t.values[0], delete t.values, t = _this9.parseData([t])[0]), _e4 === _eventTypes.default.SPEAK_ERROR && (t = _this9.parseData([t])[0]), _e4 === _eventTypes.default.FLOWERS && (t.flowers = !0), _e4 === _eventTypes.default.REWARD && (t.reward = !0), _e4 === _eventTypes.default.CUSTOMER_MESSAGE && (t.customerMessage = !0), _this9.trigger(_e4, t);}}), this;} }, { key: \"socketEvent\", value: function socketEvent() {var _this10 = this;return this.socket.on(\"disconnect\", function () {_this10.trigger(_eventTypes.default.DISCONNECT);}), this.socket.on(\"error\", function () {_this10.trigger(_eventTypes.default.ERROR);}), this.socket.on(\"reconnect\", function (e) {_this10.trigger(_eventTypes.default.RECONNECT);}), this.socket.on(\"reconnect_attempt\", function (e) {_this10.trigger(_eventTypes.default.RECONNECT_ATTEMPT);}), this;} }, { key: \"connectSocket\", value: function connectSocket() {return (0, _weappSocket.default)(socketHost, { query: { token: this.options.chatToken }, transports: [this.suppotSocket() ? \"websocket\" : \"polling\"], reconnectionDelay: this.connectDelayNumber[Math.floor(4 * Math.random())], randomizationFactor: Math.random() });} }, { key: \"send\", value: function send(e) {if (!this.socket) return void this.trigger(_eventTypes.default.PROHIBIT_TO_SPEAK);if (this.roomClosed) return;if (new Date().getTime() - this.lastSpeakTime < 3e3) return void this.trigger(_eventTypes.default.SYSTEM_MESSAGE, { system: !0, content: \"您的发言过快，请稍后再试\" });var t = Chat.parseString(e),s = this.options,i = { EVENT: \"SPEAK\", values: [t], roomId: s.roomId };return this.socket.emit(\"message\", JSON.stringify(i)), this.lastSpeakTime = new Date().getTime(), this.trigger(_eventTypes.default.SEND_MESSAGE, this.parseData([{ content: t, time: new Date().getTime(), mySelfSend: !0, id: Math.floor(1e7 * Math.random()), user: { nick: s.userName, pic: s.pic, userId: s.userId, roomId: s.roomId, channelId: s.roomName } }])[0]), this;} }, { key: \"kick\", value: function kick(e) {var t = this.options,s = { EVENT: \"KICK\", roomId: t.roomId, channelId: t.roomName, userId: e, sign: t.sign };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"prohibitSpeak\", value: function prohibitSpeak(e) {var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;var s = this.options,i = { EVENT: !0 === t ? \"SHIELD\" : \"REMOVE_SHIELD\", roomId: s.roomId, channelId: s.roomName, sign: s.sign, value: e };this.socket.emit(\"message\", JSON.stringify(i));var r = this._user,n = r.ip.indexOf(e);r.list[n] && (r.list[n].banned = !!t);} }, { key: \"sendQuestion\", value: function sendQuestion(e) {var t = this.options;if (new Date().getTime() - this.lastAskTime < 3e3) return void this.trigger(_eventTypes.default.SYSTEM_MESSAGE, { system: !0, content: \"您的发言过快，请稍后再试\" });var s = { EVENT: \"S_QUESTION\", roomId: t.roomId, content: e, user: { nick: t.nick, pic: t.pic, userId: t.userId, actor: t.actor ? t.actor : \"学生\", userType: \"slice\" === t.userType ? \"student\" : t.userType } };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"sendAnnouncement\", value: function sendAnnouncement(e) {var t = this.options,s = { EVENT: \"BULLETIN\", roomId: t.roomId, channelId: t.roomName, sign: t.sign, content: e };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"deleteAnnouncement\", value: function deleteAnnouncement() {var e = this.options,t = { EVENT: \"REMOVE_BULLETIN\", roomId: e.roomId, channelId: e.roomName, sign: e.sign };this.socket.emit(\"message\", JSON.stringify(t));} }, { key: \"sendLike\", value: function sendLike(e) {var t = this.options,s = { EVENT: \"LIKES\", roomId: t.roomId, channelId: t.roomName, nick: t.nick, count: e };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"setNick\", value: function setNick(e) {var t = this.options,s = { EVENT: \"SET_NICK\", roomId: t.roomId, channelId: t.roomName, nick: e, userId: t.userId };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"toSign\", value: function toSign(e) {var _this$options = this.options,t = _this$options.roomId,s = _this$options.userId,i = _this$options.nick;this.socket.emit(\"message\", JSON.stringify({ EVENT: \"TO_SIGN_IN\", roomId: t, checkinId: e, user: { userId: s, nick: i } }));} }, { key: \"sendSign\", value: function sendSign(e, t) {var s = { EVENT: \"SIGN_IN\", roomId: this.options.roomId, data: { message: e, limitTime: t } };this.socket.emit(\"message\", JSON.stringify(s));} }, { key: \"endSign\", value: function endSign() {var e = { EVENT: \"STOP_SIGN_IN\", roomId: this.options.roomId };this.socket.emit(\"message\", JSON.stringify(e));} }, { key: \"sendAnswer\", value: function sendAnswer(e, t) {var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};var i = this.options,r = { EVENT: \"ANSWER_TEST_QUESTION\", roomId: i.roomId, nick: i.nick, userId: i.userId, option: e, questionId: t };this.socket.emit(\"message\", JSON.stringify(r), s);} }, { key: \"joinChannel\", value: function joinChannel() {var _this11 = this;var e = this.options,t = { user: { nick: e.nick, pic: e.pic, userId: Chat.getUid(e.micUserId), userType: e.userType, sessionId: e.session_id }, roomId: e.roomId, sessionId: e.session_id };this.clearChannelClock(), this.socket.emit(\"joinRequest\", JSON.stringify(t), function (e, t, s) {_this11.clearChannelClock();}), this.joinChannelClock = setTimeout(function () {_this11.trigger(_eventTypes.default.JOIN_CHANNEL_FAIL);}, 2e4);} }, { key: \"clearChannelClock\", value: function clearChannelClock() {clearTimeout(this.joinChannelClock);} }, { key: \"joinChannelSuccess\", value: function joinChannelSuccess() {var e = this.options,t = { user: { nick: e.nick, pic: e.pic, userId: Chat.getUid(e.micUserId), userType: e.userType, sessionId: e.session_id }, roomId: e.roomId, sessionId: e.session_id };this.socket.emit(\"joinSuccess\", JSON.stringify(t));} }, { key: \"cancelJoinChannel\", value: function cancelJoinChannel() {var e = this.options,t = { user: { nick: e.nick, pic: e.pic, userId: Chat.getUid(e.micUserId), userType: e.userType, sessionId: e.session_id }, roomId: e.roomId, sessionId: e.session_id };this.socket.emit(\"joinLeave\", JSON.stringify(t));} }, { key: \"disconnectSocket\", value: function disconnectSocket() {return this.socket && this.socket.close(), this;} }, { key: \"getActor\", value: function getActor(e) {var t = \"\";return e.actor ? t = e.actor : \"teacher\" === e.userType ? t = \"讲师\" : \"manager\" === e.userType ? t = \"管理员\" : \"assistant\" === e.userType && (t = \"助教\"), t;} }, { key: \"parseData\", value: function parseData(e) {var _this12 = this;return e.map(function (e) {return e.user && (e.reward = \"1\" === e.user.uid, e.isCustomMsg = \"2\" === e.user.uid, e.currentUser = e.user.userId === _this12.options.userId, e.actor = _this12.getActor(e.user), e.user.pic = _this12.dealImgUrl(e.user.pic), e.reward && e.content.gimg && (e.content.gimg = _this12.dealImgUrl(e.content.gimg))), e.content = e.reward || \"chatImg\" === e.msgSource ? e.content : Chat.parseString(e.content), e.time && (e.formatTime = Chat.FormatTime(e.time)), e.system = e.system || \"error\" === e.status, e.system && (e.content = e.message), e;});} }, { key: \"dealImgUrl\", value: function dealImgUrl(e) {return e.replace(/^\\/\\//, \"https://\");} }, { key: \"getOnlineUserList\", value: function getOnlineUserList() {var e = this.options;return _api.default.getOnlineUserList(e.roomName);} }, { key: \"getHistoryMessage\", value: function getHistoryMessage() {var _this13 = this;var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;var t = arguments.length > 1 ? arguments[1] : undefined;var s = null == t ? this.historyCount : t,i = this.options;return _api.default.getHistoryMessage(i, s, e).then(function (t) {var i = t.data.data;_this13.historyCount += e, _this13._hasMoreHistory = 21 === i.length, _this13.trigger(_eventTypes.default.HISTORY_MESSAGE, _this13.parseData(i.reverse().slice(_this13._hasMoreHistory ? 1 : 0)), s, s + e);}), this;} }, { key: \"getQuestionHistoryMessage\", value: function getQuestionHistoryMessage() {var _this14 = this;_api.default.getQuestionHistoryMessage(this.options.roomName).then(function (e) {var t = e.data.data,s = _this14.userId;0 === t.filter(function (e) {return e.user && (\"teacher\" === e.user.userType || \"assistant\" === e.user.userType || \"manager\" === e.user.userType) && e.s_userId === s;}).length && t.unshift({ content: \"同学，您好！请问有什么问题吗？\", time: new Date().getTime(), s_userId: s, user: { actor: \"讲师\", clientIp: \"\", nick: \"讲师\", pic: \"//livestatic.polyv.net/assets/images/teacher.png\", userType: \"teacher\" } }), _this14.trigger(_eventTypes.default.UPDATE_QUESTION_HISTROY, _this14.parseData(t.filter(function (e) {return e.user && (\"student\" === e.user.userType && e.user.userId === s || \"student\" !== e.user.userType && e.s_userId === s);})));});} }, { key: \"getCurrentSignRecord\", value: function getCurrentSignRecord(e) {return _api.default.getCurrentSignRecord(e);} }, { key: \"getHistorySignRecord\", value: function getHistorySignRecord(e) {return _api.default.getHistorySignRecord(e);} }, { key: \"getBannedList\", value: function getBannedList() {return _api.default.getBannedList(this.options.roomId);} }, { key: \"removeHistoryMessage\", value: function removeHistoryMessage(e) {var t = this.options;_api.default.removeHistoryUrl(e, t);} }, { key: \"cleanHistoryMessage\", value: function cleanHistoryMessage() {var e = this.options,t = { EVENT: \"REMOVE_HISTORY\", roomId: e.roomId, sign: e.sign, subsidiaryRoom: e.roomIds };this.socket.emit(\"message\", JSON.stringify(t));} }, { key: \"checkCurrentStatus\", value: function checkCurrentStatus() {return _api.default.checkCurrentStatus(this.options.roomId);} }, { key: \"sendFlower\", value: function sendFlower(e) {var t = this.options,s = { EVENT: \"LIKES\", roomId: t.roomId, nick: t.userName, count: e };this.socket.emit(\"message\", JSON.stringify(s));} }]);return Chat;}();Chat.events = _eventTypes.default;var _default = Chat;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 287:
/*!************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/other.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetWebViewUrl = GetWebViewUrl;exports.About = About;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取url*/\nfunction GetWebViewUrl(params) {\n  return (0, _mainEntrance.POST)('/webapi/other/GetInfo', params, ['appToken']);\n}\n/*关于我们*/\nfunction About(params) {\n  return (0, _mainEntrance.POST)('/webapi/other/About', params, ['appToken']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL290aGVyLmpzIl0sIm5hbWVzIjpbIkdldFdlYlZpZXdVcmwiLCJwYXJhbXMiLCJBYm91dCJdLCJtYXBwaW5ncyI6IjBIQUFBOztBQUVBO0FBQ08sU0FBU0EsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0I7QUFDckMsU0FBTyx3QkFBSyx1QkFBTCxFQUE2QkEsTUFBN0IsRUFBb0MsQ0FBQyxVQUFELENBQXBDLENBQVA7QUFDQTtBQUNEO0FBQ08sU0FBU0MsS0FBVCxDQUFlRCxNQUFmLEVBQXVCO0FBQzdCLFNBQU8sd0JBQUsscUJBQUwsRUFBMkJBLE1BQTNCLEVBQWtDLENBQUMsVUFBRCxDQUFsQyxDQUFQO0FBQ0EiLCJmaWxlIjoiMjg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHRVQsUE9TVH0gZnJvbSAnLi9tYWluLmVudHJhbmNlLmpzJ1xyXG5cclxuLyrojrflj5Z1cmwqL1xyXG5leHBvcnQgZnVuY3Rpb24gR2V0V2ViVmlld1VybChwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9vdGhlci9HZXRJbmZvJyxwYXJhbXMsWydhcHBUb2tlbiddKVxyXG59XHJcbi8q5YWz5LqO5oiR5LusKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEFib3V0KHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL290aGVyL0Fib3V0JyxwYXJhbXMsWydhcHBUb2tlbiddKVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///287\n");

/***/ }),

/***/ 29:
/*!*******************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/events.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var ReflectOwnKeys,R = \"object\" == typeof Reflect ? Reflect : null,ReflectApply = R && \"function\" == typeof R.apply ? R.apply : function (e, t, n) {return Function.prototype.apply.call(e, t, n);};function ProcessEmitWarning(e) {console && console.warn && console.warn(__f__(e, \" at lib\\\\polyv\\\\common\\\\chat\\\\events.js:1\"));}ReflectOwnKeys = R && \"function\" == typeof R.ownKeys ? R.ownKeys : Object.getOwnPropertySymbols ? function (e) {return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));} : function (e) {return Object.getOwnPropertyNames(e);};var NumberIsNaN = Number.isNaN || function (e) {return e != e;};function EventEmitter() {EventEmitter.init.call(this);}module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._eventsCount = 0, EventEmitter.prototype._maxListeners = void 0;var defaultMaxListeners = 10;function $getMaxListeners(e) {return void 0 === e._maxListeners ? EventEmitter.defaultMaxListeners : e._maxListeners;}function _addListener(e, t, n, r) {var i, o, s;if (\"function\" != typeof n) throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof n);if (void 0 === (o = e._events) ? (o = e._events = Object.create(null), e._eventsCount = 0) : (void 0 !== o.newListener && (e.emit(\"newListener\", t, n.listener ? n.listener : n), o = e._events), s = o[t]), void 0 === s) s = o[t] = n, ++e._eventsCount;else if (\"function\" == typeof s ? s = o[t] = r ? [n, s] : [s, n] : r ? s.unshift(n) : s.push(n), (i = $getMaxListeners(e)) > 0 && s.length > i && !s.warned) {s.warned = !0;var u = new Error(\"Possible EventEmitter memory leak detected. \" + s.length + \" \" + String(t) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");u.name = \"MaxListenersExceededWarning\", u.emitter = e, u.type = t, u.count = s.length, ProcessEmitWarning(u);}return e;}function onceWrapper() {for (var e = [], t = 0; t < arguments.length; t++) {e.push(arguments[t]);}this.fired || (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, ReflectApply(this.listener, this.target, e));}function _onceWrap(e, t, n) {var r = { fired: !1, wrapFn: void 0, target: e, type: t, listener: n },i = onceWrapper.bind(r);return i.listener = n, r.wrapFn = i, i;}function _listeners(e, t, n) {var r = e._events;if (void 0 === r) return [];var i = r[t];return void 0 === i ? [] : \"function\" == typeof i ? n ? [i.listener || i] : [i] : n ? unwrapListeners(i) : arrayClone(i, i.length);}function listenerCount(e) {var t = this._events;if (void 0 !== t) {var n = t[e];if (\"function\" == typeof n) return 1;if (void 0 !== n) return n.length;}return 0;}function arrayClone(e, t) {for (var n = new Array(t), r = 0; r < t; ++r) {n[r] = e[r];}return n;}function spliceOne(e, t) {for (; t + 1 < e.length; t++) {e[t] = e[t + 1];}e.pop();}function unwrapListeners(e) {for (var t = new Array(e.length), n = 0; n < t.length; ++n) {t[n] = e[n].listener || e[n];}return t;}Object.defineProperty(EventEmitter, \"defaultMaxListeners\", { enumerable: !0, get: function get() {return defaultMaxListeners;}, set: function set(e) {if (\"number\" != typeof e || e < 0 || NumberIsNaN(e)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + e + \".\");defaultMaxListeners = e;} }), EventEmitter.init = function () {void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;}, EventEmitter.prototype.setMaxListeners = function (e) {if (\"number\" != typeof e || e < 0 || NumberIsNaN(e)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + e + \".\");return this._maxListeners = e, this;}, EventEmitter.prototype.getMaxListeners = function () {return $getMaxListeners(this);}, EventEmitter.prototype.emit = function (e) {for (var t = [], n = 1; n < arguments.length; n++) {t.push(arguments[n]);}var r = \"error\" === e,i = this._events;if (void 0 !== i) r = r && void 0 === i.error;else if (!r) return !1;if (r) {var o;if (t.length > 0 && (o = t[0]), o instanceof Error) throw o;var s = new Error(\"Unhandled error.\" + (o ? \" (\" + o.message + \")\" : \"\"));throw s.context = o, s;}var u = i[e];if (void 0 === u) return !1;if (\"function\" == typeof u) ReflectApply(u, this, t);else {var f = u.length,v = arrayClone(u, f);for (n = 0; n < f; ++n) {ReflectApply(v[n], this, t);}}return !0;}, EventEmitter.prototype.addListener = function (e, t) {return _addListener(this, e, t, !1);}, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.prependListener = function (e, t) {return _addListener(this, e, t, !0);}, EventEmitter.prototype.once = function (e, t) {if (\"function\" != typeof t) throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof t);return this.on(e, _onceWrap(this, e, t)), this;}, EventEmitter.prototype.prependOnceListener = function (e, t) {if (\"function\" != typeof t) throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof t);return this.prependListener(e, _onceWrap(this, e, t)), this;}, EventEmitter.prototype.removeListener = function (e, t) {var n, r, i, o, s;if (\"function\" != typeof t) throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof t);if (void 0 === (r = this._events)) return this;if (void 0 === (n = r[e])) return this;if (n === t || n.listener === t) 0 == --this._eventsCount ? this._events = Object.create(null) : (delete r[e], r.removeListener && this.emit(\"removeListener\", e, n.listener || t));else if (\"function\" != typeof n) {for (i = -1, o = n.length - 1; o >= 0; o--) {if (n[o] === t || n[o].listener === t) {s = n[o].listener, i = o;break;}}if (i < 0) return this;0 === i ? n.shift() : spliceOne(n, i), 1 === n.length && (r[e] = n[0]), void 0 !== r.removeListener && this.emit(\"removeListener\", e, s || t);}return this;}, EventEmitter.prototype.off = EventEmitter.prototype.removeListener, EventEmitter.prototype.removeAllListeners = function (e) {var t, n, r;if (void 0 === (n = this._events)) return this;if (void 0 === n.removeListener) return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== n[e] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete n[e]), this;if (0 === arguments.length) {var i,o = Object.keys(n);for (r = 0; r < o.length; ++r) {\"removeListener\" !== (i = o[r]) && this.removeAllListeners(i);}return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;}if (\"function\" == typeof (t = n[e])) this.removeListener(e, t);else if (void 0 !== t) for (r = t.length - 1; r >= 0; r--) {this.removeListener(e, t[r]);}return this;}, EventEmitter.prototype.listeners = function (e) {return _listeners(this, e, !0);}, EventEmitter.prototype.rawListeners = function (e) {return _listeners(this, e, !1);}, EventEmitter.listenerCount = function (e, t) {return \"function\" == typeof e.listenerCount ? e.listenerCount(t) : listenerCount.call(e, t);}, EventEmitter.prototype.listenerCount = listenerCount, EventEmitter.prototype.eventNames = function () {return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9jaGF0L2V2ZW50cy5qcyJdLCJuYW1lcyI6WyJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJlIiwidCIsIm4iLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJQcm9jZXNzRW1pdFdhcm5pbmciLCJjb25zb2xlIiwid2FybiIsIm93bktleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiJGdldE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsInIiLCJpIiwibyIsInMiLCJUeXBlRXJyb3IiLCJjcmVhdGUiLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJsaXN0ZW5lciIsInVuc2hpZnQiLCJwdXNoIiwibGVuZ3RoIiwid2FybmVkIiwidSIsIkVycm9yIiwiU3RyaW5nIiwibmFtZSIsImVtaXR0ZXIiLCJ0eXBlIiwiY291bnQiLCJvbmNlV3JhcHBlciIsImFyZ3VtZW50cyIsImZpcmVkIiwidGFyZ2V0IiwicmVtb3ZlTGlzdGVuZXIiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJiaW5kIiwiX2xpc3RlbmVycyIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiQXJyYXkiLCJzcGxpY2VPbmUiLCJwb3AiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJSYW5nZUVycm9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiZiIsInYiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwib25jZSIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJzaGlmdCIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleXMiLCJsaXN0ZW5lcnMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIl0sIm1hcHBpbmdzIjoiQUFBQSw2Q0FBYSxJQUFJQSxjQUFKLENBQW1CQyxDQUFDLEdBQUMsWUFBVSxPQUFPQyxPQUFqQixHQUF5QkEsT0FBekIsR0FBaUMsSUFBdEQsQ0FBMkRDLFlBQVksR0FBQ0YsQ0FBQyxJQUFFLGNBQVksT0FBT0EsQ0FBQyxDQUFDRyxLQUF4QixHQUE4QkgsQ0FBQyxDQUFDRyxLQUFoQyxHQUFzQyxVQUFTQyxDQUFULEVBQVdDLENBQVgsRUFBYUMsQ0FBYixFQUFlLENBQUMsT0FBT0MsUUFBUSxDQUFDQyxTQUFULENBQW1CTCxLQUFuQixDQUF5Qk0sSUFBekIsQ0FBOEJMLENBQTlCLEVBQWdDQyxDQUFoQyxFQUFrQ0MsQ0FBbEMsQ0FBUCxDQUE0QyxDQUExSyxDQUEySyxTQUFTSSxrQkFBVCxDQUE0Qk4sQ0FBNUIsRUFBOEIsQ0FBQ08sT0FBTyxJQUFFQSxPQUFPLENBQUNDLElBQWpCLElBQXVCRCxPQUFPLENBQUNDLElBQVIsT0FBYVIsQ0FBYiwrQ0FBdkIsQ0FBdUMsQ0FBQUwsY0FBYyxHQUFDQyxDQUFDLElBQUUsY0FBWSxPQUFPQSxDQUFDLENBQUNhLE9BQXhCLEdBQWdDYixDQUFDLENBQUNhLE9BQWxDLEdBQTBDQyxNQUFNLENBQUNDLHFCQUFQLEdBQTZCLFVBQVNYLENBQVQsRUFBVyxDQUFDLE9BQU9VLE1BQU0sQ0FBQ0UsbUJBQVAsQ0FBMkJaLENBQTNCLEVBQThCYSxNQUE5QixDQUFxQ0gsTUFBTSxDQUFDQyxxQkFBUCxDQUE2QlgsQ0FBN0IsQ0FBckMsQ0FBUCxDQUE2RSxDQUF0SCxHQUF1SCxVQUFTQSxDQUFULEVBQVcsQ0FBQyxPQUFPVSxNQUFNLENBQUNFLG1CQUFQLENBQTJCWixDQUEzQixDQUFQLENBQXFDLENBQWpPLENBQWtPLElBQUljLFdBQVcsR0FBQ0MsTUFBTSxDQUFDQyxLQUFQLElBQWMsVUFBU2hCLENBQVQsRUFBVyxDQUFDLE9BQU9BLENBQUMsSUFBRUEsQ0FBVixDQUFZLENBQXRELENBQXVELFNBQVNpQixZQUFULEdBQXVCLENBQUNBLFlBQVksQ0FBQ0MsSUFBYixDQUFrQmIsSUFBbEIsQ0FBdUIsSUFBdkIsRUFBNkIsQ0FBQWMsTUFBTSxDQUFDQyxPQUFQLEdBQWVILFlBQWYsRUFBNEJBLFlBQVksQ0FBQ0EsWUFBYixHQUEwQkEsWUFBdEQsRUFBbUVBLFlBQVksQ0FBQ2IsU0FBYixDQUF1QmlCLE9BQXZCLEdBQStCLEtBQUssQ0FBdkcsRUFBeUdKLFlBQVksQ0FBQ2IsU0FBYixDQUF1QmtCLFlBQXZCLEdBQW9DLENBQTdJLEVBQStJTCxZQUFZLENBQUNiLFNBQWIsQ0FBdUJtQixhQUF2QixHQUFxQyxLQUFLLENBQXpMLENBQTJMLElBQUlDLG1CQUFtQixHQUFDLEVBQXhCLENBQTJCLFNBQVNDLGdCQUFULENBQTBCekIsQ0FBMUIsRUFBNEIsQ0FBQyxPQUFPLEtBQUssQ0FBTCxLQUFTQSxDQUFDLENBQUN1QixhQUFYLEdBQXlCTixZQUFZLENBQUNPLG1CQUF0QyxHQUEwRHhCLENBQUMsQ0FBQ3VCLGFBQW5FLENBQWlGLFVBQVNHLFlBQVQsQ0FBc0IxQixDQUF0QixFQUF3QkMsQ0FBeEIsRUFBMEJDLENBQTFCLEVBQTRCeUIsQ0FBNUIsRUFBOEIsQ0FBQyxJQUFJQyxDQUFKLEVBQU1DLENBQU4sRUFBUUMsQ0FBUixDQUFVLElBQUcsY0FBWSxPQUFPNUIsQ0FBdEIsRUFBd0IsTUFBTSxJQUFJNkIsU0FBSixDQUFjLHFFQUFtRSxPQUFPN0IsQ0FBeEYsQ0FBTixDQUFpRyxJQUFHLEtBQUssQ0FBTCxNQUFVMkIsQ0FBQyxHQUFDN0IsQ0FBQyxDQUFDcUIsT0FBZCxLQUF3QlEsQ0FBQyxHQUFDN0IsQ0FBQyxDQUFDcUIsT0FBRixHQUFVWCxNQUFNLENBQUNzQixNQUFQLENBQWMsSUFBZCxDQUFaLEVBQWdDaEMsQ0FBQyxDQUFDc0IsWUFBRixHQUFlLENBQXZFLEtBQTJFLEtBQUssQ0FBTCxLQUFTTyxDQUFDLENBQUNJLFdBQVgsS0FBeUJqQyxDQUFDLENBQUNrQyxJQUFGLENBQU8sYUFBUCxFQUFxQmpDLENBQXJCLEVBQXVCQyxDQUFDLENBQUNpQyxRQUFGLEdBQVdqQyxDQUFDLENBQUNpQyxRQUFiLEdBQXNCakMsQ0FBN0MsR0FBZ0QyQixDQUFDLEdBQUM3QixDQUFDLENBQUNxQixPQUE3RSxHQUFzRlMsQ0FBQyxHQUFDRCxDQUFDLENBQUM1QixDQUFELENBQXBLLEdBQXlLLEtBQUssQ0FBTCxLQUFTNkIsQ0FBckwsRUFBdUxBLENBQUMsR0FBQ0QsQ0FBQyxDQUFDNUIsQ0FBRCxDQUFELEdBQUtDLENBQVAsRUFBUyxFQUFFRixDQUFDLENBQUNzQixZQUFiLENBQXZMLEtBQXNOLElBQUcsY0FBWSxPQUFPUSxDQUFuQixHQUFxQkEsQ0FBQyxHQUFDRCxDQUFDLENBQUM1QixDQUFELENBQUQsR0FBSzBCLENBQUMsR0FBQyxDQUFDekIsQ0FBRCxFQUFHNEIsQ0FBSCxDQUFELEdBQU8sQ0FBQ0EsQ0FBRCxFQUFHNUIsQ0FBSCxDQUFwQyxHQUEwQ3lCLENBQUMsR0FBQ0csQ0FBQyxDQUFDTSxPQUFGLENBQVVsQyxDQUFWLENBQUQsR0FBYzRCLENBQUMsQ0FBQ08sSUFBRixDQUFPbkMsQ0FBUCxDQUF6RCxFQUFtRSxDQUFDMEIsQ0FBQyxHQUFDSCxnQkFBZ0IsQ0FBQ3pCLENBQUQsQ0FBbkIsSUFBd0IsQ0FBeEIsSUFBMkI4QixDQUFDLENBQUNRLE1BQUYsR0FBU1YsQ0FBcEMsSUFBdUMsQ0FBQ0UsQ0FBQyxDQUFDUyxNQUFoSCxFQUF1SCxDQUFDVCxDQUFDLENBQUNTLE1BQUYsR0FBUyxDQUFDLENBQVYsQ0FBWSxJQUFJQyxDQUFDLEdBQUMsSUFBSUMsS0FBSixDQUFVLGlEQUErQ1gsQ0FBQyxDQUFDUSxNQUFqRCxHQUF3RCxHQUF4RCxHQUE0REksTUFBTSxDQUFDekMsQ0FBRCxDQUFsRSxHQUFzRSxtRUFBaEYsQ0FBTixDQUEySnVDLENBQUMsQ0FBQ0csSUFBRixHQUFPLDZCQUFQLEVBQXFDSCxDQUFDLENBQUNJLE9BQUYsR0FBVTVDLENBQS9DLEVBQWlEd0MsQ0FBQyxDQUFDSyxJQUFGLEdBQU81QyxDQUF4RCxFQUEwRHVDLENBQUMsQ0FBQ00sS0FBRixHQUFRaEIsQ0FBQyxDQUFDUSxNQUFwRSxFQUEyRWhDLGtCQUFrQixDQUFDa0MsQ0FBRCxDQUE3RixDQUFpRyxRQUFPeEMsQ0FBUCxDQUFTLFVBQVMrQyxXQUFULEdBQXNCLENBQUMsS0FBSSxJQUFJL0MsQ0FBQyxHQUFDLEVBQU4sRUFBU0MsQ0FBQyxHQUFDLENBQWYsRUFBaUJBLENBQUMsR0FBQytDLFNBQVMsQ0FBQ1YsTUFBN0IsRUFBb0NyQyxDQUFDLEVBQXJDLEdBQXdDRCxDQUFDLENBQUNxQyxJQUFGLENBQU9XLFNBQVMsQ0FBQy9DLENBQUQsQ0FBaEIsRUFBeEMsQ0FBNkQsS0FBS2dELEtBQUwsS0FBYSxLQUFLQyxNQUFMLENBQVlDLGNBQVosQ0FBMkIsS0FBS04sSUFBaEMsRUFBcUMsS0FBS08sTUFBMUMsR0FBa0QsS0FBS0gsS0FBTCxHQUFXLENBQUMsQ0FBOUQsRUFBZ0VuRCxZQUFZLENBQUMsS0FBS3FDLFFBQU4sRUFBZSxLQUFLZSxNQUFwQixFQUEyQmxELENBQTNCLENBQXpGLEVBQXdILFVBQVNxRCxTQUFULENBQW1CckQsQ0FBbkIsRUFBcUJDLENBQXJCLEVBQXVCQyxDQUF2QixFQUF5QixDQUFDLElBQUl5QixDQUFDLEdBQUMsRUFBQ3NCLEtBQUssRUFBQyxDQUFDLENBQVIsRUFBVUcsTUFBTSxFQUFDLEtBQUssQ0FBdEIsRUFBd0JGLE1BQU0sRUFBQ2xELENBQS9CLEVBQWlDNkMsSUFBSSxFQUFDNUMsQ0FBdEMsRUFBd0NrQyxRQUFRLEVBQUNqQyxDQUFqRCxFQUFOLENBQTBEMEIsQ0FBQyxHQUFDbUIsV0FBVyxDQUFDTyxJQUFaLENBQWlCM0IsQ0FBakIsQ0FBNUQsQ0FBZ0YsT0FBT0MsQ0FBQyxDQUFDTyxRQUFGLEdBQVdqQyxDQUFYLEVBQWF5QixDQUFDLENBQUN5QixNQUFGLEdBQVN4QixDQUF0QixFQUF3QkEsQ0FBL0IsQ0FBaUMsVUFBUzJCLFVBQVQsQ0FBb0J2RCxDQUFwQixFQUFzQkMsQ0FBdEIsRUFBd0JDLENBQXhCLEVBQTBCLENBQUMsSUFBSXlCLENBQUMsR0FBQzNCLENBQUMsQ0FBQ3FCLE9BQVIsQ0FBZ0IsSUFBRyxLQUFLLENBQUwsS0FBU00sQ0FBWixFQUFjLE9BQU0sRUFBTixDQUFTLElBQUlDLENBQUMsR0FBQ0QsQ0FBQyxDQUFDMUIsQ0FBRCxDQUFQLENBQVcsT0FBTyxLQUFLLENBQUwsS0FBUzJCLENBQVQsR0FBVyxFQUFYLEdBQWMsY0FBWSxPQUFPQSxDQUFuQixHQUFxQjFCLENBQUMsR0FBQyxDQUFDMEIsQ0FBQyxDQUFDTyxRQUFGLElBQVlQLENBQWIsQ0FBRCxHQUFpQixDQUFDQSxDQUFELENBQXZDLEdBQTJDMUIsQ0FBQyxHQUFDc0QsZUFBZSxDQUFDNUIsQ0FBRCxDQUFoQixHQUFvQjZCLFVBQVUsQ0FBQzdCLENBQUQsRUFBR0EsQ0FBQyxDQUFDVSxNQUFMLENBQS9GLENBQTRHLFVBQVNvQixhQUFULENBQXVCMUQsQ0FBdkIsRUFBeUIsQ0FBQyxJQUFJQyxDQUFDLEdBQUMsS0FBS29CLE9BQVgsQ0FBbUIsSUFBRyxLQUFLLENBQUwsS0FBU3BCLENBQVosRUFBYyxDQUFDLElBQUlDLENBQUMsR0FBQ0QsQ0FBQyxDQUFDRCxDQUFELENBQVAsQ0FBVyxJQUFHLGNBQVksT0FBT0UsQ0FBdEIsRUFBd0IsT0FBTyxDQUFQLENBQVMsSUFBRyxLQUFLLENBQUwsS0FBU0EsQ0FBWixFQUFjLE9BQU9BLENBQUMsQ0FBQ29DLE1BQVQsQ0FBZ0IsUUFBTyxDQUFQLENBQVMsVUFBU21CLFVBQVQsQ0FBb0J6RCxDQUFwQixFQUFzQkMsQ0FBdEIsRUFBd0IsQ0FBQyxLQUFJLElBQUlDLENBQUMsR0FBQyxJQUFJeUQsS0FBSixDQUFVMUQsQ0FBVixDQUFOLEVBQW1CMEIsQ0FBQyxHQUFDLENBQXpCLEVBQTJCQSxDQUFDLEdBQUMxQixDQUE3QixFQUErQixFQUFFMEIsQ0FBakMsR0FBbUN6QixDQUFDLENBQUN5QixDQUFELENBQUQsR0FBSzNCLENBQUMsQ0FBQzJCLENBQUQsQ0FBTixDQUFuQyxDQUE2QyxPQUFPekIsQ0FBUCxDQUFTLFVBQVMwRCxTQUFULENBQW1CNUQsQ0FBbkIsRUFBcUJDLENBQXJCLEVBQXVCLENBQUMsT0FBS0EsQ0FBQyxHQUFDLENBQUYsR0FBSUQsQ0FBQyxDQUFDc0MsTUFBWCxFQUFrQnJDLENBQUMsRUFBbkIsR0FBc0JELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQUtELENBQUMsQ0FBQ0MsQ0FBQyxHQUFDLENBQUgsQ0FBTixDQUF0QixDQUFrQ0QsQ0FBQyxDQUFDNkQsR0FBRixHQUFRLFVBQVNMLGVBQVQsQ0FBeUJ4RCxDQUF6QixFQUEyQixDQUFDLEtBQUksSUFBSUMsQ0FBQyxHQUFDLElBQUkwRCxLQUFKLENBQVUzRCxDQUFDLENBQUNzQyxNQUFaLENBQU4sRUFBMEJwQyxDQUFDLEdBQUMsQ0FBaEMsRUFBa0NBLENBQUMsR0FBQ0QsQ0FBQyxDQUFDcUMsTUFBdEMsRUFBNkMsRUFBRXBDLENBQS9DLEdBQWlERCxDQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFLRixDQUFDLENBQUNFLENBQUQsQ0FBRCxDQUFLaUMsUUFBTCxJQUFlbkMsQ0FBQyxDQUFDRSxDQUFELENBQXJCLENBQWpELENBQTBFLE9BQU9ELENBQVAsQ0FBUyxDQUFBUyxNQUFNLENBQUNvRCxjQUFQLENBQXNCN0MsWUFBdEIsRUFBbUMscUJBQW5DLEVBQXlELEVBQUM4QyxVQUFVLEVBQUMsQ0FBQyxDQUFiLEVBQWVDLEdBQUcsRUFBQyxlQUFVLENBQUMsT0FBT3hDLG1CQUFQLENBQTJCLENBQXpELEVBQTBEeUMsR0FBRyxFQUFDLGFBQVNqRSxDQUFULEVBQVcsQ0FBQyxJQUFHLFlBQVUsT0FBT0EsQ0FBakIsSUFBb0JBLENBQUMsR0FBQyxDQUF0QixJQUF5QmMsV0FBVyxDQUFDZCxDQUFELENBQXZDLEVBQTJDLE1BQU0sSUFBSWtFLFVBQUosQ0FBZSxvR0FBa0dsRSxDQUFsRyxHQUFvRyxHQUFuSCxDQUFOLENBQThId0IsbUJBQW1CLEdBQUN4QixDQUFwQixDQUFzQixDQUF6USxFQUF6RCxHQUFxVWlCLFlBQVksQ0FBQ0MsSUFBYixHQUFrQixZQUFVLENBQUMsS0FBSyxDQUFMLEtBQVMsS0FBS0csT0FBZCxJQUF1QixLQUFLQSxPQUFMLEtBQWVYLE1BQU0sQ0FBQ3lELGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEI5QyxPQUFsRSxLQUE0RSxLQUFLQSxPQUFMLEdBQWFYLE1BQU0sQ0FBQ3NCLE1BQVAsQ0FBYyxJQUFkLENBQWIsRUFBaUMsS0FBS1YsWUFBTCxHQUFrQixDQUEvSCxHQUFrSSxLQUFLQyxhQUFMLEdBQW1CLEtBQUtBLGFBQUwsSUFBb0IsS0FBSyxDQUE5SyxDQUFnTCxDQUFsaEIsRUFBbWhCTixZQUFZLENBQUNiLFNBQWIsQ0FBdUJnRSxlQUF2QixHQUF1QyxVQUFTcEUsQ0FBVCxFQUFXLENBQUMsSUFBRyxZQUFVLE9BQU9BLENBQWpCLElBQW9CQSxDQUFDLEdBQUMsQ0FBdEIsSUFBeUJjLFdBQVcsQ0FBQ2QsQ0FBRCxDQUF2QyxFQUEyQyxNQUFNLElBQUlrRSxVQUFKLENBQWUsa0ZBQWdGbEUsQ0FBaEYsR0FBa0YsR0FBakcsQ0FBTixDQUE0RyxPQUFPLEtBQUt1QixhQUFMLEdBQW1CdkIsQ0FBbkIsRUFBcUIsSUFBNUIsQ0FBaUMsQ0FBOXZCLEVBQSt2QmlCLFlBQVksQ0FBQ2IsU0FBYixDQUF1QmlFLGVBQXZCLEdBQXVDLFlBQVUsQ0FBQyxPQUFPNUMsZ0JBQWdCLENBQUMsSUFBRCxDQUF2QixDQUE4QixDQUEvMEIsRUFBZzFCUixZQUFZLENBQUNiLFNBQWIsQ0FBdUI4QixJQUF2QixHQUE0QixVQUFTbEMsQ0FBVCxFQUFXLENBQUMsS0FBSSxJQUFJQyxDQUFDLEdBQUMsRUFBTixFQUFTQyxDQUFDLEdBQUMsQ0FBZixFQUFpQkEsQ0FBQyxHQUFDOEMsU0FBUyxDQUFDVixNQUE3QixFQUFvQ3BDLENBQUMsRUFBckMsR0FBd0NELENBQUMsQ0FBQ29DLElBQUYsQ0FBT1csU0FBUyxDQUFDOUMsQ0FBRCxDQUFoQixFQUF4QyxDQUE2RCxJQUFJeUIsQ0FBQyxHQUFDLFlBQVUzQixDQUFoQixDQUFrQjRCLENBQUMsR0FBQyxLQUFLUCxPQUF6QixDQUFpQyxJQUFHLEtBQUssQ0FBTCxLQUFTTyxDQUFaLEVBQWNELENBQUMsR0FBQ0EsQ0FBQyxJQUFFLEtBQUssQ0FBTCxLQUFTQyxDQUFDLENBQUMwQyxLQUFoQixDQUFkLEtBQXlDLElBQUcsQ0FBQzNDLENBQUosRUFBTSxPQUFNLENBQUMsQ0FBUCxDQUFTLElBQUdBLENBQUgsRUFBSyxDQUFDLElBQUlFLENBQUosQ0FBTSxJQUFHNUIsQ0FBQyxDQUFDcUMsTUFBRixHQUFTLENBQVQsS0FBYVQsQ0FBQyxHQUFDNUIsQ0FBQyxDQUFDLENBQUQsQ0FBaEIsR0FBcUI0QixDQUFDLFlBQVlZLEtBQXJDLEVBQTJDLE1BQU1aLENBQU4sQ0FBUSxJQUFJQyxDQUFDLEdBQUMsSUFBSVcsS0FBSixDQUFVLHNCQUFvQlosQ0FBQyxHQUFDLE9BQUtBLENBQUMsQ0FBQzBDLE9BQVAsR0FBZSxHQUFoQixHQUFvQixFQUF6QyxDQUFWLENBQU4sQ0FBOEQsTUFBTXpDLENBQUMsQ0FBQzBDLE9BQUYsR0FBVTNDLENBQVYsRUFBWUMsQ0FBbEIsQ0FBb0IsS0FBSVUsQ0FBQyxHQUFDWixDQUFDLENBQUM1QixDQUFELENBQVAsQ0FBVyxJQUFHLEtBQUssQ0FBTCxLQUFTd0MsQ0FBWixFQUFjLE9BQU0sQ0FBQyxDQUFQLENBQVMsSUFBRyxjQUFZLE9BQU9BLENBQXRCLEVBQXdCMUMsWUFBWSxDQUFDMEMsQ0FBRCxFQUFHLElBQUgsRUFBUXZDLENBQVIsQ0FBWixDQUF4QixLQUFtRCxDQUFDLElBQUl3RSxDQUFDLEdBQUNqQyxDQUFDLENBQUNGLE1BQVIsQ0FBZW9DLENBQUMsR0FBQ2pCLFVBQVUsQ0FBQ2pCLENBQUQsRUFBR2lDLENBQUgsQ0FBM0IsQ0FBaUMsS0FBSXZFLENBQUMsR0FBQyxDQUFOLEVBQVFBLENBQUMsR0FBQ3VFLENBQVYsRUFBWSxFQUFFdkUsQ0FBZCxHQUFnQkosWUFBWSxDQUFDNEUsQ0FBQyxDQUFDeEUsQ0FBRCxDQUFGLEVBQU0sSUFBTixFQUFXRCxDQUFYLENBQVosQ0FBaEIsQ0FBMEMsUUFBTSxDQUFDLENBQVAsQ0FBUyxDQUF6MEMsRUFBMDBDZ0IsWUFBWSxDQUFDYixTQUFiLENBQXVCdUUsV0FBdkIsR0FBbUMsVUFBUzNFLENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUMsT0FBT3lCLFlBQVksQ0FBQyxJQUFELEVBQU0xQixDQUFOLEVBQVFDLENBQVIsRUFBVSxDQUFDLENBQVgsQ0FBbkIsQ0FBaUMsQ0FBNTVDLEVBQTY1Q2dCLFlBQVksQ0FBQ2IsU0FBYixDQUF1QndFLEVBQXZCLEdBQTBCM0QsWUFBWSxDQUFDYixTQUFiLENBQXVCdUUsV0FBOThDLEVBQTA5QzFELFlBQVksQ0FBQ2IsU0FBYixDQUF1QnlFLGVBQXZCLEdBQXVDLFVBQVM3RSxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFDLE9BQU95QixZQUFZLENBQUMsSUFBRCxFQUFNMUIsQ0FBTixFQUFRQyxDQUFSLEVBQVUsQ0FBQyxDQUFYLENBQW5CLENBQWlDLENBQWhqRCxFQUFpakRnQixZQUFZLENBQUNiLFNBQWIsQ0FBdUIwRSxJQUF2QixHQUE0QixVQUFTOUUsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBQyxJQUFHLGNBQVksT0FBT0EsQ0FBdEIsRUFBd0IsTUFBTSxJQUFJOEIsU0FBSixDQUFjLHFFQUFtRSxPQUFPOUIsQ0FBeEYsQ0FBTixDQUFpRyxPQUFPLEtBQUsyRSxFQUFMLENBQVE1RSxDQUFSLEVBQVVxRCxTQUFTLENBQUMsSUFBRCxFQUFNckQsQ0FBTixFQUFRQyxDQUFSLENBQW5CLEdBQStCLElBQXRDLENBQTJDLENBQS92RCxFQUFnd0RnQixZQUFZLENBQUNiLFNBQWIsQ0FBdUIyRSxtQkFBdkIsR0FBMkMsVUFBUy9FLENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUMsSUFBRyxjQUFZLE9BQU9BLENBQXRCLEVBQXdCLE1BQU0sSUFBSThCLFNBQUosQ0FBYyxxRUFBbUUsT0FBTzlCLENBQXhGLENBQU4sQ0FBaUcsT0FBTyxLQUFLNEUsZUFBTCxDQUFxQjdFLENBQXJCLEVBQXVCcUQsU0FBUyxDQUFDLElBQUQsRUFBTXJELENBQU4sRUFBUUMsQ0FBUixDQUFoQyxHQUE0QyxJQUFuRCxDQUF3RCxDQUExK0QsRUFBMitEZ0IsWUFBWSxDQUFDYixTQUFiLENBQXVCK0MsY0FBdkIsR0FBc0MsVUFBU25ELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUMsSUFBSUMsQ0FBSixFQUFNeUIsQ0FBTixFQUFRQyxDQUFSLEVBQVVDLENBQVYsRUFBWUMsQ0FBWixDQUFjLElBQUcsY0FBWSxPQUFPN0IsQ0FBdEIsRUFBd0IsTUFBTSxJQUFJOEIsU0FBSixDQUFjLHFFQUFtRSxPQUFPOUIsQ0FBeEYsQ0FBTixDQUFpRyxJQUFHLEtBQUssQ0FBTCxNQUFVMEIsQ0FBQyxHQUFDLEtBQUtOLE9BQWpCLENBQUgsRUFBNkIsT0FBTyxJQUFQLENBQVksSUFBRyxLQUFLLENBQUwsTUFBVW5CLENBQUMsR0FBQ3lCLENBQUMsQ0FBQzNCLENBQUQsQ0FBYixDQUFILEVBQXFCLE9BQU8sSUFBUCxDQUFZLElBQUdFLENBQUMsS0FBR0QsQ0FBSixJQUFPQyxDQUFDLENBQUNpQyxRQUFGLEtBQWFsQyxDQUF2QixFQUF5QixLQUFHLEVBQUUsS0FBS3FCLFlBQVYsR0FBdUIsS0FBS0QsT0FBTCxHQUFhWCxNQUFNLENBQUNzQixNQUFQLENBQWMsSUFBZCxDQUFwQyxJQUF5RCxPQUFPTCxDQUFDLENBQUMzQixDQUFELENBQVIsRUFBWTJCLENBQUMsQ0FBQ3dCLGNBQUYsSUFBa0IsS0FBS2pCLElBQUwsQ0FBVSxnQkFBVixFQUEyQmxDLENBQTNCLEVBQTZCRSxDQUFDLENBQUNpQyxRQUFGLElBQVlsQyxDQUF6QyxDQUF2RixFQUF6QixLQUFrSyxJQUFHLGNBQVksT0FBT0MsQ0FBdEIsRUFBd0IsQ0FBQyxLQUFJMEIsQ0FBQyxHQUFDLENBQUMsQ0FBSCxFQUFLQyxDQUFDLEdBQUMzQixDQUFDLENBQUNvQyxNQUFGLEdBQVMsQ0FBcEIsRUFBc0JULENBQUMsSUFBRSxDQUF6QixFQUEyQkEsQ0FBQyxFQUE1QixHQUErQixJQUFHM0IsQ0FBQyxDQUFDMkIsQ0FBRCxDQUFELEtBQU81QixDQUFQLElBQVVDLENBQUMsQ0FBQzJCLENBQUQsQ0FBRCxDQUFLTSxRQUFMLEtBQWdCbEMsQ0FBN0IsRUFBK0IsQ0FBQzZCLENBQUMsR0FBQzVCLENBQUMsQ0FBQzJCLENBQUQsQ0FBRCxDQUFLTSxRQUFQLEVBQWdCUCxDQUFDLEdBQUNDLENBQWxCLENBQW9CLE1BQU0sQ0FBekYsQ0FBeUYsSUFBR0QsQ0FBQyxHQUFDLENBQUwsRUFBTyxPQUFPLElBQVAsQ0FBWSxNQUFJQSxDQUFKLEdBQU0xQixDQUFDLENBQUM4RSxLQUFGLEVBQU4sR0FBZ0JwQixTQUFTLENBQUMxRCxDQUFELEVBQUcwQixDQUFILENBQXpCLEVBQStCLE1BQUkxQixDQUFDLENBQUNvQyxNQUFOLEtBQWVYLENBQUMsQ0FBQzNCLENBQUQsQ0FBRCxHQUFLRSxDQUFDLENBQUMsQ0FBRCxDQUFyQixDQUEvQixFQUF5RCxLQUFLLENBQUwsS0FBU3lCLENBQUMsQ0FBQ3dCLGNBQVgsSUFBMkIsS0FBS2pCLElBQUwsQ0FBVSxnQkFBVixFQUEyQmxDLENBQTNCLEVBQTZCOEIsQ0FBQyxJQUFFN0IsQ0FBaEMsQ0FBcEYsQ0FBdUgsUUFBTyxJQUFQLENBQVksQ0FBMXBGLEVBQTJwRmdCLFlBQVksQ0FBQ2IsU0FBYixDQUF1QjZFLEdBQXZCLEdBQTJCaEUsWUFBWSxDQUFDYixTQUFiLENBQXVCK0MsY0FBN3NGLEVBQTR0RmxDLFlBQVksQ0FBQ2IsU0FBYixDQUF1QjhFLGtCQUF2QixHQUEwQyxVQUFTbEYsQ0FBVCxFQUFXLENBQUMsSUFBSUMsQ0FBSixFQUFNQyxDQUFOLEVBQVF5QixDQUFSLENBQVUsSUFBRyxLQUFLLENBQUwsTUFBVXpCLENBQUMsR0FBQyxLQUFLbUIsT0FBakIsQ0FBSCxFQUE2QixPQUFPLElBQVAsQ0FBWSxJQUFHLEtBQUssQ0FBTCxLQUFTbkIsQ0FBQyxDQUFDaUQsY0FBZCxFQUE2QixPQUFPLE1BQUlILFNBQVMsQ0FBQ1YsTUFBZCxJQUFzQixLQUFLakIsT0FBTCxHQUFhWCxNQUFNLENBQUNzQixNQUFQLENBQWMsSUFBZCxDQUFiLEVBQWlDLEtBQUtWLFlBQUwsR0FBa0IsQ0FBekUsSUFBNEUsS0FBSyxDQUFMLEtBQVNwQixDQUFDLENBQUNGLENBQUQsQ0FBVixLQUFnQixLQUFHLEVBQUUsS0FBS3NCLFlBQVYsR0FBdUIsS0FBS0QsT0FBTCxHQUFhWCxNQUFNLENBQUNzQixNQUFQLENBQWMsSUFBZCxDQUFwQyxHQUF3RCxPQUFPOUIsQ0FBQyxDQUFDRixDQUFELENBQWhGLENBQTVFLEVBQWlLLElBQXhLLENBQTZLLElBQUcsTUFBSWdELFNBQVMsQ0FBQ1YsTUFBakIsRUFBd0IsQ0FBQyxJQUFJVixDQUFKLENBQU1DLENBQUMsR0FBQ25CLE1BQU0sQ0FBQ3lFLElBQVAsQ0FBWWpGLENBQVosQ0FBUixDQUF1QixLQUFJeUIsQ0FBQyxHQUFDLENBQU4sRUFBUUEsQ0FBQyxHQUFDRSxDQUFDLENBQUNTLE1BQVosRUFBbUIsRUFBRVgsQ0FBckIsR0FBdUIsc0JBQW9CQyxDQUFDLEdBQUNDLENBQUMsQ0FBQ0YsQ0FBRCxDQUF2QixLQUE2QixLQUFLdUQsa0JBQUwsQ0FBd0J0RCxDQUF4QixDQUE3QixDQUF2QixDQUErRSxPQUFPLEtBQUtzRCxrQkFBTCxDQUF3QixnQkFBeEIsR0FBMEMsS0FBSzdELE9BQUwsR0FBYVgsTUFBTSxDQUFDc0IsTUFBUCxDQUFjLElBQWQsQ0FBdkQsRUFBMkUsS0FBS1YsWUFBTCxHQUFrQixDQUE3RixFQUErRixJQUF0RyxDQUEyRyxLQUFHLGNBQVksUUFBT3JCLENBQUMsR0FBQ0MsQ0FBQyxDQUFDRixDQUFELENBQVYsQ0FBZixFQUE4QixLQUFLbUQsY0FBTCxDQUFvQm5ELENBQXBCLEVBQXNCQyxDQUF0QixFQUE5QixLQUE0RCxJQUFHLEtBQUssQ0FBTCxLQUFTQSxDQUFaLEVBQWMsS0FBSTBCLENBQUMsR0FBQzFCLENBQUMsQ0FBQ3FDLE1BQUYsR0FBUyxDQUFmLEVBQWlCWCxDQUFDLElBQUUsQ0FBcEIsRUFBc0JBLENBQUMsRUFBdkIsR0FBMEIsS0FBS3dCLGNBQUwsQ0FBb0JuRCxDQUFwQixFQUFzQkMsQ0FBQyxDQUFDMEIsQ0FBRCxDQUF2QixFQUExQixDQUFzRCxPQUFPLElBQVAsQ0FBWSxDQUFyNEcsRUFBczRHVixZQUFZLENBQUNiLFNBQWIsQ0FBdUJnRixTQUF2QixHQUFpQyxVQUFTcEYsQ0FBVCxFQUFXLENBQUMsT0FBT3VELFVBQVUsQ0FBQyxJQUFELEVBQU12RCxDQUFOLEVBQVEsQ0FBQyxDQUFULENBQWpCLENBQTZCLENBQWg5RyxFQUFpOUdpQixZQUFZLENBQUNiLFNBQWIsQ0FBdUJpRixZQUF2QixHQUFvQyxVQUFTckYsQ0FBVCxFQUFXLENBQUMsT0FBT3VELFVBQVUsQ0FBQyxJQUFELEVBQU12RCxDQUFOLEVBQVEsQ0FBQyxDQUFULENBQWpCLENBQTZCLENBQTloSCxFQUEraEhpQixZQUFZLENBQUN5QyxhQUFiLEdBQTJCLFVBQVMxRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFDLE9BQU0sY0FBWSxPQUFPRCxDQUFDLENBQUMwRCxhQUFyQixHQUFtQzFELENBQUMsQ0FBQzBELGFBQUYsQ0FBZ0J6RCxDQUFoQixDQUFuQyxHQUFzRHlELGFBQWEsQ0FBQ3JELElBQWQsQ0FBbUJMLENBQW5CLEVBQXFCQyxDQUFyQixDQUE1RCxDQUFvRixDQUE1cEgsRUFBNnBIZ0IsWUFBWSxDQUFDYixTQUFiLENBQXVCc0QsYUFBdkIsR0FBcUNBLGFBQWxzSCxFQUFndEh6QyxZQUFZLENBQUNiLFNBQWIsQ0FBdUJrRixVQUF2QixHQUFrQyxZQUFVLENBQUMsT0FBTyxLQUFLaEUsWUFBTCxHQUFrQixDQUFsQixHQUFvQjNCLGNBQWMsQ0FBQyxLQUFLMEIsT0FBTixDQUFsQyxHQUFpRCxFQUF4RCxDQUEyRCxDQUF4ekgsQyIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO3ZhciBSZWZsZWN0T3duS2V5cyxSPVwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0P1JlZmxlY3Q6bnVsbCxSZWZsZWN0QXBwbHk9UiYmXCJmdW5jdGlvblwiPT10eXBlb2YgUi5hcHBseT9SLmFwcGx5OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoZSx0LG4pfTtmdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcoZSl7Y29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oZSl9UmVmbGVjdE93bktleXM9UiYmXCJmdW5jdGlvblwiPT10eXBlb2YgUi5vd25LZXlzP1Iub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKX07dmFyIE51bWJlcklzTmFOPU51bWJlci5pc05hTnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPWV9O2Z1bmN0aW9uIEV2ZW50RW1pdHRlcigpe0V2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyl9bW9kdWxlLmV4cG9ydHM9RXZlbnRFbWl0dGVyLEV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXI9RXZlbnRFbWl0dGVyLEV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQ9MCxFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBkZWZhdWx0TWF4TGlzdGVuZXJzPTEwO2Z1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnMoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz9FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVyczplLl9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gX2FkZExpc3RlbmVyKGUsdCxuLHIpe3ZhciBpLG8scztpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIG4pO2lmKHZvaWQgMD09PShvPWUuX2V2ZW50cyk/KG89ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fZXZlbnRzQ291bnQ9MCk6KHZvaWQgMCE9PW8ubmV3TGlzdGVuZXImJihlLmVtaXQoXCJuZXdMaXN0ZW5lclwiLHQsbi5saXN0ZW5lcj9uLmxpc3RlbmVyOm4pLG89ZS5fZXZlbnRzKSxzPW9bdF0pLHZvaWQgMD09PXMpcz1vW3RdPW4sKytlLl9ldmVudHNDb3VudDtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHM/cz1vW3RdPXI/W24sc106W3Msbl06cj9zLnVuc2hpZnQobik6cy5wdXNoKG4pLChpPSRnZXRNYXhMaXN0ZW5lcnMoZSkpPjAmJnMubGVuZ3RoPmkmJiFzLndhcm5lZCl7cy53YXJuZWQ9ITA7dmFyIHU9bmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIitzLmxlbmd0aCtcIiBcIitTdHJpbmcodCkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTt1Lm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIix1LmVtaXR0ZXI9ZSx1LnR5cGU9dCx1LmNvdW50PXMubGVuZ3RoLFByb2Nlc3NFbWl0V2FybmluZyh1KX1yZXR1cm4gZX1mdW5jdGlvbiBvbmNlV3JhcHBlcigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllLnB1c2goYXJndW1lbnRzW3RdKTt0aGlzLmZpcmVkfHwodGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLHRoaXMudGFyZ2V0LGUpKX1mdW5jdGlvbiBfb25jZVdyYXAoZSx0LG4pe3ZhciByPXtmaXJlZDohMSx3cmFwRm46dm9pZCAwLHRhcmdldDplLHR5cGU6dCxsaXN0ZW5lcjpufSxpPW9uY2VXcmFwcGVyLmJpbmQocik7cmV0dXJuIGkubGlzdGVuZXI9bixyLndyYXBGbj1pLGl9ZnVuY3Rpb24gX2xpc3RlbmVycyhlLHQsbil7dmFyIHI9ZS5fZXZlbnRzO2lmKHZvaWQgMD09PXIpcmV0dXJuW107dmFyIGk9clt0XTtyZXR1cm4gdm9pZCAwPT09aT9bXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBpP24/W2kubGlzdGVuZXJ8fGldOltpXTpuP3Vud3JhcExpc3RlbmVycyhpKTphcnJheUNsb25lKGksaS5sZW5ndGgpfWZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBuPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBhcnJheUNsb25lKGUsdCl7Zm9yKHZhciBuPW5ldyBBcnJheSh0KSxyPTA7cjx0OysrciluW3JdPWVbcl07cmV0dXJuIG59ZnVuY3Rpb24gc3BsaWNlT25lKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9ZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLG49MDtuPHQubGVuZ3RoOysrbil0W25dPWVbbl0ubGlzdGVuZXJ8fGVbbl07cmV0dXJuIHR9T2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlcixcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZGVmYXVsdE1heExpc3RlbmVyc30sc2V0OmZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fE51bWJlcklzTmFOKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTtkZWZhdWx0TWF4TGlzdGVuZXJzPWV9fSksRXZlbnRFbWl0dGVyLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxFdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxOdW1iZXJJc05hTihlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKCl7cmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyl9LEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10sbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspdC5wdXNoKGFyZ3VtZW50c1tuXSk7dmFyIHI9XCJlcnJvclwiPT09ZSxpPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1pKXI9ciYmdm9pZCAwPT09aS5lcnJvcjtlbHNlIGlmKCFyKXJldHVybiExO2lmKHIpe3ZhciBvO2lmKHQubGVuZ3RoPjAmJihvPXRbMF0pLG8gaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBvO3ZhciBzPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisobz9cIiAoXCIrby5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBzLmNvbnRleHQ9byxzfXZhciB1PWlbZV07aWYodm9pZCAwPT09dSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1KVJlZmxlY3RBcHBseSh1LHRoaXMsdCk7ZWxzZXt2YXIgZj11Lmxlbmd0aCx2PWFycmF5Q2xvbmUodSxmKTtmb3Iobj0wO248ZjsrK24pUmVmbGVjdEFwcGx5KHZbbl0sdGhpcyx0KX1yZXR1cm4hMH0sRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBfYWRkTGlzdGVuZXIodGhpcyxlLHQsITEpfSxFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uPUV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIsRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsZSx0LCEwKX0sRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtyZXR1cm4gdGhpcy5vbihlLF9vbmNlV3JhcCh0aGlzLGUsdCkpLHRoaXN9LEV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7cmV0dXJuIHRoaXMucHJlcGVuZExpc3RlbmVyKGUsX29uY2VXcmFwKHRoaXMsZSx0KSksdGhpc30sRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLHM7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtpZih2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPXJbZV0pKXJldHVybiB0aGlzO2lmKG49PT10fHxuLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgcltlXSxyLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbi5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil7Zm9yKGk9LTEsbz1uLmxlbmd0aC0xO28+PTA7by0tKWlmKG5bb109PT10fHxuW29dLmxpc3RlbmVyPT09dCl7cz1uW29dLmxpc3RlbmVyLGk9bzticmVha31pZihpPDApcmV0dXJuIHRoaXM7MD09PWk/bi5zaGlmdCgpOnNwbGljZU9uZShuLGkpLDE9PT1uLmxlbmd0aCYmKHJbZV09blswXSksdm9pZCAwIT09ci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLHN8fHQpfXJldHVybiB0aGlzfSxFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZj1FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG4scjtpZih2b2lkIDA9PT0obj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PW4ucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1uW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgbltlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGksbz1PYmplY3Qua2V5cyhuKTtmb3Iocj0wO3I8by5sZW5ndGg7KytyKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPW9bcl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YodD1uW2VdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih2b2lkIDAhPT10KWZvcihyPXQubGVuZ3RoLTE7cj49MDtyLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHRbcl0pO3JldHVybiB0aGlzfSxFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gX2xpc3RlbmVycyh0aGlzLGUsITApfSxFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gX2xpc3RlbmVycyh0aGlzLGUsITEpfSxFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUubGlzdGVuZXJDb3VudD9lLmxpc3RlbmVyQ291bnQodCk6bGlzdGVuZXJDb3VudC5jYWxsKGUsdCl9LEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1saXN0ZW5lckNvdW50LEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudHNDb3VudD4wP1JlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cyk6W119OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!*****************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/md5.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_RESULT__;!function (n) {\"use strict\";function t(n, t) {var r = (65535 & n) + (65535 & t);return (n >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r;}function r(n, r, e, o, u, c) {return t((f = t(t(r, n), t(o, c))) << (i = u) | f >>> 32 - i, e);var f, i;}function e(n, t, e, o, u, c, f) {return r(t & e | ~t & o, n, t, u, c, f);}function o(n, t, e, o, u, c, f) {return r(t & o | e & ~o, n, t, u, c, f);}function u(n, t, e, o, u, c, f) {return r(t ^ e ^ o, n, t, u, c, f);}function c(n, t, e, o, u, c, f) {return r(e ^ (t | ~o), n, t, u, c, f);}function f(n, r) {var f, i, a, d, h;n[r >> 5] |= 128 << r % 32, n[14 + (r + 64 >>> 9 << 4)] = r;var l = 1732584193,g = -271733879,v = -1732584194,m = 271733878;for (f = 0; f < n.length; f += 16) {i = l, a = g, d = v, h = m, l = e(l, g, v, m, n[f], 7, -680876936), m = e(m, l, g, v, n[f + 1], 12, -389564586), v = e(v, m, l, g, n[f + 2], 17, 606105819), g = e(g, v, m, l, n[f + 3], 22, -1044525330), l = e(l, g, v, m, n[f + 4], 7, -176418897), m = e(m, l, g, v, n[f + 5], 12, 1200080426), v = e(v, m, l, g, n[f + 6], 17, -1473231341), g = e(g, v, m, l, n[f + 7], 22, -45705983), l = e(l, g, v, m, n[f + 8], 7, 1770035416), m = e(m, l, g, v, n[f + 9], 12, -1958414417), v = e(v, m, l, g, n[f + 10], 17, -42063), g = e(g, v, m, l, n[f + 11], 22, -1990404162), l = e(l, g, v, m, n[f + 12], 7, 1804603682), m = e(m, l, g, v, n[f + 13], 12, -40341101), v = e(v, m, l, g, n[f + 14], 17, -1502002290), l = o(l, g = e(g, v, m, l, n[f + 15], 22, 1236535329), v, m, n[f + 1], 5, -165796510), m = o(m, l, g, v, n[f + 6], 9, -1069501632), v = o(v, m, l, g, n[f + 11], 14, 643717713), g = o(g, v, m, l, n[f], 20, -373897302), l = o(l, g, v, m, n[f + 5], 5, -701558691), m = o(m, l, g, v, n[f + 10], 9, 38016083), v = o(v, m, l, g, n[f + 15], 14, -660478335), g = o(g, v, m, l, n[f + 4], 20, -405537848), l = o(l, g, v, m, n[f + 9], 5, 568446438), m = o(m, l, g, v, n[f + 14], 9, -1019803690), v = o(v, m, l, g, n[f + 3], 14, -187363961), g = o(g, v, m, l, n[f + 8], 20, 1163531501), l = o(l, g, v, m, n[f + 13], 5, -1444681467), m = o(m, l, g, v, n[f + 2], 9, -51403784), v = o(v, m, l, g, n[f + 7], 14, 1735328473), l = u(l, g = o(g, v, m, l, n[f + 12], 20, -1926607734), v, m, n[f + 5], 4, -378558), m = u(m, l, g, v, n[f + 8], 11, -2022574463), v = u(v, m, l, g, n[f + 11], 16, 1839030562), g = u(g, v, m, l, n[f + 14], 23, -35309556), l = u(l, g, v, m, n[f + 1], 4, -1530992060), m = u(m, l, g, v, n[f + 4], 11, 1272893353), v = u(v, m, l, g, n[f + 7], 16, -155497632), g = u(g, v, m, l, n[f + 10], 23, -1094730640), l = u(l, g, v, m, n[f + 13], 4, 681279174), m = u(m, l, g, v, n[f], 11, -358537222), v = u(v, m, l, g, n[f + 3], 16, -722521979), g = u(g, v, m, l, n[f + 6], 23, 76029189), l = u(l, g, v, m, n[f + 9], 4, -640364487), m = u(m, l, g, v, n[f + 12], 11, -421815835), v = u(v, m, l, g, n[f + 15], 16, 530742520), l = c(l, g = u(g, v, m, l, n[f + 2], 23, -995338651), v, m, n[f], 6, -198630844), m = c(m, l, g, v, n[f + 7], 10, 1126891415), v = c(v, m, l, g, n[f + 14], 15, -1416354905), g = c(g, v, m, l, n[f + 5], 21, -57434055), l = c(l, g, v, m, n[f + 12], 6, 1700485571), m = c(m, l, g, v, n[f + 3], 10, -1894986606), v = c(v, m, l, g, n[f + 10], 15, -1051523), g = c(g, v, m, l, n[f + 1], 21, -2054922799), l = c(l, g, v, m, n[f + 8], 6, 1873313359), m = c(m, l, g, v, n[f + 15], 10, -30611744), v = c(v, m, l, g, n[f + 6], 15, -1560198380), g = c(g, v, m, l, n[f + 13], 21, 1309151649), l = c(l, g, v, m, n[f + 4], 6, -145523070), m = c(m, l, g, v, n[f + 11], 10, -1120210379), v = c(v, m, l, g, n[f + 2], 15, 718787259), g = c(g, v, m, l, n[f + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);}return [l, g, v, m];}function i(n) {var t,r = \"\",e = 32 * n.length;for (t = 0; t < e; t += 8) {r += String.fromCharCode(n[t >> 5] >>> t % 32 & 255);}return r;}function a(n) {var t,r = [];for (r[(n.length >> 2) - 1] = void 0, t = 0; t < r.length; t += 1) {r[t] = 0;}var e = 8 * n.length;for (t = 0; t < e; t += 8) {r[t >> 5] |= (255 & n.charCodeAt(t / 8)) << t % 32;}return r;}function d(n) {var t,r,e = \"\";for (r = 0; r < n.length; r += 1) {t = n.charCodeAt(r), e += \"0123456789abcdef\".charAt(t >>> 4 & 15) + \"0123456789abcdef\".charAt(15 & t);}return e;}function h(n) {return unescape(encodeURIComponent(n));}function l(n) {return function (n) {return i(f(a(n), 8 * n.length));}(h(n));}function g(n, t) {return function (n, t) {var r,e,o = a(n),u = [],c = [];for (u[15] = c[15] = void 0, o.length > 16 && (o = f(o, 8 * n.length)), r = 0; r < 16; r += 1) {u[r] = 909522486 ^ o[r], c[r] = 1549556828 ^ o[r];}return e = f(u.concat(a(t)), 512 + 8 * t.length), i(f(c.concat(e), 640));}(h(n), h(t));}function v(n, t, r) {return t ? r ? g(t, n) : d(g(t, n)) : r ? l(n) : d(l(n));} true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return v;}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;}(void 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!*****************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/weapp.socket.io.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}!function (t, e) {if (true) module.exports = e();else { var n, r; }}(window, function () {return function (t) {var e = {};function r(n) {if (e[n]) return e[n].exports;var o = e[n] = { i: n, l: !1, exports: {} };return t[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;}return r.m = t, r.c = e, r.d = function (t, e, n) {r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });}, r.r = function (t) {\"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t, \"__esModule\", { value: !0 });}, r.t = function (t, e) {if (1 & e && (t = r(t)), 8 & e) return t;if (4 & e && \"object\" == typeof t && t && t.__esModule) return t;var n = Object.create(null);if (r.r(n), Object.defineProperty(n, \"default\", { enumerable: !0, value: t }), 2 & e && \"string\" != typeof t) for (var o in t) {r.d(n, o, function (e) {return t[e];}.bind(null, o));}return n;}, r.n = function (t) {var e = t && t.__esModule ? function () {return t.default;} : function () {return t;};return r.d(e, \"a\", e), e;}, r.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, r.p = \"\", r(r.s = 24);}([function (t, e) {t.exports = function () {return function () {};};}, function (t, e) {var r;r = function () {return this;}();try {r = r || Function(\"return this\")() || (0, eval)(\"this\");} catch (t) {\"object\" == typeof window && (r = window);}t.exports = r;}, function (t, e) {var r = {}.toString;t.exports = Array.isArray || function (t) {return \"[object Array]\" == r.call(t);};}, function (t, e, r) {function n(t) {if (t) return function (t) {for (var e in n.prototype) {t[e] = n.prototype[e];}return t;}(t);}t.exports = n, n.prototype.on = n.prototype.addEventListener = function (t, e) {return this._callbacks = this._callbacks || {}, (this._callbacks[\"$\" + t] = this._callbacks[\"$\" + t] || []).push(e), this;}, n.prototype.once = function (t, e) {function r() {this.off(t, r), e.apply(this, arguments);}return r.fn = e, this.on(t, r), this;}, n.prototype.off = n.prototype.removeListener = n.prototype.removeAllListeners = n.prototype.removeEventListener = function (t, e) {if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var r,n = this._callbacks[\"$\" + t];if (!n) return this;if (1 == arguments.length) return delete this._callbacks[\"$\" + t], this;for (var o = 0; o < n.length; o++) {if ((r = n[o]) === e || r.fn === e) {n.splice(o, 1);break;}}return this;}, n.prototype.emit = function (t) {this._callbacks = this._callbacks || {};var e = [].slice.call(arguments, 1),r = this._callbacks[\"$\" + t];if (r) for (var n = 0, o = (r = r.slice(0)).length; n < o; ++n) {r[n].apply(this, e);}return this;}, n.prototype.listeners = function (t) {return this._callbacks = this._callbacks || {}, this._callbacks[\"$\" + t] || [];}, n.prototype.hasListeners = function (t) {return !!this.listeners(t).length;};}, function (t, e, r) {var n = r(0)(\"socket.io-parser\"),o = r(3),i = r(20),s = r(2),a = r(9);function u() {}e.protocol = 4, e.types = [\"CONNECT\", \"DISCONNECT\", \"EVENT\", \"ACK\", \"ERROR\", \"BINARY_EVENT\", \"BINARY_ACK\"], e.CONNECT = 0, e.DISCONNECT = 1, e.EVENT = 2, e.ACK = 3, e.ERROR = 4, e.BINARY_EVENT = 5, e.BINARY_ACK = 6, e.Encoder = u, e.Decoder = h;var c = e.ERROR + '\"encode error\"';function f(t) {var r = \"\" + t.type;if (e.BINARY_EVENT !== t.type && e.BINARY_ACK !== t.type || (r += t.attachments + \"-\"), t.nsp && \"/\" !== t.nsp && (r += t.nsp + \",\"), null != t.id && (r += t.id), null != t.data) {var o = function (t) {try {return JSON.stringify(t);} catch (t) {return !1;}}(t.data);if (!1 === o) return c;r += o;}return n(\"encoded %j as %s\", t, r), r;}function h() {this.reconstructor = null;}function p(t) {this.reconPack = t, this.buffers = [];}function l(t) {return { type: e.ERROR, data: \"parser error: \" + t };}u.prototype.encode = function (t, r) {n(\"encoding packet %j\", t), e.BINARY_EVENT === t.type || e.BINARY_ACK === t.type ? function (t, e) {i.removeBlobs(t, function (t) {var r = i.deconstructPacket(t),n = f(r.packet),o = r.buffers;o.unshift(n), e(o);});}(t, r) : r([f(t)]);}, o(h.prototype), h.prototype.add = function (t) {var r;if (\"string\" == typeof t) r = function (t) {var r = 0,o = { type: Number(t.charAt(0)) };if (null == e.types[o.type]) return l(\"unknown packet type \" + o.type);if (e.BINARY_EVENT === o.type || e.BINARY_ACK === o.type) {for (var i = \"\"; \"-\" !== t.charAt(++r) && (i += t.charAt(r), r != t.length);) {;}if (i != Number(i) || \"-\" !== t.charAt(r)) throw new Error(\"Illegal attachments\");o.attachments = Number(i);}if (\"/\" === t.charAt(r + 1)) for (o.nsp = \"\"; ++r;) {if (\",\" === (u = t.charAt(r))) break;if (o.nsp += u, r === t.length) break;} else o.nsp = \"/\";var a = t.charAt(r + 1);if (\"\" !== a && Number(a) == a) {for (o.id = \"\"; ++r;) {var u;if (null == (u = t.charAt(r)) || Number(u) != u) {--r;break;}if (o.id += t.charAt(r), r === t.length) break;}o.id = Number(o.id);}if (t.charAt(++r)) {var c = function (t) {try {return JSON.parse(t);} catch (t) {return !1;}}(t.substr(r));if (!(!1 !== c && (o.type === e.ERROR || s(c)))) return l(\"invalid payload\");o.data = c;}return n(\"decoded %s as %j\", t, o), o;}(t), e.BINARY_EVENT === r.type || e.BINARY_ACK === r.type ? (this.reconstructor = new p(r), 0 === this.reconstructor.reconPack.attachments && this.emit(\"decoded\", r)) : this.emit(\"decoded\", r);else {if (!a(t) && !t.base64) throw new Error(\"Unknown type: \" + t);if (!this.reconstructor) throw new Error(\"got binary data when not reconstructing a packet\");(r = this.reconstructor.takeBinaryData(t)) && (this.reconstructor = null, this.emit(\"decoded\", r));}}, h.prototype.destroy = function () {this.reconstructor && this.reconstructor.finishedReconstruction();}, p.prototype.takeBinaryData = function (t) {if (this.buffers.push(t), this.buffers.length === this.reconPack.attachments) {var e = i.reconstructPacket(this.reconPack, this.buffers);return this.finishedReconstruction(), e;}return null;}, p.prototype.finishedReconstruction = function () {this.reconPack = null, this.buffers = [];};}, function (t, e) {var r = [].slice;t.exports = function (t, e) {if (\"string\" == typeof e && (e = t[e]), \"function\" != typeof e) throw new Error(\"bind() requires a function\");var n = r.call(arguments, 2);return function () {return e.apply(t, n.concat(r.call(arguments)));};};}, function (t, e) {t.exports = function (t, e, r) {return t.on(e, r), { destroy: function destroy() {t.removeListener(e, r);} };};}, function (t, e, r) {var n = r(4),o = r(3),i = r(18),s = r(6),a = r(5),u = r(0)(\"socket.io-client:socket\"),c = r(17),f = r(16);t.exports = l;var h = { connect: 1, connect_error: 1, connect_timeout: 1, connecting: 1, disconnect: 1, error: 1, reconnect: 1, reconnect_attempt: 1, reconnect_failed: 1, reconnect_error: 1, reconnecting: 1, ping: 1, pong: 1 },p = o.prototype.emit;function l(t, e, r) {this.io = t, this.nsp = e, this.json = this, this.ids = 0, this.acks = {}, this.receiveBuffer = [], this.sendBuffer = [], this.connected = !1, this.disconnected = !0, this.flags = {}, r && r.query && (this.query = r.query), this.io.autoConnect && this.open();}o(l.prototype), l.prototype.subEvents = function () {if (!this.subs) {var t = this.io;this.subs = [s(t, \"open\", a(this, \"onopen\")), s(t, \"packet\", a(this, \"onpacket\")), s(t, \"close\", a(this, \"onclose\"))];}}, l.prototype.open = l.prototype.connect = function () {return this.connected ? this : (this.subEvents(), this.io.open(), \"open\" === this.io.readyState && this.onopen(), this.emit(\"connecting\"), this);}, l.prototype.send = function () {var t = i(arguments);return t.unshift(\"message\"), this.emit.apply(this, t), this;}, l.prototype.emit = function (t) {if (h.hasOwnProperty(t)) return p.apply(this, arguments), this;var e = i(arguments),r = { type: (void 0 !== this.flags.binary ? this.flags.binary : f(e)) ? n.BINARY_EVENT : n.EVENT, data: e, options: {} };return r.options.compress = !this.flags || !1 !== this.flags.compress, \"function\" == typeof e[e.length - 1] && (u(\"emitting packet with ack id %d\", this.ids), this.acks[this.ids] = e.pop(), r.id = this.ids++), this.connected ? this.packet(r) : this.sendBuffer.push(r), this.flags = {}, this;}, l.prototype.packet = function (t) {t.nsp = this.nsp, this.io.packet(t);}, l.prototype.onopen = function () {if (u(\"transport is open - connecting\"), \"/\" !== this.nsp) if (this.query) {var t = \"object\" == typeof this.query ? c.encode(this.query) : this.query;u(\"sending connect packet with query %s\", t), this.packet({ type: n.CONNECT, query: t });} else this.packet({ type: n.CONNECT });}, l.prototype.onclose = function (t) {u(\"close (%s)\", t), this.connected = !1, this.disconnected = !0, delete this.id, this.emit(\"disconnect\", t);}, l.prototype.onpacket = function (t) {var e = t.nsp === this.nsp,r = t.type === n.ERROR && \"/\" === t.nsp;if (e || r) switch (t.type) {case n.CONNECT:this.onconnect();break;case n.EVENT:case n.BINARY_EVENT:this.onevent(t);break;case n.ACK:case n.BINARY_ACK:this.onack(t);break;case n.DISCONNECT:this.ondisconnect();break;case n.ERROR:this.emit(\"error\", t.data);}}, l.prototype.onevent = function (t) {var e = t.data || [];u(\"emitting event %j\", e), null != t.id && (u(\"attaching ack callback to event\"), e.push(this.ack(t.id))), this.connected ? p.apply(this, e) : this.receiveBuffer.push(e);}, l.prototype.ack = function (t) {var e = this,r = !1;return function () {if (!r) {r = !0;var o = i(arguments);u(\"sending ack %j\", o), e.packet({ type: f(o) ? n.BINARY_ACK : n.ACK, id: t, data: o });}};}, l.prototype.onack = function (t) {var e = this.acks[t.id];\"function\" == typeof e ? (u(\"calling ack %s with %j\", t.id, t.data), e.apply(this, t.data), delete this.acks[t.id]) : u(\"bad ack %s\", t.id);}, l.prototype.onconnect = function () {this.connected = !0, this.disconnected = !1, this.emit(\"connect\"), this.emitBuffered();}, l.prototype.emitBuffered = function () {var t;for (t = 0; t < this.receiveBuffer.length; t++) {p.apply(this, this.receiveBuffer[t]);}for (this.receiveBuffer = [], t = 0; t < this.sendBuffer.length; t++) {this.packet(this.sendBuffer[t]);}this.sendBuffer = [];}, l.prototype.ondisconnect = function () {u(\"server disconnect (%s)\", this.nsp), this.destroy(), this.onclose(\"io server disconnect\");}, l.prototype.destroy = function () {if (this.subs) {for (var t = 0; t < this.subs.length; t++) {this.subs[t].destroy();}this.subs = null;}this.io.destroy(this);}, l.prototype.close = l.prototype.disconnect = function () {return this.connected && (u(\"performing disconnect (%s)\", this.nsp), this.packet({ type: n.DISCONNECT })), this.destroy(), this.connected && this.onclose(\"io client disconnect\"), this;}, l.prototype.compress = function (t) {return this.flags.compress = t, this;}, l.prototype.binary = function (t) {return this.flags.binary = t, this;};}, function (t, e, r) {var n = r(19),o = r(7),i = r(3),s = r(4),a = r(6),u = r(5),c = r(0)(\"socket.io-client:manager\"),f = r(11),h = r(10),p = Object.prototype.hasOwnProperty;function l(t, e) {if (!(this instanceof l)) return new l(t, e);t && \"object\" == typeof t && (e = t, t = void 0), (e = e || {}).path = e.path || \"/socket.io\", this.nsps = {}, this.subs = [], this.opts = e, this.reconnection(!1 !== e.reconnection), this.reconnectionAttempts(e.reconnectionAttempts || 1 / 0), this.reconnectionDelay(e.reconnectionDelay || 1e3), this.reconnectionDelayMax(e.reconnectionDelayMax || 5e3), this.randomizationFactor(e.randomizationFactor || .5), this.backoff = new h({ min: this.reconnectionDelay(), max: this.reconnectionDelayMax(), jitter: this.randomizationFactor() }), this.timeout(null == e.timeout ? 2e4 : e.timeout), this.readyState = \"closed\", this.uri = t, this.connecting = [], this.lastPing = null, this.encoding = !1, this.packetBuffer = [];var r = e.parser || s;this.encoder = new r.Encoder(), this.decoder = new r.Decoder(), this.autoConnect = !1 !== e.autoConnect, this.autoConnect && this.open();}t.exports = l, l.prototype.emitAll = function () {for (var t in this.emit.apply(this, arguments), this.nsps) {p.call(this.nsps, t) && this.nsps[t].emit.apply(this.nsps[t], arguments);}}, l.prototype.updateSocketIds = function () {for (var t in this.nsps) {p.call(this.nsps, t) && (this.nsps[t].id = this.generateId(t));}}, l.prototype.generateId = function (t) {return (\"/\" === t ? \"\" : t + \"#\") + this.engine.id;}, i(l.prototype), l.prototype.reconnection = function (t) {return arguments.length ? (this._reconnection = !!t, this) : this._reconnection;}, l.prototype.reconnectionAttempts = function (t) {return arguments.length ? (this._reconnectionAttempts = t, this) : this._reconnectionAttempts;}, l.prototype.reconnectionDelay = function (t) {return arguments.length ? (this._reconnectionDelay = t, this.backoff && this.backoff.setMin(t), this) : this._reconnectionDelay;}, l.prototype.randomizationFactor = function (t) {return arguments.length ? (this._randomizationFactor = t, this.backoff && this.backoff.setJitter(t), this) : this._randomizationFactor;}, l.prototype.reconnectionDelayMax = function (t) {return arguments.length ? (this._reconnectionDelayMax = t, this.backoff && this.backoff.setMax(t), this) : this._reconnectionDelayMax;}, l.prototype.timeout = function (t) {return arguments.length ? (this._timeout = t, this) : this._timeout;}, l.prototype.maybeReconnectOnOpen = function () {!this.reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();}, l.prototype.open = l.prototype.connect = function (t, e) {if (c(\"readyState %s\", this.readyState), ~this.readyState.indexOf(\"open\")) return this;c(\"opening %s\", this.uri), this.engine = n(this.uri, this.opts);var r = this.engine,o = this;this.readyState = \"opening\", this.skipReconnect = !1;var i = a(r, \"open\", function () {o.onopen(), t && t();}),s = a(r, \"error\", function (e) {if (c(\"connect_error\"), o.cleanup(), o.readyState = \"closed\", o.emitAll(\"connect_error\", e), t) {var r = new Error(\"Connection error\");r.data = e, t(r);} else o.maybeReconnectOnOpen();});if (!1 !== this._timeout) {var u = this._timeout;c(\"connect attempt will timeout after %d\", u);var f = setTimeout(function () {c(\"connect attempt timed out after %d\", u), i.destroy(), r.close(), r.emit(\"error\", \"timeout\"), o.emitAll(\"connect_timeout\", u);}, u);this.subs.push({ destroy: function destroy() {clearTimeout(f);} });}return this.subs.push(i), this.subs.push(s), this;}, l.prototype.onopen = function () {c(\"open\"), this.cleanup(), this.readyState = \"open\", this.emit(\"open\");var t = this.engine;this.subs.push(a(t, \"data\", u(this, \"ondata\"))), this.subs.push(a(t, \"ping\", u(this, \"onping\"))), this.subs.push(a(t, \"pong\", u(this, \"onpong\"))), this.subs.push(a(t, \"error\", u(this, \"onerror\"))), this.subs.push(a(t, \"close\", u(this, \"onclose\"))), this.subs.push(a(this.decoder, \"decoded\", u(this, \"ondecoded\")));}, l.prototype.onping = function () {this.lastPing = new Date(), this.emitAll(\"ping\");}, l.prototype.onpong = function () {this.emitAll(\"pong\", new Date() - this.lastPing);}, l.prototype.ondata = function (t) {this.decoder.add(t);}, l.prototype.ondecoded = function (t) {this.emit(\"packet\", t);}, l.prototype.onerror = function (t) {c(\"error\", t), this.emitAll(\"error\", t);}, l.prototype.socket = function (t, e) {var r = this.nsps[t];if (!r) {r = new o(this, t, e), this.nsps[t] = r;var n = this;r.on(\"connecting\", i), r.on(\"connect\", function () {r.id = n.generateId(t);}), this.autoConnect && i();}function i() {~f(n.connecting, r) || n.connecting.push(r);}return r;}, l.prototype.destroy = function (t) {var e = f(this.connecting, t);~e && this.connecting.splice(e, 1), this.connecting.length || this.close();}, l.prototype.packet = function (t) {c(\"writing packet %j\", t);var e = this;t.query && 0 === t.type && (t.nsp += \"?\" + t.query), e.encoding ? e.packetBuffer.push(t) : (e.encoding = !0, this.encoder.encode(t, function (r) {for (var n = 0; n < r.length; n++) {e.engine.write(r[n], t.options);}e.encoding = !1, e.processPacketQueue();}));}, l.prototype.processPacketQueue = function () {if (this.packetBuffer.length > 0 && !this.encoding) {var t = this.packetBuffer.shift();this.packet(t);}}, l.prototype.cleanup = function () {c(\"cleanup\");for (var t = this.subs.length, e = 0; e < t; e++) {this.subs.shift().destroy();}this.packetBuffer = [], this.encoding = !1, this.lastPing = null, this.decoder.destroy();}, l.prototype.close = l.prototype.disconnect = function () {c(\"disconnect\"), this.skipReconnect = !0, this.reconnecting = !1, \"opening\" === this.readyState && this.cleanup(), this.backoff.reset(), this.readyState = \"closed\", this.engine && this.engine.close();}, l.prototype.onclose = function (t) {c(\"onclose\"), this.cleanup(), this.backoff.reset(), this.readyState = \"closed\", this.emit(\"close\", t), this._reconnection && !this.skipReconnect && this.reconnect();}, l.prototype.reconnect = function () {if (this.reconnecting || this.skipReconnect) return this;var t = this;if (this.backoff.attempts >= this._reconnectionAttempts) c(\"reconnect failed\"), this.backoff.reset(), this.emitAll(\"reconnect_failed\"), this.reconnecting = !1;else {var e = this.backoff.duration();c(\"will wait %dms before reconnect attempt\", e), this.reconnecting = !0;var r = setTimeout(function () {t.skipReconnect || (c(\"attempting reconnect\"), t.emitAll(\"reconnect_attempt\", t.backoff.attempts), t.emitAll(\"reconnecting\", t.backoff.attempts), t.skipReconnect || t.open(function (e) {e ? (c(\"reconnect attempt error\"), t.reconnecting = !1, t.reconnect(), t.emitAll(\"reconnect_error\", e.data)) : (c(\"reconnect success\"), t.onreconnect());}));}, e);this.subs.push({ destroy: function destroy() {clearTimeout(r);} });}}, l.prototype.onreconnect = function () {var t = this.backoff.attempts;this.reconnecting = !1, this.backoff.reset(), this.updateSocketIds(), this.emitAll(\"reconnect\", t);};}, function (t, e, r) {(function (e) {t.exports = function (t) {return r && e.Buffer.isBuffer(t) || n && (t instanceof e.ArrayBuffer || o(t));};var r = \"function\" == typeof e.Buffer && \"function\" == typeof e.Buffer.isBuffer,n = \"function\" == typeof e.ArrayBuffer,o = n && \"function\" == typeof e.ArrayBuffer.isView ? e.ArrayBuffer.isView : function (t) {return t.buffer instanceof e.ArrayBuffer;};}).call(this, r(1));}, function (t, e) {function r(t) {t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;}t.exports = r, r.prototype.duration = function () {var t = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {var e = Math.random(),r = Math.floor(e * this.jitter * t);t = 0 == (1 & Math.floor(10 * e)) ? t - r : t + r;}return 0 | Math.min(t, this.max);}, r.prototype.reset = function () {this.attempts = 0;}, r.prototype.setMin = function (t) {this.ms = t;}, r.prototype.setMax = function (t) {this.max = t;}, r.prototype.setJitter = function (t) {this.jitter = t;};}, function (t, e) {var r = [].indexOf;t.exports = function (t, e) {if (r) return t.indexOf(e);for (var n = 0; n < t.length; ++n) {if (t[n] === e) return n;}return -1;};}, function (t, e) {var r = {}.toString;t.exports = Array.isArray || function (t) {return \"[object Array]\" == r.call(t);};}, function (t, e) {e.read = function (t, e, r, n, o) {var i,s,a = 8 * o - n - 1,u = (1 << a) - 1,c = u >> 1,f = -7,h = r ? o - 1 : 0,p = r ? -1 : 1,l = t[e + h];for (h += p, i = l & (1 << -f) - 1, l >>= -f, f += a; f > 0; i = 256 * i + t[e + h], h += p, f -= 8) {;}for (s = i & (1 << -f) - 1, i >>= -f, f += n; f > 0; s = 256 * s + t[e + h], h += p, f -= 8) {;}if (0 === i) i = 1 - c;else {if (i === u) return s ? NaN : 1 / 0 * (l ? -1 : 1);s += Math.pow(2, n), i -= c;}return (l ? -1 : 1) * s * Math.pow(2, i - n);}, e.write = function (t, e, r, n, o, i) {var s,a,u,c = 8 * i - o - 1,f = (1 << c) - 1,h = f >> 1,p = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,l = n ? 0 : i - 1,d = n ? 1 : -1,y = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = f) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + h >= 1 ? p / u : p * Math.pow(2, 1 - h)) * u >= 2 && (s++, u /= 2), s + h >= f ? (a = 0, s = f) : s + h >= 1 ? (a = (e * u - 1) * Math.pow(2, o), s += h) : (a = e * Math.pow(2, h - 1) * Math.pow(2, o), s = 0)); o >= 8; t[r + l] = 255 & a, l += d, a /= 256, o -= 8) {;}for (s = s << o | a, c += o; c > 0; t[r + l] = 255 & s, l += d, s /= 256, c -= 8) {;}t[r + l - d] |= 128 * y;};}, function (t, e, r) {\"use strict\";e.byteLength = function (t) {var e = c(t),r = e[0],n = e[1];return 3 * (r + n) / 4 - n;}, e.toByteArray = function (t) {for (var e, r = c(t), n = r[0], s = r[1], a = new i(3 * (n + s) / 4 - s), u = 0, f = s > 0 ? n - 4 : n, h = 0; h < f; h += 4) {e = o[t.charCodeAt(h)] << 18 | o[t.charCodeAt(h + 1)] << 12 | o[t.charCodeAt(h + 2)] << 6 | o[t.charCodeAt(h + 3)], a[u++] = e >> 16 & 255, a[u++] = e >> 8 & 255, a[u++] = 255 & e;}return 2 === s && (e = o[t.charCodeAt(h)] << 2 | o[t.charCodeAt(h + 1)] >> 4, a[u++] = 255 & e), 1 === s && (e = o[t.charCodeAt(h)] << 10 | o[t.charCodeAt(h + 1)] << 4 | o[t.charCodeAt(h + 2)] >> 2, a[u++] = e >> 8 & 255, a[u++] = 255 & e), a;}, e.fromByteArray = function (t) {for (var e, r = t.length, o = r % 3, i = [], s = 0, a = r - o; s < a; s += 16383) {i.push(f(t, s, s + 16383 > a ? a : s + 16383));}return 1 === o ? (e = t[r - 1], i.push(n[e >> 2] + n[e << 4 & 63] + \"==\")) : 2 === o && (e = (t[r - 2] << 8) + t[r - 1], i.push(n[e >> 10] + n[e >> 4 & 63] + n[e << 2 & 63] + \"=\")), i.join(\"\");};for (var n = [], o = [], i = \"undefined\" != typeof Uint8Array ? Uint8Array : Array, s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", a = 0, u = s.length; a < u; ++a) {n[a] = s[a], o[s.charCodeAt(a)] = a;}function c(t) {var e = t.length;if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");var r = t.indexOf(\"=\");return -1 === r && (r = e), [r, r === e ? 0 : 4 - r % 4];}function f(t, e, r) {for (var o, i, s = [], a = e; a < r; a += 3) {o = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), s.push(n[(i = o) >> 18 & 63] + n[i >> 12 & 63] + n[i >> 6 & 63] + n[63 & i]);}return s.join(\"\");}o[\"-\".charCodeAt(0)] = 62, o[\"_\".charCodeAt(0)] = 63;}, function (t, e, r) {\"use strict\";(function (t) {var n = r(14),o = r(13),i = r(12);function s() {return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;}function a(t, e) {if (s() < e) throw new RangeError(\"Invalid typed array length\");return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t;}function u(t, e, r) {if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, r);if (\"number\" == typeof t) {if (\"string\" == typeof e) throw new Error(\"If encoding is specified then the first argument must be a string\");return h(this, t);}return c(this, t, e, r);}function c(t, e, r, n) {if (\"number\" == typeof e) throw new TypeError('\"value\" argument must not be a number');return \"undefined\" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function (t, e, r, n) {if (e.byteLength, r < 0 || e.byteLength < r) throw new RangeError(\"'offset' is out of bounds\");if (e.byteLength < r + (n || 0)) throw new RangeError(\"'length' is out of bounds\");return e = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n), u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = p(t, e), t;}(t, e, r, n) : \"string\" == typeof e ? function (t, e, r) {if (\"string\" == typeof r && \"\" !== r || (r = \"utf8\"), !u.isEncoding(r)) throw new TypeError('\"encoding\" must be a valid string encoding');var n = 0 | d(e, r),o = (t = a(t, n)).write(e, r);return o !== n && (t = t.slice(0, o)), t;}(t, e, r) : function (t, e) {if (u.isBuffer(e)) {var r = 0 | l(e.length);return 0 === (t = a(t, r)).length ? t : (e.copy(t, 0, 0, r), t);}if (e) {if (\"undefined\" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || \"length\" in e) return \"number\" != typeof e.length || (n = e.length) != n ? a(t, 0) : p(t, e);if (\"Buffer\" === e.type && i(e.data)) return p(t, e.data);}var n;throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\");}(t, e);}function f(t) {if (\"number\" != typeof t) throw new TypeError('\"size\" argument must be a number');if (t < 0) throw new RangeError('\"size\" argument must not be negative');}function h(t, e) {if (f(e), t = a(t, e < 0 ? 0 : 0 | l(e)), !u.TYPED_ARRAY_SUPPORT) for (var r = 0; r < e; ++r) {t[r] = 0;}return t;}function p(t, e) {var r = e.length < 0 ? 0 : 0 | l(e.length);t = a(t, r);for (var n = 0; n < r; n += 1) {t[n] = 255 & e[n];}return t;}function l(t) {if (t >= s()) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + s().toString(16) + \" bytes\");return 0 | t;}function d(t, e) {if (u.isBuffer(t)) return t.length;if (\"undefined\" != typeof ArrayBuffer && \"function\" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;\"string\" != typeof t && (t = \"\" + t);var r = t.length;if (0 === r) return 0;for (var n = !1;;) {switch (e) {case \"ascii\":case \"latin1\":case \"binary\":return r;case \"utf8\":case \"utf-8\":case void 0:return j(t).length;case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return 2 * r;case \"hex\":return r >>> 1;case \"base64\":return q(t).length;default:if (n) return j(t).length;e = (\"\" + e).toLowerCase(), n = !0;}}}function y(t, e, r) {var n = t[e];t[e] = t[r], t[r] = n;}function g(t, e, r, n, o) {if (0 === t.length) return -1;if (\"string\" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = o ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {if (o) return -1;r = t.length - 1;} else if (r < 0) {if (!o) return -1;r = 0;}if (\"string\" == typeof e && (e = u.from(e, n)), u.isBuffer(e)) return 0 === e.length ? -1 : v(t, e, r, n, o);if (\"number\" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && \"function\" == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : v(t, [e], r, n, o);throw new TypeError(\"val must be string, number or Buffer\");}function v(t, e, r, n, o) {var i,s = 1,a = t.length,u = e.length;if (void 0 !== n && (\"ucs2\" === (n = String(n).toLowerCase()) || \"ucs-2\" === n || \"utf16le\" === n || \"utf-16le\" === n)) {if (t.length < 2 || e.length < 2) return -1;s = 2, a /= 2, u /= 2, r /= 2;}function c(t, e) {return 1 === s ? t[e] : t.readUInt16BE(e * s);}if (o) {var f = -1;for (i = r; i < a; i++) {if (c(t, i) === c(e, -1 === f ? 0 : i - f)) {if (-1 === f && (f = i), i - f + 1 === u) return f * s;} else -1 !== f && (i -= i - f), f = -1;}} else for (r + u > a && (r = a - u), i = r; i >= 0; i--) {for (var h = !0, p = 0; p < u; p++) {if (c(t, i + p) !== c(e, p)) {h = !1;break;}}if (h) return i;}return -1;}function b(t, e, r, n) {r = Number(r) || 0;var o = t.length - r;n ? (n = Number(n)) > o && (n = o) : n = o;var i = e.length;if (i % 2 != 0) throw new TypeError(\"Invalid hex string\");n > i / 2 && (n = i / 2);for (var s = 0; s < n; ++s) {var a = parseInt(e.substr(2 * s, 2), 16);if (isNaN(a)) return s;t[r + s] = a;}return s;}function m(t, e, r, n) {return F(j(e, t.length - r), t, r, n);}function w(t, e, r, n) {return F(function (t) {for (var e = [], r = 0; r < t.length; ++r) {e.push(255 & t.charCodeAt(r));}return e;}(e), t, r, n);}function A(t, e, r, n) {return w(t, e, r, n);}function _(t, e, r, n) {return F(q(e), t, r, n);}function E(t, e, r, n) {return F(function (t, e) {for (var r, n, o, i = [], s = 0; s < t.length && !((e -= 2) < 0); ++s) {n = (r = t.charCodeAt(s)) >> 8, o = r % 256, i.push(o), i.push(n);}return i;}(e, t.length - r), t, r, n);}function k(t, e, r) {return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));}function B(t, e, r) {r = Math.min(t.length, r);for (var n = [], o = e; o < r;) {var i,s,a,u,c = t[o],f = null,h = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;if (o + h <= r) switch (h) {case 1:c < 128 && (f = c);break;case 2:128 == (192 & (i = t[o + 1])) && (u = (31 & c) << 6 | 63 & i) > 127 && (f = u);break;case 3:i = t[o + 1], s = t[o + 2], 128 == (192 & i) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & i) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (f = u);break;case 4:i = t[o + 1], s = t[o + 2], a = t[o + 3], 128 == (192 & i) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (f = u);}null === f ? (f = 65533, h = 1) : f > 65535 && (f -= 65536, n.push(f >>> 10 & 1023 | 55296), f = 56320 | 1023 & f), n.push(f), o += h;}return function (t) {var e = t.length;if (e <= R) return String.fromCharCode.apply(String, t);for (var r = \"\", n = 0; n < e;) {r += String.fromCharCode.apply(String, t.slice(n, n += R));}return r;}(n);}e.Buffer = u, e.SlowBuffer = function (t) {return +t != t && (t = 0), u.alloc(+t);}, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function () {try {var t = new Uint8Array(1);return t.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {return 42;} }, 42 === t.foo() && \"function\" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength;} catch (t) {return !1;}}(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function (t) {return t.__proto__ = u.prototype, t;}, u.from = function (t, e, r) {return c(null, t, e, r);}, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, \"undefined\" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: !0 })), u.alloc = function (t, e, r) {return function (t, e, r, n) {return f(e), e <= 0 ? a(t, e) : void 0 !== r ? \"string\" == typeof n ? a(t, e).fill(r, n) : a(t, e).fill(r) : a(t, e);}(null, t, e, r);}, u.allocUnsafe = function (t) {return h(null, t);}, u.allocUnsafeSlow = function (t) {return h(null, t);}, u.isBuffer = function (t) {return !(null == t || !t._isBuffer);}, u.compare = function (t, e) {if (!u.isBuffer(t) || !u.isBuffer(e)) throw new TypeError(\"Arguments must be Buffers\");if (t === e) return 0;for (var r = t.length, n = e.length, o = 0, i = Math.min(r, n); o < i; ++o) {if (t[o] !== e[o]) {r = t[o], n = e[o];break;}}return r < n ? -1 : n < r ? 1 : 0;}, u.isEncoding = function (t) {switch (String(t).toLowerCase()) {case \"hex\":case \"utf8\":case \"utf-8\":case \"ascii\":case \"latin1\":case \"binary\":case \"base64\":case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return !0;default:return !1;}}, u.concat = function (t, e) {if (!i(t)) throw new TypeError('\"list\" argument must be an Array of Buffers');if (0 === t.length) return u.alloc(0);var r;if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) {e += t[r].length;}var n = u.allocUnsafe(e),o = 0;for (r = 0; r < t.length; ++r) {var s = t[r];if (!u.isBuffer(s)) throw new TypeError('\"list\" argument must be an Array of Buffers');s.copy(n, o), o += s.length;}return n;}, u.byteLength = d, u.prototype._isBuffer = !0, u.prototype.swap16 = function () {var t = this.length;if (t % 2 != 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for (var e = 0; e < t; e += 2) {y(this, e, e + 1);}return this;}, u.prototype.swap32 = function () {var t = this.length;if (t % 4 != 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for (var e = 0; e < t; e += 4) {y(this, e, e + 3), y(this, e + 1, e + 2);}return this;}, u.prototype.swap64 = function () {var t = this.length;if (t % 8 != 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for (var e = 0; e < t; e += 8) {y(this, e, e + 7), y(this, e + 1, e + 6), y(this, e + 2, e + 5), y(this, e + 3, e + 4);}return this;}, u.prototype.toString = function () {var t = 0 | this.length;return 0 === t ? \"\" : 0 === arguments.length ? B(this, 0, t) : function (t, e, r) {var n = !1;if ((void 0 === e || e < 0) && (e = 0), e > this.length) return \"\";if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return \"\";if ((r >>>= 0) <= (e >>>= 0)) return \"\";for (t || (t = \"utf8\");;) {switch (t) {case \"hex\":return T(this, e, r);case \"utf8\":case \"utf-8\":return B(this, e, r);case \"ascii\":return P(this, e, r);case \"latin1\":case \"binary\":return S(this, e, r);case \"base64\":return k(this, e, r);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return O(this, e, r);default:if (n) throw new TypeError(\"Unknown encoding: \" + t);t = (t + \"\").toLowerCase(), n = !0;}}}.apply(this, arguments);}, u.prototype.equals = function (t) {if (!u.isBuffer(t)) throw new TypeError(\"Argument must be a Buffer\");return this === t || 0 === u.compare(this, t);}, u.prototype.inspect = function () {var t = \"\",r = e.INSPECT_MAX_BYTES;return this.length > 0 && (t = this.toString(\"hex\", 0, r).match(/.{2}/g).join(\" \"), this.length > r && (t += \" ... \")), \"<Buffer \" + t + \">\";}, u.prototype.compare = function (t, e, r, n, o) {if (!u.isBuffer(t)) throw new TypeError(\"Argument must be a Buffer\");if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === n && (n = 0), void 0 === o && (o = this.length), e < 0 || r > t.length || n < 0 || o > this.length) throw new RangeError(\"out of range index\");if (n >= o && e >= r) return 0;if (n >= o) return -1;if (e >= r) return 1;if (this === t) return 0;for (var i = (o >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (e >>>= 0), a = Math.min(i, s), c = this.slice(n, o), f = t.slice(e, r), h = 0; h < a; ++h) {if (c[h] !== f[h]) {i = c[h], s = f[h];break;}}return i < s ? -1 : s < i ? 1 : 0;}, u.prototype.includes = function (t, e, r) {return -1 !== this.indexOf(t, e, r);}, u.prototype.indexOf = function (t, e, r) {return g(this, t, e, r, !0);}, u.prototype.lastIndexOf = function (t, e, r) {return g(this, t, e, r, !1);}, u.prototype.write = function (t, e, r, n) {if (void 0 === e) n = \"utf8\", r = this.length, e = 0;else if (void 0 === r && \"string\" == typeof e) n = e, r = this.length, e = 0;else {if (!isFinite(e)) throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");e |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = \"utf8\")) : (n = r, r = void 0);}var o = this.length - e;if ((void 0 === r || r > o) && (r = o), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");n || (n = \"utf8\");for (var i = !1;;) {switch (n) {case \"hex\":return b(this, t, e, r);case \"utf8\":case \"utf-8\":return m(this, t, e, r);case \"ascii\":return w(this, t, e, r);case \"latin1\":case \"binary\":return A(this, t, e, r);case \"base64\":return _(this, t, e, r);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return E(this, t, e, r);default:if (i) throw new TypeError(\"Unknown encoding: \" + n);n = (\"\" + n).toLowerCase(), i = !0;}}}, u.prototype.toJSON = function () {return { type: \"Buffer\", data: Array.prototype.slice.call(this._arr || this, 0) };};var R = 4096;function P(t, e, r) {var n = \"\";r = Math.min(t.length, r);for (var o = e; o < r; ++o) {n += String.fromCharCode(127 & t[o]);}return n;}function S(t, e, r) {var n = \"\";r = Math.min(t.length, r);for (var o = e; o < r; ++o) {n += String.fromCharCode(t[o]);}return n;}function T(t, e, r) {var n = t.length;(!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);for (var o = \"\", i = e; i < r; ++i) {o += D(t[i]);}return o;}function O(t, e, r) {for (var n = t.slice(e, r), o = \"\", i = 0; i < n.length; i += 2) {o += String.fromCharCode(n[i] + 256 * n[i + 1]);}return o;}function x(t, e, r) {if (t % 1 != 0 || t < 0) throw new RangeError(\"offset is not uint\");if (t + e > r) throw new RangeError(\"Trying to access beyond buffer length\");}function C(t, e, r, n, o, i) {if (!u.isBuffer(t)) throw new TypeError('\"buffer\" argument must be a Buffer instance');if (e > o || e < i) throw new RangeError('\"value\" argument is out of bounds');if (r + n > t.length) throw new RangeError(\"Index out of range\");}function U(t, e, r, n) {e < 0 && (e = 65535 + e + 1);for (var o = 0, i = Math.min(t.length - r, 2); o < i; ++o) {t[r + o] = (e & 255 << 8 * (n ? o : 1 - o)) >>> 8 * (n ? o : 1 - o);}}function L(t, e, r, n) {e < 0 && (e = 4294967295 + e + 1);for (var o = 0, i = Math.min(t.length - r, 4); o < i; ++o) {t[r + o] = e >>> 8 * (n ? o : 3 - o) & 255;}}function I(t, e, r, n, o, i) {if (r + n > t.length) throw new RangeError(\"Index out of range\");if (r < 0) throw new RangeError(\"Index out of range\");}function N(t, e, r, n, i) {return i || I(t, 0, r, 4), o.write(t, e, r, n, 23, 4), r + 4;}function M(t, e, r, n, i) {return i || I(t, 0, r, 8), o.write(t, e, r, n, 52, 8), r + 8;}u.prototype.slice = function (t, e) {var r,n = this.length;if ((t = ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), (e = void 0 === e ? n : ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), e < t && (e = t), u.TYPED_ARRAY_SUPPORT) (r = this.subarray(t, e)).__proto__ = u.prototype;else {var o = e - t;r = new u(o, void 0);for (var i = 0; i < o; ++i) {r[i] = this[i + t];}}return r;}, u.prototype.readUIntLE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t], o = 1, i = 0; ++i < e && (o *= 256);) {n += this[t + i] * o;}return n;}, u.prototype.readUIntBE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t + --e], o = 1; e > 0 && (o *= 256);) {n += this[t + --e] * o;}return n;}, u.prototype.readUInt8 = function (t, e) {return e || x(t, 1, this.length), this[t];}, u.prototype.readUInt16LE = function (t, e) {return e || x(t, 2, this.length), this[t] | this[t + 1] << 8;}, u.prototype.readUInt16BE = function (t, e) {return e || x(t, 2, this.length), this[t] << 8 | this[t + 1];}, u.prototype.readUInt32LE = function (t, e) {return e || x(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];}, u.prototype.readUInt32BE = function (t, e) {return e || x(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);}, u.prototype.readIntLE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t], o = 1, i = 0; ++i < e && (o *= 256);) {n += this[t + i] * o;}return n >= (o *= 128) && (n -= Math.pow(2, 8 * e)), n;}, u.prototype.readIntBE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = e, o = 1, i = this[t + --n]; n > 0 && (o *= 256);) {i += this[t + --n] * o;}return i >= (o *= 128) && (i -= Math.pow(2, 8 * e)), i;}, u.prototype.readInt8 = function (t, e) {return e || x(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];}, u.prototype.readInt16LE = function (t, e) {e || x(t, 2, this.length);var r = this[t] | this[t + 1] << 8;return 32768 & r ? 4294901760 | r : r;}, u.prototype.readInt16BE = function (t, e) {e || x(t, 2, this.length);var r = this[t + 1] | this[t] << 8;return 32768 & r ? 4294901760 | r : r;}, u.prototype.readInt32LE = function (t, e) {return e || x(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;}, u.prototype.readInt32BE = function (t, e) {return e || x(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];}, u.prototype.readFloatLE = function (t, e) {return e || x(t, 4, this.length), o.read(this, t, !0, 23, 4);}, u.prototype.readFloatBE = function (t, e) {return e || x(t, 4, this.length), o.read(this, t, !1, 23, 4);}, u.prototype.readDoubleLE = function (t, e) {return e || x(t, 8, this.length), o.read(this, t, !0, 52, 8);}, u.prototype.readDoubleBE = function (t, e) {return e || x(t, 8, this.length), o.read(this, t, !1, 52, 8);}, u.prototype.writeUIntLE = function (t, e, r, n) {t = +t, e |= 0, r |= 0, n || C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);var o = 1,i = 0;for (this[e] = 255 & t; ++i < r && (o *= 256);) {this[e + i] = t / o & 255;}return e + r;}, u.prototype.writeUIntBE = function (t, e, r, n) {t = +t, e |= 0, r |= 0, n || C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);var o = r - 1,i = 1;for (this[e + o] = 255 & t; --o >= 0 && (i *= 256);) {this[e + o] = t / i & 255;}return e + r;}, u.prototype.writeUInt8 = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1;}, u.prototype.writeUInt16LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : U(this, t, e, !0), e + 2;}, u.prototype.writeUInt16BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : U(this, t, e, !1), e + 2;}, u.prototype.writeUInt32LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : L(this, t, e, !0), e + 4;}, u.prototype.writeUInt32BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : L(this, t, e, !1), e + 4;}, u.prototype.writeIntLE = function (t, e, r, n) {if (t = +t, e |= 0, !n) {var o = Math.pow(2, 8 * r - 1);C(this, t, e, r, o - 1, -o);}var i = 0,s = 1,a = 0;for (this[e] = 255 & t; ++i < r && (s *= 256);) {t < 0 && 0 === a && 0 !== this[e + i - 1] && (a = 1), this[e + i] = (t / s >> 0) - a & 255;}return e + r;}, u.prototype.writeIntBE = function (t, e, r, n) {if (t = +t, e |= 0, !n) {var o = Math.pow(2, 8 * r - 1);C(this, t, e, r, o - 1, -o);}var i = r - 1,s = 1,a = 0;for (this[e + i] = 255 & t; --i >= 0 && (s *= 256);) {t < 0 && 0 === a && 0 !== this[e + i + 1] && (a = 1), this[e + i] = (t / s >> 0) - a & 255;}return e + r;}, u.prototype.writeInt8 = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;}, u.prototype.writeInt16LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : U(this, t, e, !0), e + 2;}, u.prototype.writeInt16BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : U(this, t, e, !1), e + 2;}, u.prototype.writeInt32LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : L(this, t, e, !0), e + 4;}, u.prototype.writeInt32BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : L(this, t, e, !1), e + 4;}, u.prototype.writeFloatLE = function (t, e, r) {return N(this, t, e, !0, r);}, u.prototype.writeFloatBE = function (t, e, r) {return N(this, t, e, !1, r);}, u.prototype.writeDoubleLE = function (t, e, r) {return M(this, t, e, !0, r);}, u.prototype.writeDoubleBE = function (t, e, r) {return M(this, t, e, !1, r);}, u.prototype.copy = function (t, e, r, n) {if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), n === r) return 0;if (0 === t.length || 0 === this.length) return 0;if (e < 0) throw new RangeError(\"targetStart out of bounds\");if (r < 0 || r >= this.length) throw new RangeError(\"sourceStart out of bounds\");if (n < 0) throw new RangeError(\"sourceEnd out of bounds\");n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);var o,i = n - r;if (this === t && r < e && e < n) for (o = i - 1; o >= 0; --o) {t[o + e] = this[o + r];} else if (i < 1e3 || !u.TYPED_ARRAY_SUPPORT) for (o = 0; o < i; ++o) {t[o + e] = this[o + r];} else Uint8Array.prototype.set.call(t, this.subarray(r, r + i), e);return i;}, u.prototype.fill = function (t, e, r, n) {if (\"string\" == typeof t) {if (\"string\" == typeof e ? (n = e, e = 0, r = this.length) : \"string\" == typeof r && (n = r, r = this.length), 1 === t.length) {var o = t.charCodeAt(0);o < 256 && (t = o);}if (void 0 !== n && \"string\" != typeof n) throw new TypeError(\"encoding must be a string\");if (\"string\" == typeof n && !u.isEncoding(n)) throw new TypeError(\"Unknown encoding: \" + n);} else \"number\" == typeof t && (t &= 255);if (e < 0 || this.length < e || this.length < r) throw new RangeError(\"Out of range index\");if (r <= e) return this;var i;if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), \"number\" == typeof t) for (i = e; i < r; ++i) {this[i] = t;} else {var s = u.isBuffer(t) ? t : j(new u(t, n).toString()),a = s.length;for (i = 0; i < r - e; ++i) {this[i + e] = s[i % a];}}return this;};var Y = /[^+\\/0-9A-Za-z-_]/g;function D(t) {return t < 16 ? \"0\" + t.toString(16) : t.toString(16);}function j(t, e) {var r;e = e || 1 / 0;for (var n = t.length, o = null, i = [], s = 0; s < n; ++s) {if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {if (!o) {if (r > 56319) {(e -= 3) > -1 && i.push(239, 191, 189);continue;}if (s + 1 === n) {(e -= 3) > -1 && i.push(239, 191, 189);continue;}o = r;continue;}if (r < 56320) {(e -= 3) > -1 && i.push(239, 191, 189), o = r;continue;}r = 65536 + (o - 55296 << 10 | r - 56320);} else o && (e -= 3) > -1 && i.push(239, 191, 189);if (o = null, r < 128) {if ((e -= 1) < 0) break;i.push(r);} else if (r < 2048) {if ((e -= 2) < 0) break;i.push(r >> 6 | 192, 63 & r | 128);} else if (r < 65536) {if ((e -= 3) < 0) break;i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);} else {if (!(r < 1114112)) throw new Error(\"Invalid code point\");if ((e -= 4) < 0) break;i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);}}return i;}function q(t) {return n.toByteArray(function (t) {if ((t = function (t) {return t.trim ? t.trim() : t.replace(/^\\s+|\\s+$/g, \"\");}(t).replace(Y, \"\")).length < 2) return \"\";for (; t.length % 4 != 0;) {t += \"=\";}return t;}(t));}function F(t, e, r, n) {for (var o = 0; o < n && !(o + r >= e.length || o >= t.length); ++o) {e[o + r] = t[o];}return o;}}).call(this, r(1));}, function (t, e, r) {(function (e) {var n = r(2),o = Object.prototype.toString,i = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === o.call(Blob),s = \"function\" == typeof File || \"undefined\" != typeof File && \"[object FileConstructor]\" === o.call(File);t.exports = function t(r) {if (!r || \"object\" != typeof r) return !1;if (n(r)) {for (var o = 0, a = r.length; o < a; o++) {if (t(r[o])) return !0;}return !1;}if (\"function\" == typeof e && e.isBuffer && e.isBuffer(r) || \"function\" == typeof ArrayBuffer && r instanceof ArrayBuffer || i && r instanceof Blob || s && r instanceof File) return !0;if (r.toJSON && \"function\" == typeof r.toJSON && 1 === arguments.length) return t(r.toJSON(), !0);for (var u in r) {if (Object.prototype.hasOwnProperty.call(r, u) && t(r[u])) return !0;}return !1;};}).call(this, r(15).Buffer);}, function (t, e) {e.encode = function (t) {var e = \"\";for (var r in t) {t.hasOwnProperty(r) && (e.length && (e += \"&\"), e += encodeURIComponent(r) + \"=\" + encodeURIComponent(t[r]));}return e;}, e.decode = function (t) {for (var e = {}, r = t.split(\"&\"), n = 0, o = r.length; n < o; n++) {var i = r[n].split(\"=\");e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);}return e;};}, function (t, e) {t.exports = function (t, e) {for (var r = [], n = (e = e || 0) || 0; n < t.length; n++) {r[n - e] = t[n];}return r;};}, function (t, e, r) {window, t.exports = function (t) {var e = {};function r(n) {if (e[n]) return e[n].exports;var o = e[n] = { i: n, l: !1, exports: {} };return t[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;}return r.m = t, r.c = e, r.d = function (t, e, n) {r.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: n });}, r.r = function (t) {\"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t, \"__esModule\", { value: !0 });}, r.t = function (t, e) {if (1 & e && (t = r(t)), 8 & e) return t;if (4 & e && \"object\" == typeof t && t && t.__esModule) return t;var n = Object.create(null);if (r.r(n), Object.defineProperty(n, \"default\", { enumerable: !0, value: t }), 2 & e && \"string\" != typeof t) for (var o in t) {r.d(n, o, function (e) {return t[e];}.bind(null, o));}return n;}, r.n = function (t) {var e = t && t.__esModule ? function () {return t.default;} : function () {return t;};return r.d(e, \"a\", e), e;}, r.o = function (t, e) {return Object.prototype.hasOwnProperty.call(t, e);}, r.p = \"\", r(r.s = 29);}([function (t, e) {var r;r = function () {return this;}();try {r = r || Function(\"return this\")() || (0, eval)(\"this\");} catch (t) {\"object\" == typeof window && (r = window);}t.exports = r;}, function (t, e, r) {(function (t) {var n,o = r(26),i = r(25),s = r(19),a = r(18),u = r(17);t && t.ArrayBuffer && (n = r(15));var c = \"undefined\" != typeof navigator && /Android/i.test(navigator.userAgent),f = \"undefined\" != typeof navigator && /PhantomJS/i.test(navigator.userAgent),h = c || f;e.protocol = 3;var p = e.packets = { open: 0, close: 1, ping: 2, pong: 3, message: 4, upgrade: 5, noop: 6 },l = o(p),d = { type: \"error\", data: \"parser error\" },y = r(14);function g(t, e, r) {for (var n = new Array(t.length), o = a(t.length, r), i = function i(t, r, o) {e(r, function (e, r) {n[t] = r, o(e, n);});}, s = 0; s < t.length; s++) {i(s, t[s], o);}}e.encodePacket = function (r, n, o, i) {\"function\" == typeof n && (i = n, n = !1), \"function\" == typeof o && (i = o, o = null);var s = void 0 === r.data ? void 0 : r.data.buffer || r.data;if (t.ArrayBuffer && s instanceof ArrayBuffer) return function (t, r, n) {if (!r) return e.encodeBase64Packet(t, n);var o = t.data,i = new Uint8Array(o),s = new Uint8Array(1 + o.byteLength);s[0] = p[t.type];for (var a = 0; a < i.length; a++) {s[a + 1] = i[a];}return n(s.buffer);}(r, n, i);if (y && s instanceof t.Blob) return function (t, r, n) {if (!r) return e.encodeBase64Packet(t, n);if (h) return function (t, r, n) {if (!r) return e.encodeBase64Packet(t, n);var o = new FileReader();return o.onload = function () {t.data = o.result, e.encodePacket(t, r, !0, n);}, o.readAsArrayBuffer(t.data);}(t, r, n);var o = new Uint8Array(1);return o[0] = p[t.type], n(new y([o.buffer, t.data]));}(r, n, i);if (s && s.base64) return function (t, r) {return i(\"b\" + e.packets[t.type] + t.data.data);}(r);var a = p[r.type];return void 0 !== r.data && (a += o ? u.encode(String(r.data), { strict: !1 }) : String(r.data)), i(\"\" + a);}, e.encodeBase64Packet = function (r, n) {var o,i = \"b\" + e.packets[r.type];if (y && r.data instanceof t.Blob) {var s = new FileReader();return s.onload = function () {var t = s.result.split(\",\")[1];n(i + t);}, s.readAsDataURL(r.data);}try {o = String.fromCharCode.apply(null, new Uint8Array(r.data));} catch (t) {for (var a = new Uint8Array(r.data), u = new Array(a.length), c = 0; c < a.length; c++) {u[c] = a[c];}o = String.fromCharCode.apply(null, u);}return i += t.btoa(o), n(i);}, e.decodePacket = function (t, r, n) {if (void 0 === t) return d;if (\"string\" == typeof t) {if (\"b\" === t.charAt(0)) return e.decodeBase64Packet(t.substr(1), r);if (n && !1 === (t = function (t) {try {t = u.decode(t, { strict: !1 });} catch (t) {return !1;}return t;}(t))) return d;var o = t.charAt(0);return Number(o) == o && l[o] ? t.length > 1 ? { type: l[o], data: t.substring(1) } : { type: l[o] } : d;}o = new Uint8Array(t)[0];var i = s(t, 1);return y && \"blob\" === r && (i = new y([i])), { type: l[o], data: i };}, e.decodeBase64Packet = function (t, e) {var r = l[t.charAt(0)];if (!n) return { type: r, data: { base64: !0, data: t.substr(1) } };var o = n.decode(t.substr(1));return \"blob\" === e && y && (o = new y([o])), { type: r, data: o };}, e.encodePayload = function (t, r, n) {\"function\" == typeof r && (n = r, r = null);var o = i(t);return r && o ? y && !h ? e.encodePayloadAsBlob(t, n) : e.encodePayloadAsArrayBuffer(t, n) : t.length ? void g(t, function (t, n) {e.encodePacket(t, !!o && r, !1, function (t) {n(null, function (t) {return t.length + \":\" + t;}(t));});}, function (t, e) {return n(e.join(\"\"));}) : n(\"0:\");}, e.decodePayload = function (t, r, n) {if (\"string\" != typeof t) return e.decodePayloadAsBinary(t, r, n);var o;if (\"function\" == typeof r && (n = r, r = null), \"\" === t) return n(d, 0, 1);for (var i, s, a = \"\", u = 0, c = t.length; u < c; u++) {var f = t.charAt(u);if (\":\" === f) {if (\"\" === a || a != (i = Number(a))) return n(d, 0, 1);if (a != (s = t.substr(u + 1, i)).length) return n(d, 0, 1);if (s.length) {if (o = e.decodePacket(s, r, !1), d.type === o.type && d.data === o.data) return n(d, 0, 1);if (!1 === n(o, u + i, c)) return;}u += i, a = \"\";} else a += f;}return \"\" !== a ? n(d, 0, 1) : void 0;}, e.encodePayloadAsArrayBuffer = function (t, r) {if (!t.length) return r(new ArrayBuffer(0));g(t, function (t, r) {e.encodePacket(t, !0, !0, function (t) {return r(null, t);});}, function (t, e) {var n = e.reduce(function (t, e) {var r;return t + (r = \"string\" == typeof e ? e.length : e.byteLength).toString().length + r + 2;}, 0),o = new Uint8Array(n),i = 0;return e.forEach(function (t) {var e = \"string\" == typeof t,r = t;if (e) {for (var n = new Uint8Array(t.length), s = 0; s < t.length; s++) {n[s] = t.charCodeAt(s);}r = n.buffer;}o[i++] = e ? 0 : 1;var a = r.byteLength.toString();for (s = 0; s < a.length; s++) {o[i++] = parseInt(a[s]);}for (o[i++] = 255, n = new Uint8Array(r), s = 0; s < n.length; s++) {o[i++] = n[s];}}), r(o.buffer);});}, e.encodePayloadAsBlob = function (t, r) {g(t, function (t, r) {e.encodePacket(t, !0, !0, function (t) {var e = new Uint8Array(1);if (e[0] = 1, \"string\" == typeof t) {for (var n = new Uint8Array(t.length), o = 0; o < t.length; o++) {n[o] = t.charCodeAt(o);}t = n.buffer, e[0] = 0;}var i = (t instanceof ArrayBuffer ? t.byteLength : t.size).toString(),s = new Uint8Array(i.length + 1);for (o = 0; o < i.length; o++) {s[o] = parseInt(i[o]);}if (s[i.length] = 255, y) {var a = new y([e.buffer, s.buffer, t]);r(null, a);}});}, function (t, e) {return r(new y(e));});}, e.decodePayloadAsBinary = function (t, r, n) {\"function\" == typeof r && (n = r, r = null);for (var o = t, i = []; o.byteLength > 0;) {for (var a = new Uint8Array(o), u = 0 === a[0], c = \"\", f = 1; 255 !== a[f]; f++) {if (c.length > 310) return n(d, 0, 1);c += a[f];}o = s(o, 2 + c.length), c = parseInt(c);var h = s(o, 0, c);if (u) try {h = String.fromCharCode.apply(null, new Uint8Array(h));} catch (t) {var p = new Uint8Array(h);for (h = \"\", f = 0; f < p.length; f++) {h += String.fromCharCode(p[f]);}}i.push(h), o = s(o, c);}var l = i.length;i.forEach(function (t, o) {n(e.decodePacket(t, r, !0), o, l);});};}).call(this, r(0));}, function (t, e) {t.exports = function () {return function () {};};}, function (t, e) {e.encode = function (t) {var e = \"\";for (var r in t) {t.hasOwnProperty(r) && (e.length && (e += \"&\"), e += encodeURIComponent(r) + \"=\" + encodeURIComponent(t[r]));}return e;}, e.decode = function (t) {for (var e = {}, r = t.split(\"&\"), n = 0, o = r.length; n < o; n++) {var i = r[n].split(\"=\");e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);}return e;};}, function (t, e, r) {function n(t) {if (t) return function (t) {for (var e in n.prototype) {t[e] = n.prototype[e];}return t;}(t);}t.exports = n, n.prototype.on = n.prototype.addEventListener = function (t, e) {return this._callbacks = this._callbacks || {}, (this._callbacks[\"$\" + t] = this._callbacks[\"$\" + t] || []).push(e), this;}, n.prototype.once = function (t, e) {function r() {this.off(t, r), e.apply(this, arguments);}return r.fn = e, this.on(t, r), this;}, n.prototype.off = n.prototype.removeListener = n.prototype.removeAllListeners = n.prototype.removeEventListener = function (t, e) {if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;var r,n = this._callbacks[\"$\" + t];if (!n) return this;if (1 == arguments.length) return delete this._callbacks[\"$\" + t], this;for (var o = 0; o < n.length; o++) {if ((r = n[o]) === e || r.fn === e) {n.splice(o, 1);break;}}return this;}, n.prototype.emit = function (t) {this._callbacks = this._callbacks || {};var e = [].slice.call(arguments, 1),r = this._callbacks[\"$\" + t];if (r) for (var n = 0, o = (r = r.slice(0)).length; n < o; ++n) {r[n].apply(this, e);}return this;}, n.prototype.listeners = function (t) {return this._callbacks = this._callbacks || {}, this._callbacks[\"$\" + t] || [];}, n.prototype.hasListeners = function (t) {return !!this.listeners(t).length;};}, function (t, e, r) {var n = r(1),o = r(4);function i(t) {this.path = t.path, this.hostname = t.hostname, this.port = t.port, this.secure = t.secure, this.query = t.query, this.timestampParam = t.timestampParam, this.timestampRequests = t.timestampRequests, this.readyState = \"\", this.agent = t.agent || !1, this.socket = t.socket, this.enablesXDR = t.enablesXDR, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, this.forceNode = t.forceNode, this.extraHeaders = t.extraHeaders, this.localAddress = t.localAddress;}t.exports = i, o(i.prototype), i.prototype.onError = function (t, e) {var r = new Error(t);return r.type = \"TransportError\", r.description = e, this.emit(\"error\", r), this;}, i.prototype.open = function () {return \"closed\" !== this.readyState && \"\" !== this.readyState || (this.readyState = \"opening\", this.doOpen()), this;}, i.prototype.close = function () {return \"opening\" !== this.readyState && \"open\" !== this.readyState || (this.doClose(), this.onClose()), this;}, i.prototype.send = function (t) {if (\"open\" !== this.readyState) throw new Error(\"Transport not open\");this.write(t);}, i.prototype.onOpen = function () {this.readyState = \"open\", this.writable = !0, this.emit(\"open\");}, i.prototype.onData = function (t) {var e = n.decodePacket(t, this.socket.binaryType);this.onPacket(e);}, i.prototype.onPacket = function (t) {this.emit(\"packet\", t);}, i.prototype.onClose = function () {this.readyState = \"closed\", this.emit(\"close\");};}, function (t, e, r) {var n = r(27);e.websocket = n;}, function (t, e) {var r = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,n = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];t.exports = function (t) {var e = t,o = t.indexOf(\"[\"),i = t.indexOf(\"]\");-1 != o && -1 != i && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, \";\") + t.substring(i, t.length));for (var s = r.exec(t || \"\"), a = {}, u = 14; u--;) {a[n[u]] = s[u] || \"\";}return -1 != o && -1 != i && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, \":\"), a.authority = a.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\"), a.ipv6uri = !0), a;};}, function (t, e) {var r = [].indexOf;t.exports = function (t, e) {if (r) return t.indexOf(e);for (var n = 0; n < t.length; ++n) {if (t[n] === e) return n;}return -1;};}, function (t, e, r) {\"use strict\";var n = function n(t, e) {_classCallCheck(this, n);this.target = e, this.type = t;};var o = /*#__PURE__*/function (_n) {_inherits(o, _n);function o(t, e) {var _this;_classCallCheck(this, o);_this = _possibleConstructorReturn(this, _getPrototypeOf(o).call(this, \"message\", e)), _this.data = t;return _this;}return o;}(n);var i = /*#__PURE__*/function (_n2) {_inherits(i, _n2);function i(t, e, r) {var _this2;_classCallCheck(this, i);_this2 = _possibleConstructorReturn(this, _getPrototypeOf(i).call(this, \"close\", r)), _this2.wasClean = r._closeFrameReceived && r._closeFrameSent, _this2.reason = e, _this2.code = t;return _this2;}return i;}(n);var s = /*#__PURE__*/function (_n3) {_inherits(s, _n3);function s(t) {_classCallCheck(this, s);return _possibleConstructorReturn(this, _getPrototypeOf(s).call(this, \"open\", t));}return s;}(n);var a = /*#__PURE__*/function (_n4) {_inherits(a, _n4);function a(t, e) {var _this3;_classCallCheck(this, a);_this3 = _possibleConstructorReturn(this, _getPrototypeOf(a).call(this, \"error\", e)), _this3.message = t.message, _this3.error = t;return _this3;}return a;}(n);var u = { addEventListener: function addEventListener(t, e) {function r(t) {e.call(this, new o(t, this));}function n(t, r) {e.call(this, new i(t, r, this));}function u(t) {e.call(this, new a(t, this));}function c() {e.call(this, new s(this));}\"function\" == typeof e && (\"message\" === t ? (r._listener = e, this.on(t, r)) : \"close\" === t ? (n._listener = e, this.on(t, n)) : \"error\" === t ? (u._listener = e, this.on(t, u)) : \"open\" === t ? (c._listener = e, this.on(t, c)) : this.on(t, e));}, removeEventListener: function removeEventListener(t, e) {var r = this.listeners(t);for (var n = 0; n < r.length; n++) {r[n] !== e && r[n]._listener !== e || this.removeListener(t, r[n]);}} };t.exports = u;}, function (t, e) {function r() {this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;}function n(t) {return \"function\" == typeof t;}function o(t) {return \"object\" == typeof t && null !== t;}function i(t) {return void 0 === t;}t.exports = r, r.EventEmitter = r, r.prototype._events = void 0, r.prototype._maxListeners = void 0, r.defaultMaxListeners = 10, r.prototype.setMaxListeners = function (t) {if (\"number\" != typeof t || t < 0 || isNaN(t)) throw TypeError(\"n must be a positive number\");return this._maxListeners = t, this;}, r.prototype.emit = function (t) {var e, r, s, a, u, c;if (this._events || (this._events = {}), \"error\" === t && (!this._events.error || o(this._events.error) && !this._events.error.length)) {if ((e = arguments[1]) instanceof Error) throw e;var f = new Error('Uncaught, unspecified \"error\" event. (' + e + \")\");throw f.context = e, f;}if (i(r = this._events[t])) return !1;if (n(r)) switch (arguments.length) {case 1:r.call(this);break;case 2:r.call(this, arguments[1]);break;case 3:r.call(this, arguments[1], arguments[2]);break;default:a = Array.prototype.slice.call(arguments, 1), r.apply(this, a);} else if (o(r)) for (a = Array.prototype.slice.call(arguments, 1), s = (c = r.slice()).length, u = 0; u < s; u++) {c[u].apply(this, a);}return !0;}, r.prototype.addListener = function (t, e) {var s;if (!n(e)) throw TypeError(\"listener must be a function\");return this._events || (this._events = {}), this._events.newListener && this.emit(\"newListener\", t, n(e.listener) ? e.listener : e), this._events[t] ? o(this._events[t]) ? this._events[t].push(e) : this._events[t] = [this._events[t], e] : this._events[t] = e, o(this._events[t]) && !this._events[t].warned && (s = i(this._maxListeners) ? r.defaultMaxListeners : this._maxListeners) && s > 0 && this._events[t].length > s && (this._events[t].warned = !0, console.error(__f__(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\", this._events[t].length, \" at lib\\\\polyv\\\\common\\\\utils\\\\weapp.socket.io.js:1\")), \"function\" == typeof console.trace && console.trace()), this;}, r.prototype.on = r.prototype.addListener, r.prototype.once = function (t, e) {if (!n(e)) throw TypeError(\"listener must be a function\");var r = !1;function o() {this.removeListener(t, o), r || (r = !0, e.apply(this, arguments));}return o.listener = e, this.on(t, o), this;}, r.prototype.removeListener = function (t, e) {var r, i, s, a;if (!n(e)) throw TypeError(\"listener must be a function\");if (!this._events || !this._events[t]) return this;if (s = (r = this._events[t]).length, i = -1, r === e || n(r.listener) && r.listener === e) delete this._events[t], this._events.removeListener && this.emit(\"removeListener\", t, e);else if (o(r)) {for (a = s; a-- > 0;) {if (r[a] === e || r[a].listener && r[a].listener === e) {i = a;break;}}if (i < 0) return this;1 === r.length ? (r.length = 0, delete this._events[t]) : r.splice(i, 1), this._events.removeListener && this.emit(\"removeListener\", t, e);}return this;}, r.prototype.removeAllListeners = function (t) {var e, r;if (!this._events) return this;if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[t] && delete this._events[t], this;if (0 === arguments.length) {for (e in this._events) {\"removeListener\" !== e && this.removeAllListeners(e);}return this.removeAllListeners(\"removeListener\"), this._events = {}, this;}if (n(r = this._events[t])) this.removeListener(t, r);else if (r) for (; r.length;) {this.removeListener(t, r[r.length - 1]);}return delete this._events[t], this;}, r.prototype.listeners = function (t) {return this._events && this._events[t] ? n(this._events[t]) ? [this._events[t]] : this._events[t].slice() : [];}, r.prototype.listenerCount = function (t) {if (this._events) {var e = this._events[t];if (n(e)) return 1;if (e) return e.length;}return 0;}, r.listenerCount = function (t, e) {return t.listenerCount(e);};}, function (t, e, r) {var n = r(10),o = r(9),i = r(2)(\"weapp-socket:\"),s = [\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"];var a = /*#__PURE__*/function (_n5) {_inherits(a, _n5);function a(t, e, r) {var _this4;_classCallCheck(this, a);_this4 = _possibleConstructorReturn(this, _getPrototypeOf(a).call(this)), _this4.readyState = a.CONNECTING, _this4.protocol = \"\", _this4._socket = null, null !== t && (Array.isArray(e) ? e = e.join(\", \") : \"object\" == typeof e && null !== e && (r = e, e = void 0), function (t, e, r) {Object.assign(r, { url: t, header: { \"content-type\": \"application/json\" }, protocols: e, method: \"GET\" }), this._socket = function (t) {var e = wx.connectSocket(t);return i(\"socketTask: \", e), e || { onClose: wx.onSocketClose, onOpen: wx.onSocketOpen, onError: wx.onSocketError, onMessage: wx.onSocketMessage, send: wx.sendSocketMessage, close: wx.closeSocket };}(r), this.addSocketEventListeners();}.call(_assertThisInitialized(_assertThisInitialized(_this4)), t, e, r));return _this4;}_createClass(a, [{ key: \"addSocketEventListeners\", value: function addSocketEventListeners() {var _this5 = this;this._socket.onOpen(function () {_this5.readyState = a.OPEN, _this5.onopen();}), this._socket.onClose(function (t) {i(\"onclose: \", t), _this5.readyState = a.CLOSED, _this5.onclose(t.code, t.reason);}), this._socket.onError(function (t) {i(\"onerror: \", t), _this5.onerror(t);}), this._socket.onMessage(function (t) {_this5.onmessage(t);});} }, { key: \"send\", value: function send(t) {i(\"send data: \", t, this.readyState), this.readyState === a.OPEN && this._socket.send({ data: t });} }, { key: \"close\", value: function close(t, e) {i(\"close socket: \", t, e), this.readyState = a.CLOSING, this._socket.close({ code: t, reason: e });} }, { key: \"CONNECTING\", get: function get() {return a.CONNECTING;} }, { key: \"CLOSING\", get: function get() {return a.CLOSING;} }, { key: \"CLOSED\", get: function get() {return a.CLOSED;} }, { key: \"OPEN\", get: function get() {return a.OPEN;} }]);return a;}(n);s.forEach(function (t, e) {a[s[e]] = e;}), [\"open\", \"error\", \"close\", \"message\"].forEach(function (t) {Object.defineProperty(a.prototype, \"on\".concat(t), { get: function get() {var e = this.listeners(t);for (var r = 0; r < e.length; r++) {if (e[r]._listener) return e[r]._listener;}}, set: function set(e) {var r = this.listeners(t);for (var n = 0; n < r.length; n++) {r[n]._listener && this.removeListener(t, r[n]);}this.addEventListener(t, e);} });}), a.prototype.addEventListener = o.addEventListener, a.prototype.removeEventListener = o.removeEventListener, t.exports = a;}, function (t, e, r) {\"use strict\";var n,o = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"),i = 64,s = {},a = 0,u = 0;function c(t) {var e = \"\";do {e = o[t % i] + e, t = Math.floor(t / i);} while (t > 0);return e;}function f() {var t = c(+new Date());return t !== n ? (a = 0, n = t) : t + \".\" + c(a++);}for (; u < i; u++) {s[o[u]] = u;}f.encode = c, f.decode = function (t) {var e = 0;for (u = 0; u < t.length; u++) {e = e * i + s[t.charAt(u)];}return e;}, t.exports = f;}, function (t, e) {t.exports = function (t, e) {var r = function r() {};r.prototype = e.prototype, t.prototype = new r(), t.prototype.constructor = t;};}, function (t, e, r) {(function (e) {var r = e.BlobBuilder || e.WebKitBlobBuilder || e.MSBlobBuilder || e.MozBlobBuilder,n = function () {try {return 2 === new Blob([\"hi\"]).size;} catch (t) {return !1;}}(),o = n && function () {try {return 2 === new Blob([new Uint8Array([1, 2])]).size;} catch (t) {return !1;}}(),i = r && r.prototype.append && r.prototype.getBlob;function s(t) {for (var e = 0; e < t.length; e++) {var r = t[e];if (r.buffer instanceof ArrayBuffer) {var n = r.buffer;if (r.byteLength !== n.byteLength) {var o = new Uint8Array(r.byteLength);o.set(new Uint8Array(n, r.byteOffset, r.byteLength)), n = o.buffer;}t[e] = n;}}}t.exports = n ? o ? e.Blob : function (t, e) {return s(t), new Blob(t, e || {});} : i ? function (t, e) {e = e || {};var n = new r();s(t);for (var o = 0; o < t.length; o++) {n.append(t[o]);}return e.type ? n.getBlob(e.type) : n.getBlob();} : void 0;}).call(this, r(0));}, function (t, e) {!function () {\"use strict\";for (var t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", r = new Uint8Array(256), n = 0; n < t.length; n++) {r[t.charCodeAt(n)] = n;}e.encode = function (e) {var r,n = new Uint8Array(e),o = n.length,i = \"\";for (r = 0; r < o; r += 3) {i += t[n[r] >> 2], i += t[(3 & n[r]) << 4 | n[r + 1] >> 4], i += t[(15 & n[r + 1]) << 2 | n[r + 2] >> 6], i += t[63 & n[r + 2]];}return o % 3 == 2 ? i = i.substring(0, i.length - 1) + \"=\" : o % 3 == 1 && (i = i.substring(0, i.length - 2) + \"==\"), i;}, e.decode = function (t) {var e,n,o,i,s,a = .75 * t.length,u = t.length,c = 0;\"=\" === t[t.length - 1] && (a--, \"=\" === t[t.length - 2] && a--);var f = new ArrayBuffer(a),h = new Uint8Array(f);for (e = 0; e < u; e += 4) {n = r[t.charCodeAt(e)], o = r[t.charCodeAt(e + 1)], i = r[t.charCodeAt(e + 2)], s = r[t.charCodeAt(e + 3)], h[c++] = n << 2 | o >> 4, h[c++] = (15 & o) << 4 | i >> 2, h[c++] = (3 & i) << 6 | 63 & s;}return f;};}();}, function (t, e) {t.exports = function (t) {return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, \"loaded\", { enumerable: !0, get: function get() {return t.l;} }), Object.defineProperty(t, \"id\", { enumerable: !0, get: function get() {return t.i;} }), t.webpackPolyfill = 1), t;};}, function (t, e, r) {(function (t, n) {var o;!function (i) {var s = (\"object\" == typeof t && t && t.exports, \"object\" == typeof n && n);s.global !== s && s.window;var a,u,c,f = String.fromCharCode;function h(t) {for (var e, r, n = [], o = 0, i = t.length; o < i;) {(e = t.charCodeAt(o++)) >= 55296 && e <= 56319 && o < i ? 56320 == (64512 & (r = t.charCodeAt(o++))) ? n.push(((1023 & e) << 10) + (1023 & r) + 65536) : (n.push(e), o--) : n.push(e);}return n;}function p(t, e) {if (t >= 55296 && t <= 57343) {if (e) throw Error(\"Lone surrogate U+\" + t.toString(16).toUpperCase() + \" is not a scalar value\");return !1;}return !0;}function l(t, e) {return f(t >> e & 63 | 128);}function d(t, e) {if (0 == (4294967168 & t)) return f(t);var r = \"\";return 0 == (4294965248 & t) ? r = f(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (p(t, e) || (t = 65533), r = f(t >> 12 & 15 | 224), r += l(t, 6)) : 0 == (4292870144 & t) && (r = f(t >> 18 & 7 | 240), r += l(t, 12), r += l(t, 6)), r + f(63 & t | 128);}function y() {if (c >= u) throw Error(\"Invalid byte index\");var t = 255 & a[c];if (c++, 128 == (192 & t)) return 63 & t;throw Error(\"Invalid continuation byte\");}function g(t) {var e, r;if (c > u) throw Error(\"Invalid byte index\");if (c == u) return !1;if (e = 255 & a[c], c++, 0 == (128 & e)) return e;if (192 == (224 & e)) {if ((r = (31 & e) << 6 | y()) >= 128) return r;throw Error(\"Invalid continuation byte\");}if (224 == (240 & e)) {if ((r = (15 & e) << 12 | y() << 6 | y()) >= 2048) return p(r, t) ? r : 65533;throw Error(\"Invalid continuation byte\");}if (240 == (248 & e) && (r = (7 & e) << 18 | y() << 12 | y() << 6 | y()) >= 65536 && r <= 1114111) return r;throw Error(\"Invalid UTF-8 detected\");}var v = { version: \"2.1.2\", encode: function encode(t, e) {for (var r = !1 !== (e = e || {}).strict, n = h(t), o = n.length, i = -1, s = \"\"; ++i < o;) {s += d(n[i], r);}return s;}, decode: function decode(t, e) {var r = !1 !== (e = e || {}).strict;a = h(t), u = a.length, c = 0;for (var n, o = []; !1 !== (n = g(r));) {o.push(n);}return function (t) {for (var e, r = t.length, n = -1, o = \"\"; ++n < r;) {(e = t[n]) > 65535 && (o += f((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), o += f(e);}return o;}(o);} };void 0 === (o = function () {return v;}.call(e, r, e, t)) || (t.exports = o);}();}).call(this, r(16)(t), r(0));}, function (t, e) {function r() {}t.exports = function (t, e, n) {var o = !1;return n = n || r, i.count = t, 0 === t ? e() : i;function i(t, r) {if (i.count <= 0) throw new Error(\"after called too many times\");--i.count, t ? (o = !0, e(t), e = n) : 0 !== i.count || o || e(null, r);}};}, function (t, e) {t.exports = function (t, e, r) {var n = t.byteLength;if (e = e || 0, r = r || n, t.slice) return t.slice(e, r);if (e < 0 && (e += n), r < 0 && (r += n), r > n && (r = n), e >= n || e >= r || 0 === n) return new ArrayBuffer(0);for (var o = new Uint8Array(t), i = new Uint8Array(r - e), s = e, a = 0; s < r; s++, a++) {i[a] = o[s];}return i.buffer;};}, function (t, e) {var r = {}.toString;t.exports = Array.isArray || function (t) {return \"[object Array]\" == r.call(t);};}, function (t, e) {var r = {}.toString;t.exports = Array.isArray || function (t) {return \"[object Array]\" == r.call(t);};}, function (t, e) {e.read = function (t, e, r, n, o) {var i,s,a = 8 * o - n - 1,u = (1 << a) - 1,c = u >> 1,f = -7,h = r ? o - 1 : 0,p = r ? -1 : 1,l = t[e + h];for (h += p, i = l & (1 << -f) - 1, l >>= -f, f += a; f > 0; i = 256 * i + t[e + h], h += p, f -= 8) {;}for (s = i & (1 << -f) - 1, i >>= -f, f += n; f > 0; s = 256 * s + t[e + h], h += p, f -= 8) {;}if (0 === i) i = 1 - c;else {if (i === u) return s ? NaN : 1 / 0 * (l ? -1 : 1);s += Math.pow(2, n), i -= c;}return (l ? -1 : 1) * s * Math.pow(2, i - n);}, e.write = function (t, e, r, n, o, i) {var s,a,u,c = 8 * i - o - 1,f = (1 << c) - 1,h = f >> 1,p = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,l = n ? 0 : i - 1,d = n ? 1 : -1,y = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = f) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + h >= 1 ? p / u : p * Math.pow(2, 1 - h)) * u >= 2 && (s++, u /= 2), s + h >= f ? (a = 0, s = f) : s + h >= 1 ? (a = (e * u - 1) * Math.pow(2, o), s += h) : (a = e * Math.pow(2, h - 1) * Math.pow(2, o), s = 0)); o >= 8; t[r + l] = 255 & a, l += d, a /= 256, o -= 8) {;}for (s = s << o | a, c += o; c > 0; t[r + l] = 255 & s, l += d, s /= 256, c -= 8) {;}t[r + l - d] |= 128 * y;};}, function (t, e, r) {\"use strict\";e.byteLength = function (t) {var e = c(t),r = e[0],n = e[1];return 3 * (r + n) / 4 - n;}, e.toByteArray = function (t) {for (var e, r = c(t), n = r[0], s = r[1], a = new i(NaN), u = 0, f = s > 0 ? n - 4 : n, h = 0; h < f; h += 4) {e = o[t.charCodeAt(h)] << 18 | o[t.charCodeAt(h + 1)] << 12 | o[t.charCodeAt(h + 2)] << 6 | o[t.charCodeAt(h + 3)], a[u++] = e >> 16 & 255, a[u++] = e >> 8 & 255, a[u++] = 255 & e;}return 2 === s && (e = o[t.charCodeAt(h)] << 2 | o[t.charCodeAt(h + 1)] >> 4, a[u++] = 255 & e), 1 === s && (e = o[t.charCodeAt(h)] << 10 | o[t.charCodeAt(h + 1)] << 4 | o[t.charCodeAt(h + 2)] >> 2, a[u++] = e >> 8 & 255, a[u++] = 255 & e), a;}, e.fromByteArray = function (t) {for (var e, r = t.length, o = r % 3, i = [], s = 0, a = r - o; s < a; s += 16383) {i.push(f(t, s, s + 16383 > a ? a : s + 16383));}return 1 === o ? (e = t[r - 1], i.push(n[e >> 2] + n[e << 4 & 63] + \"==\")) : 2 === o && (e = (t[r - 2] << 8) + t[r - 1], i.push(n[e >> 10] + n[e >> 4 & 63] + n[e << 2 & 63] + \"=\")), i.join(\"\");};for (var n = [], o = [], i = \"undefined\" != typeof Uint8Array ? Uint8Array : Array, s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", a = 0, u = s.length; a < u; ++a) {n[a] = s[a], o[s.charCodeAt(a)] = a;}function c(t) {var e = t.length;if (e % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");var r = t.indexOf(\"=\");return -1 === r && (r = e), [r, r === e ? 0 : 4 - r % 4];}function f(t, e, r) {for (var o, i, s = [], a = e; a < r; a += 3) {o = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), s.push(n[(i = o) >> 18 & 63] + n[i >> 12 & 63] + n[i >> 6 & 63] + n[63 & i]);}return s.join(\"\");}o[\"-\".charCodeAt(0)] = 62, o[\"_\".charCodeAt(0)] = 63;}, function (t, e, r) {\"use strict\";(function (t) {var n = r(23),o = r(22),i = r(21);function s() {return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;}function a(t, e) {if (s() < e) throw new RangeError(\"Invalid typed array length\");return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t;}function u(t, e, r) {if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, r);if (\"number\" == typeof t) {if (\"string\" == typeof e) throw new Error(\"If encoding is specified then the first argument must be a string\");return h(this, t);}return c(this, t, e, r);}function c(t, e, r, n) {if (\"number\" == typeof e) throw new TypeError('\"value\" argument must not be a number');return \"undefined\" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function (t, e, r, n) {if (e.byteLength, r < 0 || e.byteLength < r) throw new RangeError(\"'offset' is out of bounds\");if (e.byteLength < r + (n || 0)) throw new RangeError(\"'length' is out of bounds\");return e = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n), u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = p(t, e), t;}(t, e, r, n) : \"string\" == typeof e ? function (t, e, r) {if (\"string\" == typeof r && \"\" !== r || (r = \"utf8\"), !u.isEncoding(r)) throw new TypeError('\"encoding\" must be a valid string encoding');var n = 0 | d(e, r),o = (t = a(t, n)).write(e, r);return o !== n && (t = t.slice(0, o)), t;}(t, e, r) : function (t, e) {if (u.isBuffer(e)) {var r = 0 | l(e.length);return 0 === (t = a(t, r)).length ? t : (e.copy(t, 0, 0, r), t);}if (e) {if (\"undefined\" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || \"length\" in e) return \"number\" != typeof e.length || (n = e.length) != n ? a(t, 0) : p(t, e);if (\"Buffer\" === e.type && i(e.data)) return p(t, e.data);}var n;throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\");}(t, e);}function f(t) {if (\"number\" != typeof t) throw new TypeError('\"size\" argument must be a number');if (t < 0) throw new RangeError('\"size\" argument must not be negative');}function h(t, e) {if (f(e), t = a(t, e < 0 ? 0 : 0 | l(e)), !u.TYPED_ARRAY_SUPPORT) for (var r = 0; r < e; ++r) {t[r] = 0;}return t;}function p(t, e) {var r = e.length < 0 ? 0 : 0 | l(e.length);t = a(t, r);for (var n = 0; n < r; n += 1) {t[n] = 255 & e[n];}return t;}function l(t) {if (t >= s()) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + s().toString(16) + \" bytes\");return 0 | t;}function d(t, e) {if (u.isBuffer(t)) return t.length;if (\"undefined\" != typeof ArrayBuffer && \"function\" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;\"string\" != typeof t && (t = \"\" + t);var r = t.length;if (0 === r) return 0;for (var n = !1;;) {switch (e) {case \"ascii\":case \"latin1\":case \"binary\":return r;case \"utf8\":case \"utf-8\":case void 0:return j(t).length;case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return 2 * r;case \"hex\":return r >>> 1;case \"base64\":return q(t).length;default:if (n) return j(t).length;e = (\"\" + e).toLowerCase(), n = !0;}}}function y(t, e, r) {var n = t[e];t[e] = t[r], t[r] = n;}function g(t, e, r, n, o) {if (0 === t.length) return -1;if (\"string\" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = o ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {if (o) return -1;r = t.length - 1;} else if (r < 0) {if (!o) return -1;r = 0;}if (\"string\" == typeof e && (e = u.from(e, n)), u.isBuffer(e)) return 0 === e.length ? -1 : v(t, e, r, n, o);if (\"number\" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && \"function\" == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : v(t, [e], r, n, o);throw new TypeError(\"val must be string, number or Buffer\");}function v(t, e, r, n, o) {var i,s = 1,a = t.length,u = e.length;if (void 0 !== n && (\"ucs2\" === (n = String(n).toLowerCase()) || \"ucs-2\" === n || \"utf16le\" === n || \"utf-16le\" === n)) {if (t.length < 2 || e.length < 2) return -1;s = 2, a /= 2, u /= 2, r /= 2;}function c(t, e) {return 1 === s ? t[e] : t.readUInt16BE(e * s);}if (o) {var f = -1;for (i = r; i < a; i++) {if (c(t, i) === c(e, -1 === f ? 0 : i - f)) {if (-1 === f && (f = i), i - f + 1 === u) return f * s;} else -1 !== f && (i -= i - f), f = -1;}} else for (r + u > a && (r = a - u), i = r; i >= 0; i--) {for (var h = !0, p = 0; p < u; p++) {if (c(t, i + p) !== c(e, p)) {h = !1;break;}}if (h) return i;}return -1;}function b(t, e, r, n) {r = Number(r) || 0;var o = t.length - r;n ? (n = Number(n)) > o && (n = o) : n = o;var i = e.length;if (i % 2 != 0) throw new TypeError(\"Invalid hex string\");n > i / 2 && (n = i / 2);for (var s = 0; s < n; ++s) {var a = parseInt(e.substr(2 * s, 2), 16);if (isNaN(a)) return s;t[r + s] = a;}return s;}function m(t, e, r, n) {return F(j(e, t.length - r), t, r, n);}function w(t, e, r, n) {return F(function (t) {for (var e = [], r = 0; r < t.length; ++r) {e.push(255 & t.charCodeAt(r));}return e;}(e), t, r, n);}function A(t, e, r, n) {return w(t, e, r, n);}function _(t, e, r, n) {return F(q(e), t, r, n);}function E(t, e, r, n) {return F(function (t, e) {for (var r, n, o, i = [], s = 0; s < t.length && !((e -= 2) < 0); ++s) {n = (r = t.charCodeAt(s)) >> 8, o = r % 256, i.push(o), i.push(n);}return i;}(e, t.length - r), t, r, n);}function k(t, e, r) {return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));}function B(t, e, r) {r = Math.min(t.length, r);for (var n = [], o = e; o < r;) {var i,s,a,u,c = t[o],f = null,h = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;if (o + h <= r) switch (h) {case 1:c < 128 && (f = c);break;case 2:128 == (192 & (i = t[o + 1])) && (u = (31 & c) << 6 | 63 & i) > 127 && (f = u);break;case 3:i = t[o + 1], s = t[o + 2], 128 == (192 & i) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & i) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (f = u);break;case 4:i = t[o + 1], s = t[o + 2], a = t[o + 3], 128 == (192 & i) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (f = u);}null === f ? (f = 65533, h = 1) : f > 65535 && (f -= 65536, n.push(f >>> 10 & 1023 | 55296), f = 56320 | 1023 & f), n.push(f), o += h;}return function (t) {var e = t.length;if (e <= R) return String.fromCharCode.apply(String, t);for (var r = \"\", n = 0; n < e;) {r += String.fromCharCode.apply(String, t.slice(n, n += R));}return r;}(n);}e.Buffer = u, e.SlowBuffer = function (t) {return +t != t && (t = 0), u.alloc(+t);}, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function () {try {var t = new Uint8Array(1);return t.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {return 42;} }, 42 === t.foo() && \"function\" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength;} catch (t) {return !1;}}(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function (t) {return t.__proto__ = u.prototype, t;}, u.from = function (t, e, r) {return c(null, t, e, r);}, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, \"undefined\" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: !0 })), u.alloc = function (t, e, r) {return function (t, e, r, n) {return f(e), e <= 0 ? a(t, e) : void 0 !== r ? \"string\" == typeof n ? a(t, e).fill(r, n) : a(t, e).fill(r) : a(t, e);}(null, t, e, r);}, u.allocUnsafe = function (t) {return h(null, t);}, u.allocUnsafeSlow = function (t) {return h(null, t);}, u.isBuffer = function (t) {return !(null == t || !t._isBuffer);}, u.compare = function (t, e) {if (!u.isBuffer(t) || !u.isBuffer(e)) throw new TypeError(\"Arguments must be Buffers\");if (t === e) return 0;for (var r = t.length, n = e.length, o = 0, i = Math.min(r, n); o < i; ++o) {if (t[o] !== e[o]) {r = t[o], n = e[o];break;}}return r < n ? -1 : n < r ? 1 : 0;}, u.isEncoding = function (t) {switch (String(t).toLowerCase()) {case \"hex\":case \"utf8\":case \"utf-8\":case \"ascii\":case \"latin1\":case \"binary\":case \"base64\":case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return !0;default:return !1;}}, u.concat = function (t, e) {if (!i(t)) throw new TypeError('\"list\" argument must be an Array of Buffers');if (0 === t.length) return u.alloc(0);var r;if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) {e += t[r].length;}var n = u.allocUnsafe(e),o = 0;for (r = 0; r < t.length; ++r) {var s = t[r];if (!u.isBuffer(s)) throw new TypeError('\"list\" argument must be an Array of Buffers');s.copy(n, o), o += s.length;}return n;}, u.byteLength = d, u.prototype._isBuffer = !0, u.prototype.swap16 = function () {var t = this.length;if (t % 2 != 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for (var e = 0; e < t; e += 2) {y(this, e, e + 1);}return this;}, u.prototype.swap32 = function () {var t = this.length;if (t % 4 != 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for (var e = 0; e < t; e += 4) {y(this, e, e + 3), y(this, e + 1, e + 2);}return this;}, u.prototype.swap64 = function () {var t = this.length;if (t % 8 != 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for (var e = 0; e < t; e += 8) {y(this, e, e + 7), y(this, e + 1, e + 6), y(this, e + 2, e + 5), y(this, e + 3, e + 4);}return this;}, u.prototype.toString = function () {var t = 0 | this.length;return 0 === t ? \"\" : 0 === arguments.length ? B(this, 0, t) : function (t, e, r) {var n = !1;if ((void 0 === e || e < 0) && (e = 0), e > this.length) return \"\";if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return \"\";if ((r >>>= 0) <= (e >>>= 0)) return \"\";for (t || (t = \"utf8\");;) {switch (t) {case \"hex\":return T(this, e, r);case \"utf8\":case \"utf-8\":return B(this, e, r);case \"ascii\":return P(this, e, r);case \"latin1\":case \"binary\":return S(this, e, r);case \"base64\":return k(this, e, r);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return O(this, e, r);default:if (n) throw new TypeError(\"Unknown encoding: \" + t);t = (t + \"\").toLowerCase(), n = !0;}}}.apply(this, arguments);}, u.prototype.equals = function (t) {if (!u.isBuffer(t)) throw new TypeError(\"Argument must be a Buffer\");return this === t || 0 === u.compare(this, t);}, u.prototype.inspect = function () {var t = \"\",r = e.INSPECT_MAX_BYTES;return this.length > 0 && (t = this.toString(\"hex\", 0, r).match(/.{2}/g).join(\" \"), this.length > r && (t += \" ... \")), \"<Buffer \" + t + \">\";}, u.prototype.compare = function (t, e, r, n, o) {if (!u.isBuffer(t)) throw new TypeError(\"Argument must be a Buffer\");if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === n && (n = 0), void 0 === o && (o = this.length), e < 0 || r > t.length || n < 0 || o > this.length) throw new RangeError(\"out of range index\");if (n >= o && e >= r) return 0;if (n >= o) return -1;if (e >= r) return 1;if (this === t) return 0;for (var i = (o >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (e >>>= 0), a = Math.min(i, s), c = this.slice(n, o), f = t.slice(e, r), h = 0; h < a; ++h) {if (c[h] !== f[h]) {i = c[h], s = f[h];break;}}return i < s ? -1 : s < i ? 1 : 0;}, u.prototype.includes = function (t, e, r) {return -1 !== this.indexOf(t, e, r);}, u.prototype.indexOf = function (t, e, r) {return g(this, t, e, r, !0);}, u.prototype.lastIndexOf = function (t, e, r) {return g(this, t, e, r, !1);}, u.prototype.write = function (t, e, r, n) {if (void 0 === e) n = \"utf8\", r = this.length, e = 0;else if (void 0 === r && \"string\" == typeof e) n = e, r = this.length, e = 0;else {if (!isFinite(e)) throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");e |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = \"utf8\")) : (n = r, r = void 0);}var o = this.length - e;if ((void 0 === r || r > o) && (r = o), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");n || (n = \"utf8\");for (var i = !1;;) {switch (n) {case \"hex\":return b(this, t, e, r);case \"utf8\":case \"utf-8\":return m(this, t, e, r);case \"ascii\":return w(this, t, e, r);case \"latin1\":case \"binary\":return A(this, t, e, r);case \"base64\":return _(this, t, e, r);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return E(this, t, e, r);default:if (i) throw new TypeError(\"Unknown encoding: \" + n);n = (\"\" + n).toLowerCase(), i = !0;}}}, u.prototype.toJSON = function () {return { type: \"Buffer\", data: Array.prototype.slice.call(this._arr || this, 0) };};var R = 4096;function P(t, e, r) {var n = \"\";r = Math.min(t.length, r);for (var o = e; o < r; ++o) {n += String.fromCharCode(127 & t[o]);}return n;}function S(t, e, r) {var n = \"\";r = Math.min(t.length, r);for (var o = e; o < r; ++o) {n += String.fromCharCode(t[o]);}return n;}function T(t, e, r) {var n = t.length;(!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);for (var o = \"\", i = e; i < r; ++i) {o += D(t[i]);}return o;}function O(t, e, r) {for (var n = t.slice(e, r), o = \"\", i = 0; i < n.length; i += 2) {o += String.fromCharCode(n[i] + 256 * n[i + 1]);}return o;}function x(t, e, r) {if (t % 1 != 0 || t < 0) throw new RangeError(\"offset is not uint\");if (t + e > r) throw new RangeError(\"Trying to access beyond buffer length\");}function C(t, e, r, n, o, i) {if (!u.isBuffer(t)) throw new TypeError('\"buffer\" argument must be a Buffer instance');if (e > o || e < i) throw new RangeError('\"value\" argument is out of bounds');if (r + n > t.length) throw new RangeError(\"Index out of range\");}function U(t, e, r, n) {e < 0 && (e = 65535 + e + 1);for (var o = 0, i = Math.min(t.length - r, 2); o < i; ++o) {t[r + o] = (e & 255 << 8 * (n ? o : 1 - o)) >>> 8 * (n ? o : 1 - o);}}function L(t, e, r, n) {e < 0 && (e = 4294967295 + e + 1);for (var o = 0, i = Math.min(t.length - r, 4); o < i; ++o) {t[r + o] = e >>> 8 * (n ? o : 3 - o) & 255;}}function I(t, e, r, n, o, i) {if (r + n > t.length) throw new RangeError(\"Index out of range\");if (r < 0) throw new RangeError(\"Index out of range\");}function N(t, e, r, n, i) {return i || I(t, 0, r, 4), o.write(t, e, r, n, 23, 4), r + 4;}function M(t, e, r, n, i) {return i || I(t, 0, r, 8), o.write(t, e, r, n, 52, 8), r + 8;}u.prototype.slice = function (t, e) {var r,n = this.length;if ((t = ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), (e = void 0 === e ? n : ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), e < t && (e = t), u.TYPED_ARRAY_SUPPORT) (r = this.subarray(t, e)).__proto__ = u.prototype;else {var o = e - t;r = new u(o, void 0);for (var i = 0; i < o; ++i) {r[i] = this[i + t];}}return r;}, u.prototype.readUIntLE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t], o = 1, i = 0; ++i < e && (o *= 256);) {n += this[t + i] * o;}return n;}, u.prototype.readUIntBE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t + --e], o = 1; e > 0 && (o *= 256);) {n += this[t + --e] * o;}return n;}, u.prototype.readUInt8 = function (t, e) {return e || x(t, 1, this.length), this[t];}, u.prototype.readUInt16LE = function (t, e) {return e || x(t, 2, this.length), this[t] | this[t + 1] << 8;}, u.prototype.readUInt16BE = function (t, e) {return e || x(t, 2, this.length), this[t] << 8 | this[t + 1];}, u.prototype.readUInt32LE = function (t, e) {return e || x(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];}, u.prototype.readUInt32BE = function (t, e) {return e || x(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);}, u.prototype.readIntLE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = this[t], o = 1, i = 0; ++i < e && (o *= 256);) {n += this[t + i] * o;}return n >= (o *= 128) && (n -= Math.pow(2, 8 * e)), n;}, u.prototype.readIntBE = function (t, e, r) {t |= 0, e |= 0, r || x(t, e, this.length);for (var n = e, o = 1, i = this[t + --n]; n > 0 && (o *= 256);) {i += this[t + --n] * o;}return i >= (o *= 128) && (i -= Math.pow(2, 8 * e)), i;}, u.prototype.readInt8 = function (t, e) {return e || x(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];}, u.prototype.readInt16LE = function (t, e) {e || x(t, 2, this.length);var r = this[t] | this[t + 1] << 8;return 32768 & r ? 4294901760 | r : r;}, u.prototype.readInt16BE = function (t, e) {e || x(t, 2, this.length);var r = this[t + 1] | this[t] << 8;return 32768 & r ? 4294901760 | r : r;}, u.prototype.readInt32LE = function (t, e) {return e || x(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;}, u.prototype.readInt32BE = function (t, e) {return e || x(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];}, u.prototype.readFloatLE = function (t, e) {return e || x(t, 4, this.length), o.read(this, t, !0, 23, 4);}, u.prototype.readFloatBE = function (t, e) {return e || x(t, 4, this.length), o.read(this, t, !1, 23, 4);}, u.prototype.readDoubleLE = function (t, e) {return e || x(t, 8, this.length), o.read(this, t, !0, 52, 8);}, u.prototype.readDoubleBE = function (t, e) {return e || x(t, 8, this.length), o.read(this, t, !1, 52, 8);}, u.prototype.writeUIntLE = function (t, e, r, n) {t = +t, e |= 0, r |= 0, n || C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);var o = 1,i = 0;for (this[e] = 255 & t; ++i < r && (o *= 256);) {this[e + i] = t / o & 255;}return e + r;}, u.prototype.writeUIntBE = function (t, e, r, n) {t = +t, e |= 0, r |= 0, n || C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);var o = r - 1,i = 1;for (this[e + o] = 255 & t; --o >= 0 && (i *= 256);) {this[e + o] = t / i & 255;}return e + r;}, u.prototype.writeUInt8 = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1;}, u.prototype.writeUInt16LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : U(this, t, e, !0), e + 2;}, u.prototype.writeUInt16BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : U(this, t, e, !1), e + 2;}, u.prototype.writeUInt32LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : L(this, t, e, !0), e + 4;}, u.prototype.writeUInt32BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : L(this, t, e, !1), e + 4;}, u.prototype.writeIntLE = function (t, e, r, n) {if (t = +t, e |= 0, !n) {var o = Math.pow(2, 8 * r - 1);C(this, t, e, r, o - 1, -o);}var i = 0,s = 1,a = 0;for (this[e] = 255 & t; ++i < r && (s *= 256);) {t < 0 && 0 === a && 0 !== this[e + i - 1] && (a = 1), this[e + i] = (t / s >> 0) - a & 255;}return e + r;}, u.prototype.writeIntBE = function (t, e, r, n) {if (t = +t, e |= 0, !n) {var o = Math.pow(2, 8 * r - 1);C(this, t, e, r, o - 1, -o);}var i = r - 1,s = 1,a = 0;for (this[e + i] = 255 & t; --i >= 0 && (s *= 256);) {t < 0 && 0 === a && 0 !== this[e + i + 1] && (a = 1), this[e + i] = (t / s >> 0) - a & 255;}return e + r;}, u.prototype.writeInt8 = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;}, u.prototype.writeInt16LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : U(this, t, e, !0), e + 2;}, u.prototype.writeInt16BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : U(this, t, e, !1), e + 2;}, u.prototype.writeInt32LE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : L(this, t, e, !0), e + 4;}, u.prototype.writeInt32BE = function (t, e, r) {return t = +t, e |= 0, r || C(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : L(this, t, e, !1), e + 4;}, u.prototype.writeFloatLE = function (t, e, r) {return N(this, t, e, !0, r);}, u.prototype.writeFloatBE = function (t, e, r) {return N(this, t, e, !1, r);}, u.prototype.writeDoubleLE = function (t, e, r) {return M(this, t, e, !0, r);}, u.prototype.writeDoubleBE = function (t, e, r) {return M(this, t, e, !1, r);}, u.prototype.copy = function (t, e, r, n) {if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), n === r) return 0;if (0 === t.length || 0 === this.length) return 0;if (e < 0) throw new RangeError(\"targetStart out of bounds\");if (r < 0 || r >= this.length) throw new RangeError(\"sourceStart out of bounds\");if (n < 0) throw new RangeError(\"sourceEnd out of bounds\");n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);var o,i = n - r;if (this === t && r < e && e < n) for (o = i - 1; o >= 0; --o) {t[o + e] = this[o + r];} else if (i < 1e3 || !u.TYPED_ARRAY_SUPPORT) for (o = 0; o < i; ++o) {t[o + e] = this[o + r];} else Uint8Array.prototype.set.call(t, this.subarray(r, r + i), e);return i;}, u.prototype.fill = function (t, e, r, n) {if (\"string\" == typeof t) {if (\"string\" == typeof e ? (n = e, e = 0, r = this.length) : \"string\" == typeof r && (n = r, r = this.length), 1 === t.length) {var o = t.charCodeAt(0);o < 256 && (t = o);}if (void 0 !== n && \"string\" != typeof n) throw new TypeError(\"encoding must be a string\");if (\"string\" == typeof n && !u.isEncoding(n)) throw new TypeError(\"Unknown encoding: \" + n);} else \"number\" == typeof t && (t &= 255);if (e < 0 || this.length < e || this.length < r) throw new RangeError(\"Out of range index\");if (r <= e) return this;var i;if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), \"number\" == typeof t) for (i = e; i < r; ++i) {this[i] = t;} else {var s = u.isBuffer(t) ? t : j(new u(t, n).toString()),a = s.length;for (i = 0; i < r - e; ++i) {this[i + e] = s[i % a];}}return this;};var Y = /[^+\\/0-9A-Za-z-_]/g;function D(t) {return t < 16 ? \"0\" + t.toString(16) : t.toString(16);}function j(t, e) {var r;e = e || 1 / 0;for (var n = t.length, o = null, i = [], s = 0; s < n; ++s) {if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {if (!o) {if (r > 56319) {(e -= 3) > -1 && i.push(239, 191, 189);continue;}if (s + 1 === n) {(e -= 3) > -1 && i.push(239, 191, 189);continue;}o = r;continue;}if (r < 56320) {(e -= 3) > -1 && i.push(239, 191, 189), o = r;continue;}r = 65536 + (o - 55296 << 10 | r - 56320);} else o && (e -= 3) > -1 && i.push(239, 191, 189);if (o = null, r < 128) {if ((e -= 1) < 0) break;i.push(r);} else if (r < 2048) {if ((e -= 2) < 0) break;i.push(r >> 6 | 192, 63 & r | 128);} else if (r < 65536) {if ((e -= 3) < 0) break;i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);} else {if (!(r < 1114112)) throw new Error(\"Invalid code point\");if ((e -= 4) < 0) break;i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);}}return i;}function q(t) {return n.toByteArray(function (t) {if ((t = function (t) {return t.trim ? t.trim() : t.replace(/^\\s+|\\s+$/g, \"\");}(t).replace(Y, \"\")).length < 2) return \"\";for (; t.length % 4 != 0;) {t += \"=\";}return t;}(t));}function F(t, e, r, n) {for (var o = 0; o < n && !(o + r >= e.length || o >= t.length); ++o) {e[o + r] = t[o];}return o;}}).call(this, r(0));}, function (t, e, r) {(function (e) {var n = r(20),o = Object.prototype.toString,i = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === o.call(Blob),s = \"function\" == typeof File || \"undefined\" != typeof File && \"[object FileConstructor]\" === o.call(File);t.exports = function t(r) {if (!r || \"object\" != typeof r) return !1;if (n(r)) {for (var o = 0, a = r.length; o < a; o++) {if (t(r[o])) return !0;}return !1;}if (\"function\" == typeof e && e.isBuffer && e.isBuffer(r) || \"function\" == typeof ArrayBuffer && r instanceof ArrayBuffer || i && r instanceof Blob || s && r instanceof File) return !0;if (r.toJSON && \"function\" == typeof r.toJSON && 1 === arguments.length) return t(r.toJSON(), !0);for (var u in r) {if (Object.prototype.hasOwnProperty.call(r, u) && t(r[u])) return !0;}return !1;};}).call(this, r(24).Buffer);}, function (t, e) {t.exports = Object.keys || function (t) {var e = [],r = Object.prototype.hasOwnProperty;for (var n in t) {r.call(t, n) && e.push(n);}return e;};}, function (t, e, r) {(function (e) {var n,o = r(5),i = r(1),s = r(3),a = r(13),u = r(12),c = r(2)(\"engine.io-client:websocket\"),f = e.WebSocket || e.MozWebSocket;if (\"undefined\" == typeof window) try {n = r(11);} catch (t) {c(\"require error: \", t);}var h = f;function p(t) {t && t.forceBase64 && (this.supportsBinary = !1), this.perMessageDeflate = t.perMessageDeflate, this.usingBrowserWebSocket = f && !t.forceNode, this.protocols = t.protocols, this.usingBrowserWebSocket || (h = n), o.call(this, t);}h || \"undefined\" != typeof window || (h = n), t.exports = p, a(p, o), p.prototype.name = \"websocket\", p.prototype.supportsBinary = !0, p.prototype.doOpen = function () {if (c(\"wesocket do open: \", this.protocols), this.check()) {var t = this.uri(),e = this.protocols,r = { agent: this.agent, perMessageDeflate: this.perMessageDeflate };r.pfx = this.pfx, r.key = this.key, r.passphrase = this.passphrase, r.cert = this.cert, r.ca = this.ca, r.ciphers = this.ciphers, r.rejectUnauthorized = this.rejectUnauthorized, this.extraHeaders && (r.headers = this.extraHeaders), this.localAddress && (r.localAddress = this.localAddress);try {this.ws = this.usingBrowserWebSocket ? e ? new h(t, e) : new h(t) : new h(t, e, r);} catch (t) {return this.emit(\"error\", t);}void 0 === this.ws.binaryType && (this.supportsBinary = !1), this.ws.supports && this.ws.supports.binary ? (this.supportsBinary = !0, this.ws.binaryType = \"nodebuffer\") : this.ws.binaryType = \"arraybuffer\", this.addEventListeners();}}, p.prototype.addEventListeners = function () {var t = this;this.ws.onopen = function () {t.onOpen();}, this.ws.onclose = function () {t.onClose();}, this.ws.onmessage = function (e) {t.onData(e.data);}, this.ws.onerror = function (e) {t.onError(\"websocket error\", e);};}, p.prototype.write = function (t) {var e = this;this.writable = !1;for (var r, n = t.length, o = 0, s = n; o < s; o++) {r = t[o], i.encodePacket(r, e.supportsBinary, function (t) {try {e.ws.send(t);} catch (t) {}--n || (e.emit(\"flush\"), setTimeout(function () {e.writable = !0, e.emit(\"drain\");}, 0));});}}, p.prototype.onClose = function () {o.prototype.onClose.call(this);}, p.prototype.doClose = function () {void 0 !== this.ws && this.ws.close();}, p.prototype.uri = function () {var t = this.query || {},e = this.secure ? \"wss\" : \"ws\",r = \"\";return this.port && (\"wss\" === e && 443 !== Number(this.port) || \"ws\" === e && 80 !== Number(this.port)) && (r = \":\" + this.port), this.timestampRequests && (t[this.timestampParam] = u()), this.supportsBinary || (t.b64 = 1), (t = s.encode(t)).length && (t = \"?\" + t), e + \"://\" + (-1 !== this.hostname.indexOf(\":\") ? \"[\" + this.hostname + \"]\" : this.hostname) + r + this.path + t;}, p.prototype.check = function () {return !(!h || \"__initialize\" in h && this.name === p.prototype.name);};}).call(this, r(0));}, function (t, e, r) {(function (e) {var n = r(6),o = r(4),i = r(2)(\"engine.io-client:socket\"),s = r(8),a = r(1),u = r(7),c = r(3);function f(t, r) {if (!(this instanceof f)) return new f(t, r);r = r || {}, t && \"object\" == typeof t && (r = t, t = null), t ? (t = u(t), r.hostname = t.host, r.secure = \"https\" === t.protocol || \"wss\" === t.protocol, r.port = t.port, t.query && (r.query = t.query)) : r.host && (r.hostname = u(r.host).host), this.secure = null != r.secure ? r.secure : e.location && \"https:\" === location.protocol, r.hostname && !r.port && (r.port = this.secure ? \"443\" : \"80\"), this.agent = r.agent || !1, this.hostname = r.hostname || (e.location ? location.hostname : \"localhost\"), this.port = r.port || (e.location && location.port ? location.port : this.secure ? 443 : 80), this.query = r.query || {}, \"string\" == typeof this.query && (this.query = c.decode(this.query)), this.upgrade = !1 !== r.upgrade, this.path = (r.path || \"/engine.io\").replace(/\\/$/, \"\") + \"/\", this.forceJSONP = !!r.forceJSONP, this.jsonp = !1 !== r.jsonp, this.forceBase64 = !!r.forceBase64, this.enablesXDR = !!r.enablesXDR, this.timestampParam = r.timestampParam || \"t\", this.timestampRequests = r.timestampRequests, this.transports = r.transports || [\"websocket\"], this.transportOptions = r.transportOptions || {}, this.readyState = \"\", this.writeBuffer = [], this.prevBufferLen = 0, this.policyPort = r.policyPort || 843, this.rememberUpgrade = r.rememberUpgrade || !1, this.binaryType = null, this.onlyBinaryUpgrades = r.onlyBinaryUpgrades, this.perMessageDeflate = !1 !== r.perMessageDeflate && (r.perMessageDeflate || {}), !0 === this.perMessageDeflate && (this.perMessageDeflate = {}), this.perMessageDeflate && null == this.perMessageDeflate.threshold && (this.perMessageDeflate.threshold = 1024), this.pfx = r.pfx || null, this.key = r.key || null, this.passphrase = r.passphrase || null, this.cert = r.cert || null, this.ca = r.ca || null, this.ciphers = r.ciphers || null, this.rejectUnauthorized = void 0 === r.rejectUnauthorized || r.rejectUnauthorized, this.forceNode = !!r.forceNode;var n = \"object\" == typeof e && e;n.global === n && (r.extraHeaders && Object.keys(r.extraHeaders).length > 0 && (this.extraHeaders = r.extraHeaders), r.localAddress && (this.localAddress = r.localAddress)), this.id = null, this.upgrades = null, this.pingInterval = null, this.pingTimeout = null, this.pingIntervalTimer = null, this.pingTimeoutTimer = null, this.open();}t.exports = f, f.priorWebsocketSuccess = !1, o(f.prototype), f.protocol = a.protocol, f.Socket = f, f.Transport = r(5), f.transports = r(6), f.parser = r(1), f.prototype.createTransport = function (t) {i('creating transport \"%s\"', t);var e = function (t) {var e = {};for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}return e;}(this.query);e.EIO = a.protocol, e.transport = t;var r = this.transportOptions[t] || {};this.id && (e.sid = this.id);var o = new n[t]({ query: e, socket: this, agent: r.agent || this.agent, hostname: r.hostname || this.hostname, port: r.port || this.port, secure: r.secure || this.secure, path: r.path || this.path, forceJSONP: r.forceJSONP || this.forceJSONP, jsonp: r.jsonp || this.jsonp, forceBase64: r.forceBase64 || this.forceBase64, enablesXDR: r.enablesXDR || this.enablesXDR, timestampRequests: r.timestampRequests || this.timestampRequests, timestampParam: r.timestampParam || this.timestampParam, policyPort: r.policyPort || this.policyPort, pfx: r.pfx || this.pfx, key: r.key || this.key, passphrase: r.passphrase || this.passphrase, cert: r.cert || this.cert, ca: r.ca || this.ca, ciphers: r.ciphers || this.ciphers, rejectUnauthorized: r.rejectUnauthorized || this.rejectUnauthorized, perMessageDeflate: r.perMessageDeflate || this.perMessageDeflate, extraHeaders: r.extraHeaders || this.extraHeaders, forceNode: r.forceNode || this.forceNode, localAddress: r.localAddress || this.localAddress, requestTimeout: r.requestTimeout || this.requestTimeout, protocols: r.protocols || void 0 });return i(\"transport: \", o), o;}, f.prototype.open = function () {var t;if (this.rememberUpgrade && f.priorWebsocketSuccess && -1 !== this.transports.indexOf(\"websocket\")) t = \"websocket\";else {if (0 === this.transports.length) {var e = this;return void setTimeout(function () {e.emit(\"error\", \"No transports available\");}, 0);}t = this.transports[0];}this.readyState = \"opening\";try {t = this.createTransport(t);} catch (t) {return this.transports.shift(), void this.open();}t.open(), this.setTransport(t);}, f.prototype.setTransport = function (t) {i(\"setting transport %s\", t.name);var e = this;this.transport && (i(\"clearing existing transport %s\", this.transport.name), this.transport.removeAllListeners()), this.transport = t, t.on(\"drain\", function () {e.onDrain();}).on(\"packet\", function (t) {e.onPacket(t);}).on(\"error\", function (t) {e.onError(t);}).on(\"close\", function () {e.onClose(\"transport close\");});}, f.prototype.probe = function (t) {i('probing transport \"%s\"', t);var e = this.createTransport(t, { probe: 1 }),r = !1,n = this;function o() {if (n.onlyBinaryUpgrades) {var o = !this.supportsBinary && n.transport.supportsBinary;r = r || o;}r || (i('probe transport \"%s\" opened', t), e.send([{ type: \"ping\", data: \"probe\" }]), e.once(\"packet\", function (o) {if (!r) if (\"pong\" === o.type && \"probe\" === o.data) {if (i('probe transport \"%s\" pong', t), n.upgrading = !0, n.emit(\"upgrading\", e), !e) return;f.priorWebsocketSuccess = \"websocket\" === e.name, i('pausing current transport \"%s\"', n.transport.name), n.transport.pause(function () {r || \"closed\" !== n.readyState && (i(\"changing transport and sending upgrade packet\"), p(), n.setTransport(e), e.send([{ type: \"upgrade\" }]), n.emit(\"upgrade\", e), e = null, n.upgrading = !1, n.flush());});} else {i('probe transport \"%s\" failed', t);var s = new Error(\"probe error\");s.transport = e.name, n.emit(\"upgradeError\", s);}}));}function s() {r || (r = !0, p(), e.close(), e = null);}function a(r) {var o = new Error(\"probe error: \" + r);o.transport = e.name, s(), i('probe transport \"%s\" failed because of error: %s', t, r), n.emit(\"upgradeError\", o);}function u() {a(\"transport closed\");}function c() {a(\"socket closed\");}function h(t) {e && t.name !== e.name && (i('\"%s\" works - aborting \"%s\"', t.name, e.name), s());}function p() {e.removeListener(\"open\", o), e.removeListener(\"error\", a), e.removeListener(\"close\", u), n.removeListener(\"close\", c), n.removeListener(\"upgrading\", h);}f.priorWebsocketSuccess = !1, e.once(\"open\", o), e.once(\"error\", a), e.once(\"close\", u), this.once(\"close\", c), this.once(\"upgrading\", h), e.open();}, f.prototype.onOpen = function () {if (i(\"socket open\"), this.readyState = \"open\", f.priorWebsocketSuccess = \"websocket\" === this.transport.name, this.emit(\"open\"), this.flush(), \"open\" === this.readyState && this.upgrade && this.transport.pause) {i(\"starting upgrade probes\");for (var t = 0, e = this.upgrades.length; t < e; t++) {this.probe(this.upgrades[t]);}}}, f.prototype.onPacket = function (t) {if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) switch (i('socket receive: type \"%s\", data \"%s\"', t.type, t.data), this.emit(\"packet\", t), this.emit(\"heartbeat\"), t.type) {case \"open\":this.onHandshake(JSON.parse(t.data));break;case \"pong\":this.setPing(), this.emit(\"pong\");break;case \"error\":var e = new Error(\"server error\");e.code = t.data, this.onError(e);break;case \"message\":this.emit(\"data\", t.data), this.emit(\"message\", t.data);} else i('packet received with socket readyState \"%s\"', this.readyState);}, f.prototype.onHandshake = function (t) {this.emit(\"handshake\", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), \"closed\" !== this.readyState && (this.setPing(), this.removeListener(\"heartbeat\", this.onHeartbeat), this.on(\"heartbeat\", this.onHeartbeat));}, f.prototype.onHeartbeat = function (t) {clearTimeout(this.pingTimeoutTimer);var e = this;e.pingTimeoutTimer = setTimeout(function () {\"closed\" !== e.readyState && e.onClose(\"ping timeout\");}, t || e.pingInterval + e.pingTimeout);}, f.prototype.setPing = function () {var t = this;clearTimeout(t.pingIntervalTimer), t.pingIntervalTimer = setTimeout(function () {i(\"writing ping packet - expecting pong within %sms\", t.pingTimeout), t.ping(), t.onHeartbeat(t.pingTimeout);}, t.pingInterval);}, f.prototype.ping = function () {var t = this;this.sendPacket(\"ping\", function () {t.emit(\"ping\");});}, f.prototype.onDrain = function () {this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emit(\"drain\") : this.flush();}, f.prototype.flush = function () {\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (i(\"flushing %d packets in socket\", this.writeBuffer.length), this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, this.emit(\"flush\"));}, f.prototype.write = f.prototype.send = function (t, e, r) {return this.sendPacket(\"message\", t, e, r), this;}, f.prototype.sendPacket = function (t, e, r, n) {if (\"function\" == typeof e && (n = e, e = void 0), \"function\" == typeof r && (n = r, r = null), \"closing\" !== this.readyState && \"closed\" !== this.readyState) {(r = r || {}).compress = !1 !== r.compress;var o = { type: t, data: e, options: r };this.emit(\"packetCreate\", o), this.writeBuffer.push(o), n && this.once(\"flush\", n), this.flush();}}, f.prototype.close = function () {if (\"opening\" === this.readyState || \"open\" === this.readyState) {this.readyState = \"closing\";var t = this;this.writeBuffer.length ? this.once(\"drain\", function () {this.upgrading ? n() : e();}) : this.upgrading ? n() : e();}function e() {t.onClose(\"forced close\"), i(\"socket closing - telling transport to close\"), t.transport.close();}function r() {t.removeListener(\"upgrade\", r), t.removeListener(\"upgradeError\", r), e();}function n() {t.once(\"upgrade\", r), t.once(\"upgradeError\", r);}return this;}, f.prototype.onError = function (t) {i(\"socket error %j\", t), f.priorWebsocketSuccess = !1, this.emit(\"error\", t), this.onClose(\"transport error\", t);}, f.prototype.onClose = function (t, e) {\"opening\" !== this.readyState && \"open\" !== this.readyState && \"closing\" !== this.readyState || (i('socket close with reason: \"%s\"', t), clearTimeout(this.pingIntervalTimer), clearTimeout(this.pingTimeoutTimer), this.transport.removeAllListeners(\"close\"), this.transport.close(), this.transport.removeAllListeners(), this.readyState = \"closed\", this.id = null, this.emit(\"close\", t, e), this.writeBuffer = [], this.prevBufferLen = 0);}, f.prototype.filterUpgrades = function (t) {for (var e = [], r = 0, n = t.length; r < n; r++) {~s(this.transports, t[r]) && e.push(t[r]);}return e;};}).call(this, r(0));}, function (t, e, r) {t.exports = r(28), t.exports.parser = r(1);}]);}, function (t, e, r) {(function (t) {var n = r(2),o = r(9),i = Object.prototype.toString,s = \"function\" == typeof t.Blob || \"[object BlobConstructor]\" === i.call(t.Blob),a = \"function\" == typeof t.File || \"[object FileConstructor]\" === i.call(t.File);e.deconstructPacket = function (t) {var e = [],r = t.data,i = t;return i.data = function t(e, r) {if (!e) return e;if (o(e)) {var i = { _placeholder: !0, num: r.length };return r.push(e), i;}if (n(e)) {for (var s = new Array(e.length), a = 0; a < e.length; a++) {s[a] = t(e[a], r);}return s;}if (\"object\" == typeof e && !(e instanceof Date)) {s = {};for (var u in e) {s[u] = t(e[u], r);}return s;}return e;}(r, e), i.attachments = e.length, { packet: i, buffers: e };}, e.reconstructPacket = function (t, e) {return t.data = function t(e, r) {if (!e) return e;if (e && e._placeholder) return r[e.num];if (n(e)) for (var o = 0; o < e.length; o++) {e[o] = t(e[o], r);} else if (\"object\" == typeof e) for (var i in e) {e[i] = t(e[i], r);}return e;}(t.data, e), t.attachments = void 0, t;}, e.removeBlobs = function (t, e) {var r = 0,i = t;!function t(u, c, f) {if (!u) return u;if (s && u instanceof Blob || a && u instanceof File) {r++;var h = new FileReader();h.onload = function () {f ? f[c] = this.result : i = this.result, --r || e(i);}, h.readAsArrayBuffer(u);} else if (n(u)) for (var p = 0; p < u.length; p++) {t(u[p], p, u);} else if (\"object\" == typeof u && !o(u)) for (var l in u) {t(u[l], l, u);}}(i), r || e(i);};}).call(this, r(1));}, function (t, e) {var r = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,n = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];t.exports = function (t) {var e = t,o = t.indexOf(\"[\"),i = t.indexOf(\"]\");-1 != o && -1 != i && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, \";\") + t.substring(i, t.length));for (var s = r.exec(t || \"\"), a = {}, u = 14; u--;) {a[n[u]] = s[u] || \"\";}return -1 != o && -1 != i && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, \":\"), a.authority = a.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\"), a.ipv6uri = !0), a;};}, function (t, e, r) {(function (e) {var n = r(21),o = r(0)(\"socket.io-client:url\");t.exports = function (t, r) {var i = t;r = r || e.location, null == t && (t = r.protocol + \"//\" + r.host), \"string\" == typeof t && (\"/\" === t.charAt(0) && (t = \"/\" === t.charAt(1) ? r.protocol + t : r.host + t), /^(https?|wss?):\\/\\//.test(t) || (o(\"protocol-less url %s\", t), t = void 0 !== r ? r.protocol + \"//\" + t : \"https://\" + t), o(\"parse %s\", t), i = n(t)), i.port || (/^(http|ws)$/.test(i.protocol) ? i.port = \"80\" : /^(http|ws)s$/.test(i.protocol) && (i.port = \"443\")), i.path = i.path || \"/\";var s = -1 !== i.host.indexOf(\":\") ? \"[\" + i.host + \"]\" : i.host;return i.id = i.protocol + \"://\" + s + \":\" + i.port, i.href = i.protocol + \"://\" + s + (r && r.port === i.port ? \"\" : \":\" + i.port), i;};}).call(this, r(1));}, function (t, e, r) {var n = r(22),o = r(4),i = r(8),s = r(0)(\"socket.io-client\");t.exports = e = u;var a = e.managers = {};function u(t, e) {\"object\" == typeof t && (e = t, t = void 0), e = e || {};var r,o = n(t),u = o.source,c = o.id,f = o.path,h = a[c] && f in a[c].nsps;return e.forceNew || e[\"force new connection\"] || !1 === e.multiplex || h ? (s(\"ignoring socket cache for %s\", u), r = i(u, e)) : (a[c] || (s(\"new io instance for %s\", u), a[c] = i(u, e)), r = a[c]), o.query && !e.query && (e.query = o.query), r.socket(o.path, e);}e.protocol = o.protocol, e.connect = u, e.Manager = r(8), e.Socket = r(7);}, function (t, e, r) {t.exports = r(23);}]);});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 32:
/*!***********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/eventTypes.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { CONNECT: \"connect\", DISCONNECT: \"disconnect\", RECONNECT: \"reconnect\", RECONNECT_ATTEMPT: \"reconnect_attempt\", CLOSE_ROOM: \"closeRoom\", OPEN_ROOM: \"openRoom\", SYSTEM_ANNOUNCEMENT: \"gonggao\", SPEAK: \"speak\", SPEAK_ERROR: \"speakError\", SPEAK_CENSOR: \"speak_censor\", REWARD: \"reward\", QUESTION: \"question\", CLOSE_QUESTION: \"closeQuestion\", ANSWER: \"answer\", CUSTOMER_MESSAGE: \"customerMessage\", SERVER_ERROR: \"serverError\", KICK_USER: \"kickUser\", REMOVE_HISTORY: \"removeHistory\", REMOVE_CONTENT: \"removeContent\", CLOSE_DANMU: \"closeDanmu\", ERROR: \"error\", HISTORY_MESSAGE: \"historyMessage\", SEND_MESSAGE: \"sendMessage\", PROHIBIT_TO_SPEAK: \"prohibitToSpeak\", LOGIN: \"login\", LOGOUT: \"loginOut\", UPDATEUSER: \"updateUser\", CLASSSTART: \"onClassStart\", CLASSEND: \"onClassEnd\", SLICEID: \"onSliceID\", SLICESTART: \"onSliceStart\", CLASSCONTROL: \"onClassControl\", MUTEALLVIDEO: \"muteAllVideo\", MUTEALLAUDIO: \"muteAllAudio\", MUTEUSERAUDIO: \"muteUserAudio\", MUTEUSERVIDEO: \"muteUserVideo\", SLICECONTROL: \"onSliceControl\", SLICEDRAW: \"onSliceDraw\", SLICEDOPEN: \"onSliceOpen\", S_QUESTION: \"S_QUESTION\", T_ANSWER: \"T_ANSWER\", UPDATE_QUESTION_HISTROY: \"UPDATE_QUESTION_HISTROY\", BULLETIN: \"bulletin\", REMOVE_BULLETIN: \"removeBulletin\", FLOWERS: \"FLOWERS\", REDPAPER: \"redpaper\", SIGN_IN: \"SIGN_IN\", STOP_SIGN_IN: \"STOP_SIGN_IN\", TO_SIGN_IN: \"TO_SIGN_IN\", LIKES: \"LIKES\", MICROPHONE: \"OPEN_MICROPHONE\", ALLOW_MICROPHONE: \"ALLOW_MICROPHONE\", SUCCESS_MICROPHONE: \"SUCCESS_MICROPHONE\", JOIN_CHANNEL_FAIL: \"JOIN_CHANNEL_FAIL\", SET_NICK: \"SET_NICK\", ONLINE_TEACHERINFO: \"O_TEACHER_INFO\", OVERTIMECONNECT: \"overtimeConnect\", SET_MANAGER_INFO: \"SET_MANAGER_INFO\", GET_TEST_QUESTION_CONTENT: \"GET_TEST_QUESTION_CONTENT\", GET_TEST_QUESTION_RESULT: \"GET_TEST_QUESTION_RESULT\", BAN_USER_ROOM: \"ban_user_room\", SYSTEM_MESSAGE: \"SYSTEM_MESSAGE\", CHAT_IMG: \"CHAT_IMG\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9jaGF0L2V2ZW50VHlwZXMuanMiXSwibmFtZXMiOlsiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJSRUNPTk5FQ1QiLCJSRUNPTk5FQ1RfQVRURU1QVCIsIkNMT1NFX1JPT00iLCJPUEVOX1JPT00iLCJTWVNURU1fQU5OT1VOQ0VNRU5UIiwiU1BFQUsiLCJTUEVBS19FUlJPUiIsIlNQRUFLX0NFTlNPUiIsIlJFV0FSRCIsIlFVRVNUSU9OIiwiQ0xPU0VfUVVFU1RJT04iLCJBTlNXRVIiLCJDVVNUT01FUl9NRVNTQUdFIiwiU0VSVkVSX0VSUk9SIiwiS0lDS19VU0VSIiwiUkVNT1ZFX0hJU1RPUlkiLCJSRU1PVkVfQ09OVEVOVCIsIkNMT1NFX0RBTk1VIiwiRVJST1IiLCJISVNUT1JZX01FU1NBR0UiLCJTRU5EX01FU1NBR0UiLCJQUk9ISUJJVF9UT19TUEVBSyIsIkxPR0lOIiwiTE9HT1VUIiwiVVBEQVRFVVNFUiIsIkNMQVNTU1RBUlQiLCJDTEFTU0VORCIsIlNMSUNFSUQiLCJTTElDRVNUQVJUIiwiQ0xBU1NDT05UUk9MIiwiTVVURUFMTFZJREVPIiwiTVVURUFMTEFVRElPIiwiTVVURVVTRVJBVURJTyIsIk1VVEVVU0VSVklERU8iLCJTTElDRUNPTlRST0wiLCJTTElDRURSQVciLCJTTElDRURPUEVOIiwiU19RVUVTVElPTiIsIlRfQU5TV0VSIiwiVVBEQVRFX1FVRVNUSU9OX0hJU1RST1kiLCJCVUxMRVRJTiIsIlJFTU9WRV9CVUxMRVRJTiIsIkZMT1dFUlMiLCJSRURQQVBFUiIsIlNJR05fSU4iLCJTVE9QX1NJR05fSU4iLCJUT19TSUdOX0lOIiwiTElLRVMiLCJNSUNST1BIT05FIiwiQUxMT1dfTUlDUk9QSE9ORSIsIlNVQ0NFU1NfTUlDUk9QSE9ORSIsIkpPSU5fQ0hBTk5FTF9GQUlMIiwiU0VUX05JQ0siLCJPTkxJTkVfVEVBQ0hFUklORk8iLCJPVkVSVElNRUNPTk5FQ1QiLCJTRVRfTUFOQUdFUl9JTkZPIiwiR0VUX1RFU1RfUVVFU1RJT05fQ09OVEVOVCIsIkdFVF9URVNUX1FVRVNUSU9OX1JFU1VMVCIsIkJBTl9VU0VSX1JPT00iLCJTWVNURU1fTUVTU0FHRSIsIkNIQVRfSU1HIl0sIm1hcHBpbmdzIjoic0dBQWMsRUFBQ0EsT0FBTyxFQUFDLFNBQVQsRUFBbUJDLFVBQVUsRUFBQyxZQUE5QixFQUEyQ0MsU0FBUyxFQUFDLFdBQXJELEVBQWlFQyxpQkFBaUIsRUFBQyxtQkFBbkYsRUFBdUdDLFVBQVUsRUFBQyxXQUFsSCxFQUE4SEMsU0FBUyxFQUFDLFVBQXhJLEVBQW1KQyxtQkFBbUIsRUFBQyxTQUF2SyxFQUFpTEMsS0FBSyxFQUFDLE9BQXZMLEVBQStMQyxXQUFXLEVBQUMsWUFBM00sRUFBd05DLFlBQVksRUFBQyxjQUFyTyxFQUFvUEMsTUFBTSxFQUFDLFFBQTNQLEVBQW9RQyxRQUFRLEVBQUMsVUFBN1EsRUFBd1JDLGNBQWMsRUFBQyxlQUF2UyxFQUF1VEMsTUFBTSxFQUFDLFFBQTlULEVBQXVVQyxnQkFBZ0IsRUFBQyxpQkFBeFYsRUFBMFdDLFlBQVksRUFBQyxhQUF2WCxFQUFxWUMsU0FBUyxFQUFDLFVBQS9ZLEVBQTBaQyxjQUFjLEVBQUMsZUFBemEsRUFBeWJDLGNBQWMsRUFBQyxlQUF4YyxFQUF3ZEMsV0FBVyxFQUFDLFlBQXBlLEVBQWlmQyxLQUFLLEVBQUMsT0FBdmYsRUFBK2ZDLGVBQWUsRUFBQyxnQkFBL2dCLEVBQWdpQkMsWUFBWSxFQUFDLGFBQTdpQixFQUEyakJDLGlCQUFpQixFQUFDLGlCQUE3a0IsRUFBK2xCQyxLQUFLLEVBQUMsT0FBcm1CLEVBQTZtQkMsTUFBTSxFQUFDLFVBQXBuQixFQUErbkJDLFVBQVUsRUFBQyxZQUExb0IsRUFBdXBCQyxVQUFVLEVBQUMsY0FBbHFCLEVBQWlyQkMsUUFBUSxFQUFDLFlBQTFyQixFQUF1c0JDLE9BQU8sRUFBQyxXQUEvc0IsRUFBMnRCQyxVQUFVLEVBQUMsY0FBdHVCLEVBQXF2QkMsWUFBWSxFQUFDLGdCQUFsd0IsRUFBbXhCQyxZQUFZLEVBQUMsY0FBaHlCLEVBQSt5QkMsWUFBWSxFQUFDLGNBQTV6QixFQUEyMEJDLGFBQWEsRUFBQyxlQUF6MUIsRUFBeTJCQyxhQUFhLEVBQUMsZUFBdjNCLEVBQXU0QkMsWUFBWSxFQUFDLGdCQUFwNUIsRUFBcTZCQyxTQUFTLEVBQUMsYUFBLzZCLEVBQTY3QkMsVUFBVSxFQUFDLGFBQXg4QixFQUFzOUJDLFVBQVUsRUFBQyxZQUFqK0IsRUFBOCtCQyxRQUFRLEVBQUMsVUFBdi9CLEVBQWtnQ0MsdUJBQXVCLEVBQUMseUJBQTFoQyxFQUFvakNDLFFBQVEsRUFBQyxVQUE3akMsRUFBd2tDQyxlQUFlLEVBQUMsZ0JBQXhsQyxFQUF5bUNDLE9BQU8sRUFBQyxTQUFqbkMsRUFBMm5DQyxRQUFRLEVBQUMsVUFBcG9DLEVBQStvQ0MsT0FBTyxFQUFDLFNBQXZwQyxFQUFpcUNDLFlBQVksRUFBQyxjQUE5cUMsRUFBNnJDQyxVQUFVLEVBQUMsWUFBeHNDLEVBQXF0Q0MsS0FBSyxFQUFDLE9BQTN0QyxFQUFtdUNDLFVBQVUsRUFBQyxpQkFBOXVDLEVBQWd3Q0MsZ0JBQWdCLEVBQUMsa0JBQWp4QyxFQUFveUNDLGtCQUFrQixFQUFDLG9CQUF2ekMsRUFBNDBDQyxpQkFBaUIsRUFBQyxtQkFBOTFDLEVBQWszQ0MsUUFBUSxFQUFDLFVBQTMzQyxFQUFzNENDLGtCQUFrQixFQUFDLGdCQUF6NUMsRUFBMDZDQyxlQUFlLEVBQUMsaUJBQTE3QyxFQUE0OENDLGdCQUFnQixFQUFDLGtCQUE3OUMsRUFBZy9DQyx5QkFBeUIsRUFBQywyQkFBMWdELEVBQXNpREMsd0JBQXdCLEVBQUMsMEJBQS9qRCxFQUEwbERDLGFBQWEsRUFBQyxlQUF4bUQsRUFBd25EQyxjQUFjLEVBQUMsZ0JBQXZvRCxFQUF3cERDLFFBQVEsRUFBQyxVQUFqcUQsRSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0e0NPTk5FQ1Q6XCJjb25uZWN0XCIsRElTQ09OTkVDVDpcImRpc2Nvbm5lY3RcIixSRUNPTk5FQ1Q6XCJyZWNvbm5lY3RcIixSRUNPTk5FQ1RfQVRURU1QVDpcInJlY29ubmVjdF9hdHRlbXB0XCIsQ0xPU0VfUk9PTTpcImNsb3NlUm9vbVwiLE9QRU5fUk9PTTpcIm9wZW5Sb29tXCIsU1lTVEVNX0FOTk9VTkNFTUVOVDpcImdvbmdnYW9cIixTUEVBSzpcInNwZWFrXCIsU1BFQUtfRVJST1I6XCJzcGVha0Vycm9yXCIsU1BFQUtfQ0VOU09SOlwic3BlYWtfY2Vuc29yXCIsUkVXQVJEOlwicmV3YXJkXCIsUVVFU1RJT046XCJxdWVzdGlvblwiLENMT1NFX1FVRVNUSU9OOlwiY2xvc2VRdWVzdGlvblwiLEFOU1dFUjpcImFuc3dlclwiLENVU1RPTUVSX01FU1NBR0U6XCJjdXN0b21lck1lc3NhZ2VcIixTRVJWRVJfRVJST1I6XCJzZXJ2ZXJFcnJvclwiLEtJQ0tfVVNFUjpcImtpY2tVc2VyXCIsUkVNT1ZFX0hJU1RPUlk6XCJyZW1vdmVIaXN0b3J5XCIsUkVNT1ZFX0NPTlRFTlQ6XCJyZW1vdmVDb250ZW50XCIsQ0xPU0VfREFOTVU6XCJjbG9zZURhbm11XCIsRVJST1I6XCJlcnJvclwiLEhJU1RPUllfTUVTU0FHRTpcImhpc3RvcnlNZXNzYWdlXCIsU0VORF9NRVNTQUdFOlwic2VuZE1lc3NhZ2VcIixQUk9ISUJJVF9UT19TUEVBSzpcInByb2hpYml0VG9TcGVha1wiLExPR0lOOlwibG9naW5cIixMT0dPVVQ6XCJsb2dpbk91dFwiLFVQREFURVVTRVI6XCJ1cGRhdGVVc2VyXCIsQ0xBU1NTVEFSVDpcIm9uQ2xhc3NTdGFydFwiLENMQVNTRU5EOlwib25DbGFzc0VuZFwiLFNMSUNFSUQ6XCJvblNsaWNlSURcIixTTElDRVNUQVJUOlwib25TbGljZVN0YXJ0XCIsQ0xBU1NDT05UUk9MOlwib25DbGFzc0NvbnRyb2xcIixNVVRFQUxMVklERU86XCJtdXRlQWxsVmlkZW9cIixNVVRFQUxMQVVESU86XCJtdXRlQWxsQXVkaW9cIixNVVRFVVNFUkFVRElPOlwibXV0ZVVzZXJBdWRpb1wiLE1VVEVVU0VSVklERU86XCJtdXRlVXNlclZpZGVvXCIsU0xJQ0VDT05UUk9MOlwib25TbGljZUNvbnRyb2xcIixTTElDRURSQVc6XCJvblNsaWNlRHJhd1wiLFNMSUNFRE9QRU46XCJvblNsaWNlT3BlblwiLFNfUVVFU1RJT046XCJTX1FVRVNUSU9OXCIsVF9BTlNXRVI6XCJUX0FOU1dFUlwiLFVQREFURV9RVUVTVElPTl9ISVNUUk9ZOlwiVVBEQVRFX1FVRVNUSU9OX0hJU1RST1lcIixCVUxMRVRJTjpcImJ1bGxldGluXCIsUkVNT1ZFX0JVTExFVElOOlwicmVtb3ZlQnVsbGV0aW5cIixGTE9XRVJTOlwiRkxPV0VSU1wiLFJFRFBBUEVSOlwicmVkcGFwZXJcIixTSUdOX0lOOlwiU0lHTl9JTlwiLFNUT1BfU0lHTl9JTjpcIlNUT1BfU0lHTl9JTlwiLFRPX1NJR05fSU46XCJUT19TSUdOX0lOXCIsTElLRVM6XCJMSUtFU1wiLE1JQ1JPUEhPTkU6XCJPUEVOX01JQ1JPUEhPTkVcIixBTExPV19NSUNST1BIT05FOlwiQUxMT1dfTUlDUk9QSE9ORVwiLFNVQ0NFU1NfTUlDUk9QSE9ORTpcIlNVQ0NFU1NfTUlDUk9QSE9ORVwiLEpPSU5fQ0hBTk5FTF9GQUlMOlwiSk9JTl9DSEFOTkVMX0ZBSUxcIixTRVRfTklDSzpcIlNFVF9OSUNLXCIsT05MSU5FX1RFQUNIRVJJTkZPOlwiT19URUFDSEVSX0lORk9cIixPVkVSVElNRUNPTk5FQ1Q6XCJvdmVydGltZUNvbm5lY3RcIixTRVRfTUFOQUdFUl9JTkZPOlwiU0VUX01BTkFHRVJfSU5GT1wiLEdFVF9URVNUX1FVRVNUSU9OX0NPTlRFTlQ6XCJHRVRfVEVTVF9RVUVTVElPTl9DT05URU5UXCIsR0VUX1RFU1RfUVVFU1RJT05fUkVTVUxUOlwiR0VUX1RFU1RfUVVFU1RJT05fUkVTVUxUXCIsQkFOX1VTRVJfUk9PTTpcImJhbl91c2VyX3Jvb21cIixTWVNURU1fTUVTU0FHRTpcIlNZU1RFTV9NRVNTQUdFXCIsQ0hBVF9JTUc6XCJDSEFUX0lNR1wifTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 33:
/*!************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/emotionList.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var emotionList = [{ url: \"//livestatic.polyv.net/assets/images/em/1.png\", title: \"微笑\", position: \"0px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/2.png\", title: \"撇嘴\", position: \"-48px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/3.png\", title: \"色\", position: \"-96px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/4.png\", title: \"发呆\", position: \"-144px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/5.png\", title: \"得意\", position: \"-192px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/6.png\", title: \"流泪\", position: \"-240px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/7.png\", title: \"害羞\", position: \"-288px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/8.png\", title: \"闭嘴\", position: \"-336px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/9.png\", title: \"睡\", position: \"-384px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/10.png\", title: \"大哭\", position: \"-432px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/11.png\", title: \"尴尬\", position: \"-480px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/12.png\", title: \"发怒\", position: \"-528px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/13.png\", title: \"调皮\", position: \"-576px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/14.png\", title: \"呲牙\", position: \"-624px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/15.png\", title: \"惊讶\", position: \"-672px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/16.png\", title: \"难过\", position: \"-720px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/17.png\", title: \"酷\", position: \"-768px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/18.png\", title: \"冷汗\", position: \"-816px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/19.png\", title: \"抓狂\", position: \"-864px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/20.png\", title: \"吐\", position: \"-912px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/21.png\", title: \"偷笑\", position: \"-960px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/22.png\", title: \"可爱\", position: \"-1008px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/23.png\", title: \"白眼\", position: \"-1056px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/24.png\", title: \"傲慢\", position: \"-1104px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/25.png\", title: \"饥饿\", position: \"-1152px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/26.png\", title: \"困\", position: \"-1200px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/27.png\", title: \"惊恐\", position: \"-1248px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/28.png\", title: \"流汗\", position: \"-1296px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/29.png\", title: \"憨笑\", position: \"-1344px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/30.png\", title: \"大兵\", position: \"-1392px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/31.png\", title: \"奋斗\", position: \"-1440px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/32.png\", title: \"咒骂\", position: \"-1488px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/33.png\", title: \"疑问\", position: \"-1536px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/34.png\", title: \"嘘\", position: \"-1584px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/35.png\", title: \"晕\", position: \"-1632px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/36.png\", title: \"折磨\", position: \"-1680px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/37.png\", title: \"衰\", position: \"-1728px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/38.png\", title: \"骷髅\", position: \"-1776px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/39.png\", title: \"敲打\", position: \"-1824px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/40.png\", title: \"再见\", position: \"-1872px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/41.png\", title: \"擦汗\", position: \"-1920px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/42.png\", title: \"抠鼻\", position: \"-1968px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/43.png\", title: \"鼓掌\", position: \"-2016px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/44.png\", title: \"糗大了\", position: \"-2064px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/45.png\", title: \"坏笑\", position: \"-2112px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/46.png\", title: \"左哼哼\", position: \"-2160px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/47.png\", title: \"右哼哼\", position: \"-2208px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/48.png\", title: \"哈欠\", position: \"-2256px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/49.png\", title: \"鄙视\", position: \"-2304px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/50.png\", title: \"委屈\", position: \"-2352px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/51.png\", title: \"快哭了\", position: \"-2400px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/52.png\", title: \"阴险\", position: \"-2448px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/53.png\", title: \"亲亲\", position: \"-2496px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/54.png\", title: \"吓\", position: \"-2544px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/55.png\", title: \"可怜\", position: \"-2592px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/56.png\", title: \"菜刀\", position: \"-2640px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/57.png\", title: \"西瓜\", position: \"-2688px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/58.png\", title: \"啤酒\", position: \"-2736px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/59.png\", title: \"篮球\", position: \"-2784px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/60.png\", title: \"乒乓\", position: \"-2832px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/61.png\", title: \"咖啡\", position: \"-2880px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/62.png\", title: \"饭\", position: \"-2928px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/63.png\", title: \"猪头\", position: \"-2976px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/64.png\", title: \"玫瑰\", position: \"-3024px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/65.png\", title: \"凋谢\", position: \"-3072px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/66.png\", title: \"示爱\", position: \"-3120px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/67.png\", title: \"爱心\", position: \"-3168px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/68.png\", title: \"心碎\", position: \"-3216px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/69.png\", title: \"蛋糕\", position: \"-3264px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/70.png\", title: \"闪电\", position: \"-3312px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/71.png\", title: \"炸弹\", position: \"-3360px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/72.png\", title: \"刀\", position: \"-3408px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/73.png\", title: \"足球\", position: \"-3456px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/74.png\", title: \"瓢虫\", position: \"-3504px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/75.png\", title: \"便便\", position: \"-3552px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/76.png\", title: \"月亮\", position: \"-3600px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/77.png\", title: \"太阳\", position: \"-3648px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/78.png\", title: \"礼物\", position: \"-3696px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/79.png\", title: \"拥抱\", position: \"-3744px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/80.png\", title: \"强\", position: \"-3792px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/81.png\", title: \"弱\", position: \"-3840px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/82.png\", title: \"握手\", position: \"-3888px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/83.png\", title: \"胜利\", position: \"-3936px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/84.png\", title: \"抱拳\", position: \"-3984px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/85.png\", title: \"勾引\", position: \"-4032px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/86.png\", title: \"拳头\", position: \"-4080px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/87.png\", title: \"差劲\", position: \"-4128px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/88.png\", title: \"爱你\", position: \"-4176px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/89.png\", title: \"NO\", position: \"-4224px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/90.png\", title: \"OK\", position: \"-4272px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/91.png\", title: \"爱情\", position: \"-4320px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/92.png\", title: \"飞吻\", position: \"-4368px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/93.png\", title: \"跳跳\", position: \"-4416px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/94.png\", title: \"发抖\", position: \"-4464px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/95.png\", title: \"怄火\", position: \"-4512px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/96.png\", title: \"转圈\", position: \"-4560px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/97.png\", title: \"磕头\", position: \"-4608px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/98.png\", title: \"回头\", position: \"-4656px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/99.png\", title: \"跳绳\", position: \"-4704px 0px\" }, { url: \"//livestatic.polyv.net/assets/images/em/100.png\", title: \"挥手\", position: \"-4752px 0px\" }];module.exports = emotionList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 34:
/*!****************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/api.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _plvRequest = _interopRequireDefault(__webpack_require__(/*! ../api/plv-request */ 35));var _config = __webpack_require__(/*! ../utils/config */ 39);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var mainHost = _config.URL.mainHost,historyUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/get-history-contents\"),_removeHistoryUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/remove-content\"),questionHistoryUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/get-question-contents\"),getCurrentSign = \"\".concat(mainHost, \"/live/v3/channel/chat/get-checkin\"),getCheckinList = \"\".concat(mainHost, \"/live/v3/channel/chat/get-checkin-list\"),userUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/get-user-list\"),bannedListUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/get-banned-list\"),microphoneStatusUrl = \"\".concat(mainHost, \"/live/v3/channel/chat/get-microphone-status\"),_getIsKicked = \"\".concat(mainHost, \"/live/v3/channel/chat/is-kicked\");var _default = { getIsKicked: function getIsKicked(e, t) {return (0, _plvRequest.default)(_getIsKicked, { qs: { roomId: e, userId: t }, method: \"POST\" });}, setNickname: function setNickname(e, t) {return (0, _plvRequest.default)(\"\".concat(mainHost, \"/\").concat(e, \"/set-nickname\"), { body: { nickname: t } });}, getOnlineUserList: function getOnlineUserList(e) {return (0, _plvRequest.default)(userUrl, { body: { channelId: e, page: 1, pageSize: 100, hide: 0 } });}, getHistoryMessage: function getHistoryMessage(e, t, n) {return (0, _plvRequest.default)(historyUrl, { body: { channelId: e.roomName, start: t, end: t + n, hideIp: 0, fullMessage: 1 } });}, getQuestionHistoryMessage: function getQuestionHistoryMessage(e) {var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;return (0, _plvRequest.default)(questionHistoryUrl, { body: { channelId: e, start: t, end: t + n } });}, getCurrentSignRecord: function getCurrentSignRecord(e) {return (0, _plvRequest.default)(getCurrentSign, { body: { channelId: e.channelId, checkinId: e.checkinId } });}, getHistorySignRecord: function getHistorySignRecord(e) {return (0, _plvRequest.default)(getCheckinList, { body: { channelId: e.channelId, startDate: e.startIndate, endDate: e.endIndate } });}, getBannedList: function getBannedList(e) {return (0, _plvRequest.default)(bannedListUrl, { body: { channelId: e, type: \"ip\" } });}, removeHistoryUrl: function removeHistoryUrl(e, t) {return (0, _plvRequest.default)(_removeHistoryUrl, { body: { channelId: t.roomName, id: e } });}, checkCurrentStatus: function checkCurrentStatus(e) {return (0, _plvRequest.default)(microphoneStatusUrl, { body: { channelId: e } });} };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9jaGF0L2FwaS5qcyJdLCJuYW1lcyI6WyJtYWluSG9zdCIsIlVSTCIsImhpc3RvcnlVcmwiLCJyZW1vdmVIaXN0b3J5VXJsIiwicXVlc3Rpb25IaXN0b3J5VXJsIiwiZ2V0Q3VycmVudFNpZ24iLCJnZXRDaGVja2luTGlzdCIsInVzZXJVcmwiLCJiYW5uZWRMaXN0VXJsIiwibWljcm9waG9uZVN0YXR1c1VybCIsImdldElzS2lja2VkIiwiZSIsInQiLCJxcyIsInJvb21JZCIsInVzZXJJZCIsIm1ldGhvZCIsInNldE5pY2tuYW1lIiwiYm9keSIsIm5pY2tuYW1lIiwiZ2V0T25saW5lVXNlckxpc3QiLCJjaGFubmVsSWQiLCJwYWdlIiwicGFnZVNpemUiLCJoaWRlIiwiZ2V0SGlzdG9yeU1lc3NhZ2UiLCJuIiwicm9vbU5hbWUiLCJzdGFydCIsImVuZCIsImhpZGVJcCIsImZ1bGxNZXNzYWdlIiwiZ2V0UXVlc3Rpb25IaXN0b3J5TWVzc2FnZSIsImdldEN1cnJlbnRTaWduUmVjb3JkIiwiY2hlY2tpbklkIiwiZ2V0SGlzdG9yeVNpZ25SZWNvcmQiLCJzdGFydERhdGUiLCJzdGFydEluZGF0ZSIsImVuZERhdGUiLCJlbmRJbmRhdGUiLCJnZXRCYW5uZWRMaXN0IiwidHlwZSIsImlkIiwiY2hlY2tDdXJyZW50U3RhdHVzIl0sIm1hcHBpbmdzIjoidUZBQUEsNEZBQXdDLDZELDZGQUFzQyxJQUFVQSxRQUFWLEdBQW9CQyxXQUFwQixDQUFDRCxRQUFELENBQXdCRSxVQUF4QixhQUFzQ0YsUUFBdEMsZ0RBQTJGRyxpQkFBM0YsYUFBK0dILFFBQS9HLDBDQUE4Skksa0JBQTlKLGFBQW9MSixRQUFwTCxpREFBME9LLGNBQTFPLGFBQTRQTCxRQUE1UCx1Q0FBd1NNLGNBQXhTLGFBQTBUTixRQUExVCw0Q0FBMldPLE9BQTNXLGFBQXNYUCxRQUF0WCx5Q0FBb2FRLGFBQXBhLGFBQXFiUixRQUFyYiwyQ0FBcWVTLG1CQUFy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QUYsRUFBbjJCLEUiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tXCIuLi9hcGkvcGx2LXJlcXVlc3RcIjtpbXBvcnR7VVJMfWZyb21cIi4uL3V0aWxzL2NvbmZpZ1wiO2NvbnN0e21haW5Ib3N0Om1haW5Ib3N0fT1VUkwsaGlzdG9yeVVybD1gJHttYWluSG9zdH0vbGl2ZS92My9jaGFubmVsL2NoYXQvZ2V0LWhpc3RvcnktY29udGVudHNgLHJlbW92ZUhpc3RvcnlVcmw9YCR7bWFpbkhvc3R9L2xpdmUvdjMvY2hhbm5lbC9jaGF0L3JlbW92ZS1jb250ZW50YCxxdWVzdGlvbkhpc3RvcnlVcmw9YCR7bWFpbkhvc3R9L2xpdmUvdjMvY2hhbm5lbC9jaGF0L2dldC1xdWVzdGlvbi1jb250ZW50c2AsZ2V0Q3VycmVudFNpZ249YCR7bWFpbkhvc3R9L2xpdmUvdjMvY2hhbm5lbC9jaGF0L2dldC1jaGVja2luYCxnZXRDaGVja2luTGlzdD1gJHttYWluSG9zdH0vbGl2ZS92My9jaGFubmVsL2NoYXQvZ2V0LWNoZWNraW4tbGlzdGAsdXNlclVybD1gJHttYWluSG9zdH0vbGl2ZS92My9jaGFubmVsL2NoYXQvZ2V0LXVzZXItbGlzdGAsYmFubmVkTGlzdFVybD1gJHttYWluSG9zdH0vbGl2ZS92My9jaGFubmVsL2NoYXQvZ2V0LWJhbm5lZC1saXN0YCxtaWNyb3Bob25lU3RhdHVzVXJsPWAke21haW5Ib3N0fS9saXZlL3YzL2NoYW5uZWwvY2hhdC9nZXQtbWljcm9waG9uZS1zdGF0dXNgLGdldElzS2lja2VkPWAke21haW5Ib3N0fS9saXZlL3YzL2NoYW5uZWwvY2hhdC9pcy1raWNrZWRgO2V4cG9ydCBkZWZhdWx0e2dldElzS2lja2VkOihlLHQpPT5yZXF1ZXN0KGdldElzS2lja2VkLHtxczp7cm9vbUlkOmUsdXNlcklkOnR9LG1ldGhvZDpcIlBPU1RcIn0pLHNldE5pY2tuYW1lOihlLHQpPT5yZXF1ZXN0KGAke21haW5Ib3N0fS8ke2V9L3NldC1uaWNrbmFtZWAse2JvZHk6e25pY2tuYW1lOnR9fSksZ2V0T25saW5lVXNlckxpc3Q6ZT0+cmVxdWVzdCh1c2VyVXJsLHtib2R5OntjaGFubmVsSWQ6ZSxwYWdlOjEscGFnZVNpemU6MTAwLGhpZGU6MH19KSxnZXRIaXN0b3J5TWVzc2FnZTooZSx0LG4pPT5yZXF1ZXN0KGhpc3RvcnlVcmwse2JvZHk6e2NoYW5uZWxJZDplLnJvb21OYW1lLHN0YXJ0OnQsZW5kOnQrbixoaWRlSXA6MCxmdWxsTWVzc2FnZToxfX0pLGdldFF1ZXN0aW9uSGlzdG9yeU1lc3NhZ2U6KGUsdD0wLG49MjApPT5yZXF1ZXN0KHF1ZXN0aW9uSGlzdG9yeVVybCx7Ym9keTp7Y2hhbm5lbElkOmUsc3RhcnQ6dCxlbmQ6dCtufX0pLGdldEN1cnJlbnRTaWduUmVjb3JkOmU9PnJlcXVlc3QoZ2V0Q3VycmVudFNpZ24se2JvZHk6e2NoYW5uZWxJZDplLmNoYW5uZWxJZCxjaGVja2luSWQ6ZS5jaGVja2luSWR9fSksZ2V0SGlzdG9yeVNpZ25SZWNvcmQ6ZT0+cmVxdWVzdChnZXRDaGVja2luTGlzdCx7Ym9keTp7Y2hhbm5lbElkOmUuY2hhbm5lbElkLHN0YXJ0RGF0ZTplLnN0YXJ0SW5kYXRlLGVuZERhdGU6ZS5lbmRJbmRhdGV9fSksZ2V0QmFubmVkTGlzdDplPT5yZXF1ZXN0KGJhbm5lZExpc3RVcmwse2JvZHk6e2NoYW5uZWxJZDplLHR5cGU6XCJpcFwifX0pLHJlbW92ZUhpc3RvcnlVcmw6KGUsdCk9PnJlcXVlc3QocmVtb3ZlSGlzdG9yeVVybCx7Ym9keTp7Y2hhbm5lbElkOnQucm9vbU5hbWUsaWQ6ZX19KSxjaGVja0N1cnJlbnRTdGF0dXM6ZT0+cmVxdWVzdChtaWNyb3Bob25lU3RhdHVzVXJsLHtib2R5OntjaGFubmVsSWQ6ZX19KX07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),

/***/ 35:
/*!***********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/api/plv-request.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 21));var _md = _interopRequireDefault(__webpack_require__(/*! ../utils/md5 */ 30));var _request = _interopRequireDefault(__webpack_require__(/*! ../utils/request */ 36));var _index = _interopRequireDefault(__webpack_require__(/*! ../../store/index */ 37));var _runtimeModule = _interopRequireDefault(__webpack_require__(/*! ../regenerator-runtime/runtime-module */ 24));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function resortParam(t) {var e = Object.keys(t).filter(function (t) {return \"sign\" !== t;}).sort();var r = \"\";return e.forEach(function (e) {r += \"\".concat(e).concat(t[e]);}), r;}function getSign(t, e) {var r = _objectSpread({}, t),n = resortParam(t);return r.sign = (0, _md.default)(\"plyMinApp\".concat(n, \"plyMinApp\")).toUpperCase(), (0, _request.default)(e, { qs: r });}function getSecretSign(t, e) {var r = resortParam(t);return (0, _md.default)(\"\".concat(e).concat(r).concat(e)).toUpperCase();}var pRequest = /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(t, e, r) {var _store$get, _t, _r, n, o, s, _t2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (r) {_context.next = 18;break;}_store$get = _index.default.get(\"app\"), _t = _store$get.apiId, _r = _store$get.apiSecret, n = _store$get.verifyUrl;_context.t0 = _regenerator.default.keys(e);case 3:if ((_context.t1 = _context.t0()).done) {_context.next = 18;break;}o = _context.t1.value;if (!((\"qs\" === o || \"body\" === o) && e[o])) {_context.next = 16;break;}s = _objectSpread({}, e[o]);if (!(s.appId = _t, s.timestamp = Date.now(), n)) {_context.next = 14;break;}_context.next = 10;return getSign(s, n);case 10:_t2 = _context.sent;s.sign = _t2.data.data.sign;_context.next = 15;break;case 14:s.sign = getSecretSign(s, _r);case 15:e[o] = s;case 16:_context.next = 3;break;case 18:return _context.abrupt(\"return\", (0, _request.default)(t, e));case 19:case \"end\":return _context.stop();}}}, _callee, this);}));return function pRequest(_x, _x2, _x3) {return _ref.apply(this, arguments);};}();var _default = pRequest;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9hcGkvcGx2LXJlcXVlc3QuanMiXSwibmFtZXMiOlsicmVzb3J0UGFyYW0iLCJ0IiwiZSIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJzb3J0IiwiciIsImZvckVhY2giLCJnZXRTaWduIiwibiIsInNpZ24iLCJ0b1VwcGVyQ2FzZSIsInFzIiwiZ2V0U2VjcmV0U2lnbiIsInBSZXF1ZXN0Iiwic3RvcmUiLCJnZXQiLCJhcGlJZCIsImFwaVNlY3JldCIsInZlcmlmeVVybCIsIm8iLCJzIiwiYXBwSWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiZGF0YSJdLCJtYXBwaW5ncyI6IjJNQUFBLDhFQUE4Qix1RkFBc0Msc0ZBQXFDLGtILDQyQ0FBc0UsU0FBU0EsV0FBVCxDQUFxQkMsQ0FBckIsRUFBdUIsQ0FBQyxJQUFNQyxDQUFDLEdBQUNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxDQUFaLEVBQWVJLE1BQWYsQ0FBc0IsVUFBQUosQ0FBQyxVQUFFLFdBQVNBLENBQVgsRUFBdkIsRUFBcUNLLElBQXJDLEVBQVIsQ0FBb0QsSUFBSUMsQ0FBQyxHQUFDLEVBQU4sQ0FBUyxPQUFPTCxDQUFDLENBQUNNLE9BQUYsQ0FBVSxVQUFBTixDQUFDLEVBQUUsQ0FBQ0ssQ0FBQyxjQUFLTCxDQUFMLFNBQVNELENBQUMsQ0FBQ0MsQ0FBRCxDQUFWLENBQUQsQ0FBaUIsQ0FBL0IsR0FBaUNLLENBQXhDLENBQTBDLFVBQVNFLE9BQVQsQ0FBaUJSLENBQWpCLEVBQW1CQyxDQUFuQixFQUFxQixDQUFDLElBQU1LLENBQUMscUJBQUtOLENBQUwsQ0FBUCxDQUFlUyxDQUFDLEdBQUNWLFdBQVcsQ0FBQ0MsQ0FBRCxDQUE1QixDQUFnQyxPQUFPTSxDQUFDLENBQUNJLElBQUYsR0FBTyxvQ0FBZ0JELENBQWhCLGdCQUE4QkUsV0FBOUIsRUFBUCxFQUFtRCxzQkFBUVYsQ0FBUixFQUFVLEVBQUNXLEVBQUUsRUFBQ04sQ0FBSixFQUFWLENBQTFELENBQTRFLFVBQVNPLGFBQVQsQ0FBdUJiLENBQXZCLEVBQXlCQyxDQUF6QixFQUEyQixDQUFDLElBQU1LLENBQUMsR0FBQ1AsV0FBVyxDQUFDQyxDQUFELENBQW5CLENBQXVCLE9BQU8sMkJBQU9DLENBQVAsU0FBV0ssQ0FBWCxTQUFlTCxDQUFmLEdBQW9CVSxXQUFwQixFQUFQLENBQXlDLEtBQU1HLFFBQVEsa0dBQUMsaUJBQU1kLENBQU4sRUFBUUMsQ0FBUixFQUFVSyxDQUFWLG9LQUFtQkEsQ0FBbkIsMENBQTZEUyxlQUFNQyxHQUFOLENBQVUsS0FBVixDQUE3RCxFQUFrQ2hCLEVBQWxDLGNBQTRCaUIsS0FBNUIsRUFBOENYLEVBQTlDLGNBQW9DWSxTQUFwQyxFQUEwRFQsQ0FBMUQsY0FBZ0RVLFNBQWhELHlDQUE2RmxCLENBQTdGLDRFQUF3Rm1CLENBQXhGLDJCQUFrRyxDQUFDLFNBQU9BLENBQVAsSUFBVSxXQUFTQSxDQUFwQixLQUF3Qm5CLENBQUMsQ0FBQ21CLENBQUQsQ0FBM0gsOEJBQXNJQyxDQUF0SSxxQkFBNElwQixDQUFDLENBQUNtQixDQUFELENBQTdJLFFBQXFKQyxDQUFDLENBQUNDLEtBQUYsR0FBUXRCLEVBQVIsRUFBVXFCLENBQUMsQ0FBQ0UsU0FBRixHQUFZQyxJQUFJLENBQUNDLEdBQUwsRUFBdEIsRUFBaUNoQixDQUF0TCx3REFBdU1ELE9BQU8sQ0FBQ2EsQ0FBRCxFQUFHWixDQUFILENBQTlNLFNBQStMVCxHQUEvTCxpQkFBb05xQixDQUFDLENBQUNYLElBQUYsR0FBT1YsR0FBQyxDQUFDMEIsSUFBRixDQUFPQSxJQUFQLENBQVloQixJQUFuQixDQUFwTixpQ0FBaVBXLENBQUMsQ0FBQ1gsSUFBRixHQUFPRyxhQUFhLENBQUNRLENBQUQsRUFBR2YsRUFBSCxDQUFwQixDQUFqUCxRQUEyUUwsQ0FBQyxDQUFDbUIsQ0FBRCxDQUFELEdBQUtDLENBQUwsQ0FBM1EseUVBQTBSLHNCQUFRckIsQ0FBUixFQUFVQyxDQUFWLENBQTFSLGlFQUFELG1CQUFSYSxRQUFRLHdEQUFkLEMsZUFBc1VBLFEiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWQ1IGZyb21cIi4uL3V0aWxzL21kNVwiO2ltcG9ydCByZXF1ZXN0IGZyb21cIi4uL3V0aWxzL3JlcXVlc3RcIjtpbXBvcnQgc3RvcmUgZnJvbVwiLi4vLi4vc3RvcmUvaW5kZXhcIjtpbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb21cIi4uL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGVcIjtmdW5jdGlvbiByZXNvcnRQYXJhbSh0KXtjb25zdCBlPU9iamVjdC5rZXlzKHQpLmZpbHRlcih0PT5cInNpZ25cIiE9PXQpLnNvcnQoKTtsZXQgcj1cIlwiO3JldHVybiBlLmZvckVhY2goZT0+e3IrPWAke2V9JHt0W2VdfWB9KSxyfWZ1bmN0aW9uIGdldFNpZ24odCxlKXtjb25zdCByPXsuLi50fSxuPXJlc29ydFBhcmFtKHQpO3JldHVybiByLnNpZ249bWQ1KGBwbHlNaW5BcHAke259cGx5TWluQXBwYCkudG9VcHBlckNhc2UoKSxyZXF1ZXN0KGUse3FzOnJ9KX1mdW5jdGlvbiBnZXRTZWNyZXRTaWduKHQsZSl7Y29uc3Qgcj1yZXNvcnRQYXJhbSh0KTtyZXR1cm4gbWQ1KGAke2V9JHtyfSR7ZX1gKS50b1VwcGVyQ2FzZSgpfWNvbnN0IHBSZXF1ZXN0PWFzeW5jKHQsZSxyKT0+e2lmKCFyKXtjb25zdHthcGlJZDp0LGFwaVNlY3JldDpyLHZlcmlmeVVybDpufT1zdG9yZS5nZXQoXCJhcHBcIik7Zm9yKGNvbnN0IG8gaW4gZSlpZigoXCJxc1wiPT09b3x8XCJib2R5XCI9PT1vKSYmZVtvXSl7Y29uc3Qgcz17Li4uZVtvXX07aWYocy5hcHBJZD10LHMudGltZXN0YW1wPURhdGUubm93KCksbil7Y29uc3QgdD1hd2FpdCBnZXRTaWduKHMsbik7cy5zaWduPXQuZGF0YS5kYXRhLnNpZ259ZWxzZSBzLnNpZ249Z2V0U2VjcmV0U2lnbihzLHIpO2Vbb109c319cmV0dXJuIHJlcXVlc3QodCxlKX07ZXhwb3J0IGRlZmF1bHQgcFJlcXVlc3Q7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 36:
/*!*********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/request.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var defaultoptions = { url: void 0, method: \"GET\", qs: void 0, body: void 0, headers: void 0, type: \"json\", contentType: \"application/json\", crossOrigin: !0, credentials: void 0 },makeOptions = function makeOptions(t, e) {var s = {};return e ? (s = e, t && (s.url = t)) : \"string\" == typeof t ? s.url = t : s = t, s = Object.assign({}, defaultoptions, s);},addQs = function addQs(t, e) {var s = \"\",o = t;if (e && \"object\" == typeof e) {var _arr = Object.keys(e);for (var _i = 0; _i < _arr.length; _i++) {var _t = _arr[_i];s += \"&\".concat(_t, \"=\").concat(e[_t]);}s.length > 0 && (t.split(\"?\").length < 2 ? s = s.substring(1) : 0 === t.split(\"?\")[1].length && (s = s.substring(1))), o = -1 === t.indexOf(\"?\") ? \"\".concat(t, \"?\").concat(s) : \"\".concat(t).concat(s);}return o;},request = function request(t, e) {var s = makeOptions(t, e),o = s.method,n = s.body,d = s.headers,r = s.qs,i = s.type,a = s.contentType;var l = s.url;r && (l = addQs(l, r));var u = d;return d && d[\"content-type\"] || !a || (u = Object.assign({}, d, { \"content-type\": a })), new Promise(function (t, e) {wx.request({ url: l, method: o, data: n, header: u, dataType: i, success: function success(s) {(s.statusCode < 200 || s.statusCode >= 300) && e(s), t(s);}, fail: function fail(t) {e(t);} });});};var _default = request;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi91dGlscy9yZXF1ZXN0LmpzIl0sIm5hbWVzIjpbImRlZmF1bHRvcHRpb25zIiwidXJsIiwibWV0aG9kIiwicXMiLCJib2R5IiwiaGVhZGVycyIsInR5cGUiLCJjb250ZW50VHlwZSIsImNyb3NzT3JpZ2luIiwiY3JlZGVudGlhbHMiLCJtYWtlT3B0aW9ucyIsInQiLCJlIiwicyIsIk9iamVjdCIsImFzc2lnbiIsImFkZFFzIiwibyIsImtleXMiLCJsZW5ndGgiLCJzcGxpdCIsInN1YnN0cmluZyIsImluZGV4T2YiLCJyZXF1ZXN0IiwibiIsImQiLCJyIiwiaSIsImEiLCJsIiwidSIsIlByb21pc2UiLCJ3eCIsImRhdGEiLCJoZWFkZXIiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJzdGF0dXNDb2RlIiwiZmFpbCJdLCJtYXBwaW5ncyI6InVGQUFBLElBQU1BLGNBQWMsR0FBQyxFQUFDQyxHQUFHLEVBQUMsS0FBSyxDQUFWLEVBQVlDLE1BQU0sRUFBQyxLQUFuQixFQUF5QkMsRUFBRSxFQUFDLEtBQUssQ0FBakMsRUFBbUNDLElBQUksRUFBQyxLQUFLLENBQTdDLEVBQStDQyxPQUFPLEVBQUMsS0FBSyxDQUE1RCxFQUE4REMsSUFBSSxFQUFDLE1BQW5FLEVBQTBFQyxXQUFXLEVBQUMsa0JBQXRGLEVBQXlHQyxXQUFXLEVBQUMsQ0FBQyxDQUF0SCxFQUF3SEMsV0FBVyxFQUFDLEtBQUssQ0FBekksRUFBckIsQ0FBaUtDLFdBQVcsR0FBQyxTQUFaQSxXQUFZLENBQUNDLENBQUQsRUFBR0MsQ0FBSCxFQUFPLENBQUMsSUFBSUMsQ0FBQyxHQUFDLEVBQU4sQ0FBUyxPQUFPRCxDQUFDLElBQUVDLENBQUMsR0FBQ0QsQ0FBRixFQUFJRCxDQUFDLEtBQUdFLENBQUMsQ0FBQ1osR0FBRixHQUFNVSxDQUFULENBQVAsSUFBb0IsWUFBVSxPQUFPQSxDQUFqQixHQUFtQkUsQ0FBQyxDQUFDWixHQUFGLEdBQU1VLENBQXpCLEdB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Q0FBdkcsRUFBd0d5QixJQUF4RyxnQkFBNkczQixDQUE3RyxFQUErRyxDQUFDQyxDQUFDLENBQUNELENBQUQsQ0FBRCxDQUFLLENBQXJILEVBQVgsRUFBbUksQ0FBdkosQ0FBNUUsQ0FBcU8sQ0FBNTRCLEMsZUFBNDVCWSxPIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdG9wdGlvbnM9e3VybDp2b2lkIDAsbWV0aG9kOlwiR0VUXCIscXM6dm9pZCAwLGJvZHk6dm9pZCAwLGhlYWRlcnM6dm9pZCAwLHR5cGU6XCJqc29uXCIsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi9qc29uXCIsY3Jvc3NPcmlnaW46ITAsY3JlZGVudGlhbHM6dm9pZCAwfSxtYWtlT3B0aW9ucz0odCxlKT0+e2xldCBzPXt9O3JldHVybiBlPyhzPWUsdCYmKHMudXJsPXQpKTpcInN0cmluZ1wiPT10eXBlb2YgdD9zLnVybD10OnM9dCxzPU9iamVjdC5hc3NpZ24oe30sZGVmYXVsdG9wdGlvbnMscyl9LGFkZFFzPSh0LGUpPT57bGV0IHM9XCJcIixvPXQ7aWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpe2Zvcihjb25zdCB0IG9mIE9iamVjdC5rZXlzKGUpKXMrPWAmJHt0fT0ke2VbdF19YDtzLmxlbmd0aD4wJiYodC5zcGxpdChcIj9cIikubGVuZ3RoPDI/cz1zLnN1YnN0cmluZygxKTowPT09dC5zcGxpdChcIj9cIilbMV0ubGVuZ3RoJiYocz1zLnN1YnN0cmluZygxKSkpLG89LTE9PT10LmluZGV4T2YoXCI/XCIpP2Ake3R9PyR7c31gOmAke3R9JHtzfWB9cmV0dXJuIG99LHJlcXVlc3Q9KHQsZSk9Pntjb25zdCBzPW1ha2VPcHRpb25zKHQsZSkse21ldGhvZDpvLGJvZHk6bixoZWFkZXJzOmQscXM6cix0eXBlOmksY29udGVudFR5cGU6YX09cztsZXQgbD1zLnVybDtyJiYobD1hZGRRcyhsLHIpKTtsZXQgdT1kO3JldHVybiBkJiZkW1wiY29udGVudC10eXBlXCJdfHwhYXx8KHU9T2JqZWN0LmFzc2lnbih7fSxkLHtcImNvbnRlbnQtdHlwZVwiOmF9KSksbmV3IFByb21pc2UoKHQsZSk9Pnt3eC5yZXF1ZXN0KHt1cmw6bCxtZXRob2Q6byxkYXRhOm4saGVhZGVyOnUsZGF0YVR5cGU6aSxzdWNjZXNzKHMpeyhzLnN0YXR1c0NvZGU8MjAwfHxzLnN0YXR1c0NvZGU+PTMwMCkmJmUocyksdChzKX0sZmFpbCh0KXtlKHQpfX0pfSl9O2V4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 37:
/*!************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/store/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _utils = _interopRequireDefault(__webpack_require__(/*! ../common/utils/utils */ 38));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var Store = /*#__PURE__*/function () {function Store(t) {_classCallCheck(this, Store);this.state = _objectSpread({}, t), this.callbacks = {};}_createClass(Store, [{ key: \"get\", value: function get(t) {var _this = this;if (_utils.default.isString(t)) return this._getByStr(t);if (_utils.default.isObj(t)) {var s = _objectSpread({}, t);return Object.keys(s).forEach(function (t) {var e = s[t];_this.callbacks[t] || (_this.callbacks[t] = []), _this.callbacks[t].indexOf(e) < 0 && _this.callbacks[t].push(e), e(_this._getByStr(t));}), function () {Object.keys(s).forEach(function (t) {var e = s[t],i = _this.callbacks[t].indexOf(e);_this.callbacks[t].splice(i, 1);});};}throw Error(\"key must be string or object.\");} }, { key: \"set\", value: function set(t, s) {var _this2 = this;if (_utils.default.isObj(t)) {var _s = _objectSpread({}, t);Object.keys(_s).forEach(function (t) {var e = _s[t];_this2._setItem(t, e);});} else this._setItem(t, s);} }, { key: \"reset\", value: function reset() {this.state.main = { chat: null, channelId: \"\", channelDetail: {}, chapterList: [], videoId: \"\", videoPoolId: \"\" };} }, { key: \"_getItem\", value: function _getItem(t, s) {this.callbacks[t] || (this.callbacks[t] = []), this.callbacks[t].push(s);var e = this._getByStr(t);return s(e), e;} }, { key: \"_setItem\", value: function _setItem(t, s) {var _this3 = this;var e = t.split(\".\");s !== this._getByStr(t) && (this._setByStr(t, s), e.reduce(function (t, s) {var e = t ? t + \".\" + s : s;(_this3.callbacks[e] || []).forEach(function (t) {t(_this3._getByStr(e));});}));} }, { key: \"_getByStr\", value: function _getByStr(t) {if (!t) return this.state;var s = t.split(\".\");return s.reduce(function (t, e, i) {if (!t[e] && i < s.length - 1) throw Error(\"\".concat(e, \" is undefined in state\"));return t[e];}, this.state);} }, { key: \"_setByStr\", value: function _setByStr(t, s) {var e = t.split(\".\");e.reduce(function (t, i, c) {return c === e.length - 1 && (t[i] = s), t[i] = t[i] || {}, t[i];}, this.state);} }]);return Store;}();var initialState = { app: { appId: \"\", appSecret: \"\", userId: \"\" }, main: { chat: null, channelId: \"\", channelDetail: {}, chapterList: [], openId: \"\", userName: \"\", avatarUrl: \"\" } };var _default = new Store(initialState);exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L3N0b3JlL2luZGV4LmpzIl0sIm5hbWVzIjpbIlN0b3JlIiwidCIsInN0YXRlIiwiY2FsbGJhY2tzIiwidXRpbCIsImlzU3RyaW5nIiwiX2dldEJ5U3RyIiwiaXNPYmoiLCJzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJlIiwiaW5kZXhPZiIsInB1c2giLCJpIiwic3BsaWNlIiwiRXJyb3IiLCJfc2V0SXRlbSIsIm1haW4iLCJjaGF0IiwiY2hhbm5lbElkIiwiY2hhbm5lbERldGFpbCIsImNoYXB0ZXJMaXN0IiwidmlkZW9JZCIsInZpZGVvUG9vbElkIiwic3BsaXQiLCJfc2V0QnlTdHIiLCJyZWR1Y2UiLCJsZW5ndGgiLCJjIiwiaW5pdGlhbFN0YXRlIiwiYXBwIiwiYXBwSWQiLCJhcHBTZWNyZXQiLCJ1c2VySWQiLCJvcGVuSWQiLCJ1c2VyTmFtZSIsImF2YXRhclVybCJdLCJtYXBwaW5ncyI6InVGQUFBLDBGLDI1Q0FBOENBLEssNkJBQU0sZUFBWUMsQ0FBWixFQUFjLDhCQUFDLEtBQUtDLEtBQUwscUJBQWVELENBQWYsR0FBa0IsS0FBS0UsU0FBTCxHQUFlLEVBQWpDLENBQW9DLEMsdURBQUlGLEMsRUFBRSxrQkFBQyxJQUFHRyxlQUFLQyxRQUFMLENBQWNKLENBQWQsQ0FBSCxFQUFvQixPQUFPLEtBQUtLLFNBQUwsQ0FBZUwsQ0FBZixDQUFQLENBQXlCLElBQUdHLGVBQUtHLEtBQUwsQ0FBV04sQ0FBWCxDQUFILEVBQWlCLENBQUMsSUFBTU8sQ0FBQyxxQkFBS1AsQ0FBTCxDQUFQLENBQWUsT0FBT1EsTUFBTSxDQUFDQyxJQUFQLENBQVlGLENBQVosRUFBZUcsT0FBZixDQUF1QixVQUFBVixDQUFDLEVBQUUsQ0FBQyxJQUFNVyxDQUFDLEdBQUNKLENBQUMsQ0FBQ1AsQ0FBRCxDQUFULENBQWEsS0FBSSxDQUFDRSxTQUFMLENBQWVGLENBQWYsTUFBb0IsS0FBSSxDQUFDRSxTQUFMLENBQWVGLENBQWYsSUFB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QyxFQUF5Q0MsV0FBVyxFQUFDLEVBQXJELEVBQXdEYSxNQUFNLEVBQUMsRUFBL0QsRUFBa0VDLFFBQVEsRUFBQyxFQUEzRSxFQUE4RUMsU0FBUyxFQUFDLEVBQXhGLEVBQTVDLEVBQW5CLEMsZUFBMkssSUFBSXRDLEtBQUosQ0FBVStCLFlBQVYsQyIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dGlsIGZyb21cIi4uL2NvbW1vbi91dGlscy91dGlsc1wiO2NsYXNzIFN0b3Jle2NvbnN0cnVjdG9yKHQpe3RoaXMuc3RhdGU9ey4uLnR9LHRoaXMuY2FsbGJhY2tzPXt9fWdldCh0KXtpZih1dGlsLmlzU3RyaW5nKHQpKXJldHVybiB0aGlzLl9nZXRCeVN0cih0KTtpZih1dGlsLmlzT2JqKHQpKXtjb25zdCBzPXsuLi50fTtyZXR1cm4gT2JqZWN0LmtleXMocykuZm9yRWFjaCh0PT57Y29uc3QgZT1zW3RdO3RoaXMuY2FsbGJhY2tzW3RdfHwodGhpcy5jYWxsYmFja3NbdF09W10pLHRoaXMuY2FsbGJhY2tzW3RdLmluZGV4T2YoZSk8MCYmdGhpcy5jYWxsYmFja3NbdF0ucHVzaChlKSxlKHRoaXMuX2dldEJ5U3RyKHQpKX0pLCgpPT57T2JqZWN0LmtleXMocykuZm9yRWFjaCh0PT57Y29uc3QgZT1zW3RdLGk9dGhpcy5jYWxsYmFja3NbdF0uaW5kZXhPZihlKTt0aGlzLmNhbGxiYWNrc1t0XS5zcGxpY2UoaSwxKX0pfX10aHJvdyBFcnJvcihcImtleSBtdXN0IGJlIHN0cmluZyBvciBvYmplY3QuXCIpfXNldCh0LHMpe2lmKHV0aWwuaXNPYmoodCkpe2NvbnN0IHM9ey4uLnR9O09iamVjdC5rZXlzKHMpLmZvckVhY2godD0+e2NvbnN0IGU9c1t0XTt0aGlzLl9zZXRJdGVtKHQsZSl9KX1lbHNlIHRoaXMuX3NldEl0ZW0odCxzKX1yZXNldCgpe3RoaXMuc3RhdGUubWFpbj17Y2hhdDpudWxsLGNoYW5uZWxJZDpcIlwiLGNoYW5uZWxEZXRhaWw6e30sY2hhcHRlckxpc3Q6W10sdmlkZW9JZDpcIlwiLHZpZGVvUG9vbElkOlwiXCJ9fV9nZXRJdGVtKHQscyl7dGhpcy5jYWxsYmFja3NbdF18fCh0aGlzLmNhbGxiYWNrc1t0XT1bXSksdGhpcy5jYWxsYmFja3NbdF0ucHVzaChzKTtjb25zdCBlPXRoaXMuX2dldEJ5U3RyKHQpO3JldHVybiBzKGUpLGV9X3NldEl0ZW0odCxzKXtjb25zdCBlPXQuc3BsaXQoXCIuXCIpO3MhPT10aGlzLl9nZXRCeVN0cih0KSYmKHRoaXMuX3NldEJ5U3RyKHQscyksZS5yZWR1Y2UoKHQscyk9Pntjb25zdCBlPXQ/dCtcIi5cIitzOnM7KHRoaXMuY2FsbGJhY2tzW2VdfHxbXSkuZm9yRWFjaCh0PT57dCh0aGlzLl9nZXRCeVN0cihlKSl9KX0pKX1fZ2V0QnlTdHIodCl7aWYoIXQpcmV0dXJuIHRoaXMuc3RhdGU7Y29uc3Qgcz10LnNwbGl0KFwiLlwiKTtyZXR1cm4gcy5yZWR1Y2UoKHQsZSxpKT0+e2lmKCF0W2VdJiZpPHMubGVuZ3RoLTEpdGhyb3cgRXJyb3IoYCR7ZX0gaXMgdW5kZWZpbmVkIGluIHN0YXRlYCk7cmV0dXJuIHRbZV19LHRoaXMuc3RhdGUpfV9zZXRCeVN0cih0LHMpe2NvbnN0IGU9dC5zcGxpdChcIi5cIik7ZS5yZWR1Y2UoKHQsaSxjKT0+KGM9PT1lLmxlbmd0aC0xJiYodFtpXT1zKSx0W2ldPXRbaV18fHt9LHRbaV0pLHRoaXMuc3RhdGUpfX1jb25zdCBpbml0aWFsU3RhdGU9e2FwcDp7YXBwSWQ6XCJcIixhcHBTZWNyZXQ6XCJcIix1c2VySWQ6XCJcIn0sbWFpbjp7Y2hhdDpudWxsLGNoYW5uZWxJZDpcIlwiLGNoYW5uZWxEZXRhaWw6e30sY2hhcHRlckxpc3Q6W10sb3BlbklkOlwiXCIsdXNlck5hbWU6XCJcIixhdmF0YXJVcmw6XCJcIn19O2V4cG9ydCBkZWZhdWx0IG5ldyBTdG9yZShpbml0aWFsU3RhdGUpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 38:
/*!*******************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/utils.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function comparison(t) {return function (e, i) {var r = e[t],n = i[t];return r < n ? -1 : r > n ? 1 : 0;};}function formatTime(t) {if (!t || \"number\" != typeof t) return \"00:00:00\";var e = Math.floor(t / 3600);e < 10 && (e = \"0\" + e), t %= 3600;var i = Math.floor(t / 60);return i < 10 && (i = \"0\" + i), (t %= 60) < 10 && (t = \"0\" + t), e + \":\" + i + \":\" + t;}var getDomRect = function getDomRect(t, e) {return new Promise(function (i) {var r = uni.createSelectorQuery().in(e);r.select(t).boundingClientRect(), r.exec(function (t) {i(t[0]);});});},imagePrefixUrlMethod = function imagePrefixUrlMethod(t) {if (\"string\" != typeof t || \"\" === t.trim()) return \"\";if (t.indexOf(\"live.polyv.net\") > -1 || t.indexOf(\"static.live.polyv.net\") > -1 || t.indexOf(\"livestatic.videocc.net\") > -1) {if (/^http/.test(t)) {if (t.indexOf(\".net\") > -1) {return \"https://livestatic.videocc.net\".concat(t.split(\".net\")[1]);}} else if (!/^\\/\\//.test(t)) return \"https://livestatic.videocc.net\".concat(t);} else {if (/^\\/\\//.test(t)) return \"https:\" + t;if (/^\\//.test(t)) return \"https://livestatic.videocc.net\".concat(t);if (/^(?!\\/)/.test(t) && !/^http/.test(t)) return \"https://img.videocc.net/uimage/\".concat(t.slice(0, 1), \"/\").concat(t);}return t;},isPhoneX = function isPhoneX(t) {return -1 !== t.indexOf(\"iPhone X\");},isArray = function isArray(t) {return \"[object Array]\" === Object.prototype.toString.call(t);},isString = function isString(t) {return \"string\" == typeof t;},isFunc = function isFunc(t) {return \"function\" == typeof t;},isObj = function isObj(t) {return \"[object Object]\" === Object.prototype.toString.call(t);};var _default = { comparison: comparison, formatTime: formatTime, getDomRect: getDomRect, imagePrefixUrlMethod: imagePrefixUrlMethod, isPhoneX: isPhoneX, isArray: isArray, isString: isString, isFunc: isFunc, isObj: isObj };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi91dGlscy91dGlscy5qcyJdLCJuYW1lcyI6WyJjb21wYXJpc29uIiwidCIsImUiLCJpIiwiciIsIm4iLCJmb3JtYXRUaW1lIiwiTWF0aCIsImZsb29yIiwiZ2V0RG9tUmVjdCIsIlByb21pc2UiLCJ1bmkiLCJjcmVhdGVTZWxlY3RvclF1ZXJ5IiwiaW4iLCJzZWxlY3QiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJleGVjIiwiaW1hZ2VQcmVmaXhVcmxNZXRob2QiLCJ0cmltIiwiaW5kZXhPZiIsInRlc3QiLCJzcGxpdCIsInNsaWNlIiwiaXNQaG9uZVgiLCJpc0FycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaXNTdHJpbmciLCJpc0Z1bmMiLCJpc09iaiJdLCJtYXBwaW5ncyI6ImtJQUFBLFNBQVNBLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXNCLENBQUMsT0FBTSxVQUFDQyxDQUFELEVBQUdDLENBQUgsRUFBTyxDQUFDLElBQU1DLENBQUMsR0FBQ0YsQ0FBQyxDQUFDRCxDQUFELENBQVQsQ0FBYUksQ0FBQyxHQUFDRixDQUFDLENBQUNGLENBQUQsQ0FBaEIsQ0FBb0IsT0FBT0csQ0FBQyxHQUFDQyxDQUFGLEdBQUksQ0FBQyxDQUFMLEdBQU9ELENBQUMsR0FBQ0MsQ0FBRixHQUFJLENBQUosR0FBTSxDQUFwQixDQUFzQixDQUF4RCxDQUF5RCxVQUFTQyxVQUFULENBQW9CTCxDQUFwQixFQUFzQixDQUFDLElBQUcsQ0FBQ0EsQ0FBRCxJQUFJLFlBQVUsT0FBT0EsQ0FBeEIsRUFBMEIsT0FBTSxVQUFOLENBQWlCLElBQUlDLENBQUMsR0FBQ0ssSUFBSSxDQUFDQyxLQUFMLENBQVdQLENBQUMsR0FBQyxJQUFiLENBQU4sQ0FBeUJDLENBQUMsR0FBQyxFQUFGLEtBQU9BLENBQUMsR0FBQyxNQUFJQSxDQUFiLEdBQWdCRCxDQUFDLElBQUUsSUFBbkIsQ0FBd0IsSUFBSUUsQ0FBQyxH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LEdBQUMsU0FBTkEsS0FBTSxDQUFBOUIsQ0FBQyxVQUFFLHNCQUFvQndCLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCM0IsQ0FBL0IsQ0FBdEIsRUFBNzJCLEMsZUFBbTdCLEVBQUNELFVBQVUsRUFBQ0EsVUFBWixFQUF1Qk0sVUFBVSxFQUFDQSxVQUFsQyxFQUE2Q0csVUFBVSxFQUFDQSxVQUF4RCxFQUFtRVEsb0JBQW9CLEVBQUNBLG9CQUF4RixFQUE2R00sUUFBUSxFQUFDQSxRQUF0SCxFQUErSEMsT0FBTyxFQUFDQSxPQUF2SSxFQUErSUssUUFBUSxFQUFDQSxRQUF4SixFQUFpS0MsTUFBTSxFQUFDQSxNQUF4SyxFQUErS0MsS0FBSyxFQUFDQSxLQUFyTCxFIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY29tcGFyaXNvbih0KXtyZXR1cm4oZSxpKT0+e2NvbnN0IHI9ZVt0XSxuPWlbdF07cmV0dXJuIHI8bj8tMTpyPm4/MTowfX1mdW5jdGlvbiBmb3JtYXRUaW1lKHQpe2lmKCF0fHxcIm51bWJlclwiIT10eXBlb2YgdClyZXR1cm5cIjAwOjAwOjAwXCI7bGV0IGU9TWF0aC5mbG9vcih0LzM2MDApO2U8MTAmJihlPVwiMFwiK2UpLHQlPTM2MDA7bGV0IGk9TWF0aC5mbG9vcih0LzYwKTtyZXR1cm4gaTwxMCYmKGk9XCIwXCIraSksKHQlPTYwKTwxMCYmKHQ9XCIwXCIrdCksZStcIjpcIitpK1wiOlwiK3R9Y29uc3QgZ2V0RG9tUmVjdD0odCxlKT0+bmV3IFByb21pc2UoaT0+e2NvbnN0IHI9dW5pLmNyZWF0ZVNlbGVjdG9yUXVlcnkoKS5pbihlKTtyLnNlbGVjdCh0KS5ib3VuZGluZ0NsaWVudFJlY3QoKSxyLmV4ZWModD0+e2kodFswXSl9KX0pLGltYWdlUHJlZml4VXJsTWV0aG9kPXQ9PntpZihcInN0cmluZ1wiIT10eXBlb2YgdHx8XCJcIj09PXQudHJpbSgpKXJldHVyblwiXCI7aWYodC5pbmRleE9mKFwibGl2ZS5wb2x5di5uZXRcIik+LTF8fHQuaW5kZXhPZihcInN0YXRpYy5saXZlLnBvbHl2Lm5ldFwiKT4tMXx8dC5pbmRleE9mKFwibGl2ZXN0YXRpYy52aWRlb2NjLm5ldFwiKT4tMSl7aWYoL15odHRwLy50ZXN0KHQpKXtpZih0LmluZGV4T2YoXCIubmV0XCIpPi0xKXtyZXR1cm5gaHR0cHM6Ly9saXZlc3RhdGljLnZpZGVvY2MubmV0JHt0LnNwbGl0KFwiLm5ldFwiKVsxXX1gfX1lbHNlIGlmKCEvXlxcL1xcLy8udGVzdCh0KSlyZXR1cm5gaHR0cHM6Ly9saXZlc3RhdGljLnZpZGVvY2MubmV0JHt0fWB9ZWxzZXtpZigvXlxcL1xcLy8udGVzdCh0KSlyZXR1cm5cImh0dHBzOlwiK3Q7aWYoL15cXC8vLnRlc3QodCkpcmV0dXJuYGh0dHBzOi8vbGl2ZXN0YXRpYy52aWRlb2NjLm5ldCR7dH1gO2lmKC9eKD8hXFwvKS8udGVzdCh0KSYmIS9eaHR0cC8udGVzdCh0KSlyZXR1cm5gaHR0cHM6Ly9pbWcudmlkZW9jYy5uZXQvdWltYWdlLyR7dC5zbGljZSgwLDEpfS8ke3R9YH1yZXR1cm4gdH0saXNQaG9uZVg9dD0+LTEhPT10LmluZGV4T2YoXCJpUGhvbmUgWFwiKSxpc0FycmF5PXQ9PlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSxpc1N0cmluZz10PT5cInN0cmluZ1wiPT10eXBlb2YgdCxpc0Z1bmM9dD0+XCJmdW5jdGlvblwiPT10eXBlb2YgdCxpc09iaj10PT5cIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpO2V4cG9ydCBkZWZhdWx0e2NvbXBhcmlzb246Y29tcGFyaXNvbixmb3JtYXRUaW1lOmZvcm1hdFRpbWUsZ2V0RG9tUmVjdDpnZXREb21SZWN0LGltYWdlUHJlZml4VXJsTWV0aG9kOmltYWdlUHJlZml4VXJsTWV0aG9kLGlzUGhvbmVYOmlzUGhvbmVYLGlzQXJyYXk6aXNBcnJheSxpc1N0cmluZzppc1N0cmluZyxpc0Z1bmM6aXNGdW5jLGlzT2JqOmlzT2JqfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 388:
/*!**********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/pay.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetWeiPaySign = GetWeiPaySign;exports.WechatPay = WechatPay;exports.XiaDanWeiPay = XiaDanWeiPay;exports.XiaDanAliPay = XiaDanAliPay;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取微信支付状态*/\nfunction GetWeiPaySign(params) {\n  return (0, _mainEntrance.GET)('/webapi/Pay/GetWeiPaySign', params, ['appToken']);\n}\n/*微信支付（APP版）*/\nfunction WechatPay(params) {\n  return (0, _mainEntrance.GET)('/webapi/Pay/WechatPay', params, ['appToken']);\n}\n/*微信小程序支付下单*/\nfunction XiaDanWeiPay(params) {\n  return (0, _mainEntrance.GET)('/webapi/Pay/XiaDanWeiPay', params, ['appToken']);\n}\n\n/*支付宝支付下单*/\nfunction XiaDanAliPay(params) {\n  return (0, _mainEntrance.GET)('/webapi/Pay/XiaDanAliPay', params, ['appToken']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL3BheS5qcyJdLCJuYW1lcyI6WyJHZXRXZWlQYXlTaWduIiwicGFyYW1zIiwiV2VjaGF0UGF5IiwiWGlhRGFuV2VpUGF5IiwiWGlhRGFuQWxpUGF5Il0sIm1hcHBpbmdzIjoiME1BQUE7O0FBRUE7QUFDTyxTQUFTQSxhQUFULENBQXVCQyxNQUF2QixFQUErQjtBQUNyQyxTQUFPLHVCQUFJLDJCQUFKLEVBQWdDQSxNQUFoQyxFQUF1QyxDQUFDLFVBQUQsQ0FBdkMsQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTQyxTQUFULENBQW1CRCxNQUFuQixFQUEyQjtBQUNqQyxTQUFPLHVCQUFJLHVCQUFKLEVBQTRCQSxNQUE1QixFQUFtQyxDQUFDLFVBQUQsQ0FBbkMsQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTRSxZQUFULENBQXNCRixNQUF0QixFQUE4QjtBQUNwQyxTQUFPLHVCQUFJLDBCQUFKLEVBQStCQSxNQUEvQixFQUFzQyxDQUFDLFVBQUQsQ0FBdEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0csWUFBVCxDQUFzQkgsTUFBdEIsRUFBOEI7QUFDcEMsU0FBTyx1QkFBSSwwQkFBSixFQUErQkEsTUFBL0IsRUFBc0MsQ0FBQyxVQUFELENBQXRDLENBQVA7QUFDQSIsImZpbGUiOiIzODguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dFVCxQT1NUfSBmcm9tICcuL21haW4uZW50cmFuY2UuanMnXHJcblxyXG4vKuiOt+WPluW+ruS/oeaUr+S7mOeKtuaAgSovXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRXZWlQYXlTaWduKHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvUGF5L0dldFdlaVBheVNpZ24nLHBhcmFtcyxbJ2FwcFRva2VuJ10pXHJcbn1cclxuLyrlvq7kv6HmlK/ku5jvvIhBUFDniYjvvIkqL1xyXG5leHBvcnQgZnVuY3Rpb24gV2VjaGF0UGF5KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvUGF5L1dlY2hhdFBheScscGFyYW1zLFsnYXBwVG9rZW4nXSlcclxufVxyXG4vKuW+ruS/oeWwj+eoi+W6j+aUr+S7mOS4i+WNlSovXHJcbmV4cG9ydCBmdW5jdGlvbiBYaWFEYW5XZWlQYXkocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9QYXkvWGlhRGFuV2VpUGF5JyxwYXJhbXMsWydhcHBUb2tlbiddKVxyXG59XHJcblxyXG4vKuaUr+S7mOWuneaUr+S7mOS4i+WNlSovXHJcbmV4cG9ydCBmdW5jdGlvbiBYaWFEYW5BbGlQYXkocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9QYXkvWGlhRGFuQWxpUGF5JyxwYXJhbXMsWydhcHBUb2tlbiddKVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///388\n");

/***/ }),

/***/ 39:
/*!********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/config.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.URL = void 0;var URL = { mainHost: \"https://api.polyv.net\", chatHost: \"https://apichat.polyv.net\", socketHost: \"wss://chat.polyv.net\", routerHost: \"https://router.polyv.net/proxy\" };exports.URL = URL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi91dGlscy9jb25maWcuanMiXSwibmFtZXMiOlsiVVJMIiwibWFpbkhvc3QiLCJjaGF0SG9zdCIsInNvY2tldEhvc3QiLCJyb3V0ZXJIb3N0Il0sIm1hcHBpbmdzIjoibUZBQU8sSUFBTUEsR0FBRyxHQUFDLEVBQUNDLFFBQVEsRUFBQyx1QkFBVixFQUFrQ0MsUUFBUSxFQUFDLDJCQUEzQyxFQUF1RUMsVUFBVSxFQUFDLHNCQUFsRixFQUF5R0MsVUFBVSxFQUFDLGdDQUFwSCxFQUFWLEMiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVVJMPXttYWluSG9zdDpcImh0dHBzOi8vYXBpLnBvbHl2Lm5ldFwiLGNoYXRIb3N0OlwiaHR0cHM6Ly9hcGljaGF0LnBvbHl2Lm5ldFwiLHNvY2tldEhvc3Q6XCJ3c3M6Ly9jaGF0LnBvbHl2Lm5ldFwiLHJvdXRlckhvc3Q6XCJodHRwczovL3JvdXRlci5wb2x5di5uZXQvcHJveHlcIn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 4:
/*!**********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/pages.json ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 40:
/*!*****************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/api/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../utils/config */ 39);var _plvRequest = _interopRequireDefault(__webpack_require__(/*! ./plv-request */ 35));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var mainHost = _config.URL.mainHost,routerHost = _config.URL.routerHost;var _default = { getOpenId: function getOpenId(e) {return (0, _plvRequest.default)(mainHost + \"/live/v3/applet/sdk/onlogin-sdk\", { qs: { code: e } });}, getUserId: function getUserId(e) {return (0, _plvRequest.default)(mainHost + \"/live/v3/applet/sdk/get-chat-userId\", { qs: { openId: e } });}, getChannelDetail: function getChannelDetail(e) {return (0, _plvRequest.default)(mainHost + \"/live/v3/applet/sdk/get-channel-detail\", { qs: { channelId: e } });}, getOrdinaryLiveStatus: function getOrdinaryLiveStatus(e) {return (0, _plvRequest.default)(mainHost + \"/live_status/query\", { qs: { stream: e } }, !0);}, getPlayBackVideos: function getPlayBackVideos() {var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { pageSize: 500, page: 1 };return (0, _plvRequest.default)(mainHost + \"/live/v3/channel/playback/list-actual-playback\", { qs: e });}, getChannelKey: function getChannelKey(e) {return (0, _plvRequest.default)(\"\".concat(mainHost, \"/live/v2/channels/\").concat(e, \"/mic-auth\"), { qs: { type: \"web\", timestamp: new Date().getTime() } }, !0);}, getChapterRecords: function getChapterRecords(e) {return (0, _plvRequest.default)(\"\".concat(mainHost, \"/live/v3/channel/chat/get-ppt-records\"), { qs: e });}, getRestrict: function getRestrict(e) {return (0, _plvRequest.default)(\"\".concat(routerHost, \"/livejson.polyv.net/service/v3/restrict.json\"), { qs: e }, !0);}, getBackRestrict: function getBackRestrict(e) {return (0, _plvRequest.default)(\"\".concat(routerHost, \"/live.polyv.net/service/v3/restrict.json\"), { qs: e }, !0);}, getLatestSessionId: function getLatestSessionId(e) {return (0, _plvRequest.default)(\"\".concat(mainHost, \"/live/channel-sessionid/query\"), { qs: e });} };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3BvbHl2L2NvbW1vbi9hcGkvaW5kZXguanMiXSwibmFtZXMiOlsibWFpbkhvc3QiLCJVUkwiLCJyb3V0ZXJIb3N0IiwiZ2V0T3BlbklkIiwiZSIsInFzIiwiY29kZSIsImdldFVzZXJJZCIsIm9wZW5JZCIsImdldENoYW5uZWxEZXRhaWwiLCJjaGFubmVsSWQiLCJnZXRPcmRpbmFyeUxpdmVTdGF0dXMiLCJzdHJlYW0iLCJnZXRQbGF5QmFja1ZpZGVvcyIsInBhZ2VTaXplIiwicGFnZSIsImdldENoYW5uZWxLZXkiLCJ0eXBlIiwidGltZXN0YW1wIiwiRGF0ZSIsImdldFRpbWUiLCJnZXRDaGFwdGVyUmVjb3JkcyIsImdldFJlc3RyaWN0IiwiZ2V0QmFja1Jlc3RyaWN0IiwiZ2V0TGF0ZXN0U2Vzc2lvbklkIl0sIm1hcHBpbmdzIjoidUZBQUEsNkRBQWlDLHVGLGlHQUFrREEsUSxHQUFnQ0MsVyxDQUF6Q0QsUSxDQUE2QkUsVSxHQUFZRCxXLENBQXZCQyxVLGdCQUF5QyxFQUFDQyxTQUFTLEVBQUMsbUJBQUFDLENBQUMsVUFBRSx5QkFBUUosUUFBUSxHQUFDLGlDQUFqQixFQUFtRCxFQUFDSyxFQUFFLEVBQUMsRUFBQ0MsSUFBSSxFQUFDRixDQUFOLEVBQUosRUFBbkQsQ0FBRixFQUFaLEVBQWdGRyxTQUFTLEVBQUMsbUJBQUFILENBQUMsVUFBRSx5QkFBUUosUUFBUSxHQUFDLHFDQUFqQixFQUF1RCxFQUFDSyxFQUFFLEVBQUMsRUFBQ0csTUFBTSxFQUFDSixDQUFSLEVBQUosRUFBdkQsQ0FBRixFQUEzRixFQUFxS0ssZ0JBQWdCLEVBQUMsMEJBQUFMLENBQUMsVUFBRSx5QkFBUUosUUFBUSxHQUFDLHdDQUFqQixFQUEwRCxFQUFDSyxFQUFFLEVBQUMsRUFBQ0ssU0FBUyxFQUFDTixDQUFYLEVBQUosRUFBMUQsQ0FBRixFQUF2TCxFQUF1UU8scUJBQXFCLEVBQUMsK0JBQUFQLENBQUMsVUFBRSx5QkFBUUosUUFBUSxHQUFDLG9CQUFqQixFQUFzQyxFQUFDSyxFQUFFLEVBQUMsRUFBQ08sTUFBTSxFQUFDUixDQUFSLEVBQUosRUFBdEMsRUFBc0QsQ0FBQyxDQUF2RCxDQUFGLEVBQTlSLEVBQTBWUyxpQkFBaUIsRUFBQyxrQ0FBQ1QsQ0FBRCx1RUFBRyxFQUFDVSxRQUFRLEVBQUMsR0FBVixFQUFjQyxJQUFJLEVBQUMsQ0FBbkIsRUFBSCxRQUEyQix5QkFBUWYsUUFBUSxHQUFDLGdEQUFqQixFQUFrRSxFQUFDSyxFQUFFLEVBQUNELENBQUosRUFBbEUsQ0FBM0IsRUFBNVcsRUFBaWRZLGFBQWEsRUFBQyx1QkFBQVosQ0FBQyxVQUFFLG1DQUFXSixRQUFYLCtCQUF3Q0ksQ0FBeEMsZ0JBQXFELEVBQUNDLEVBQUUsRUFBQyxFQUFDWSxJQUFJLEVBQUMsS0FBTixFQUFZQyxTQUFTLEVBQUUsSUFBSUMsSUFBSixFQUFELENBQVdDLE9BQVgsRUFBdEIsRUFBSixFQUFyRCxFQUFzRyxDQUFDLENBQXZHLENBQUYsRUFBaGUsRUFBNGtCQyxpQkFBaUIsRUFBQywyQkFBQWpCLENBQUMsVUFBRSxtQ0FBV0osUUFBWCw0Q0FBMkQsRUFBQ0ssRUFBRSxFQUFDRCxDQUFKLEVBQTNELENBQUYsRUFBL2xCLEVBQW9xQmtCLFdBQVcsRUFBQyxxQkFBQWxCLENBQUMsVUFBRSxtQ0FBV0YsVUFBWCxtREFBb0UsRUFBQ0csRUFBRSxFQUFDRCxDQUFKLEVBQXBFLEVBQTJFLENBQUMsQ0FBNUUsQ0FBRixFQUFqckIsRUFBa3dCbUIsZUFBZSxFQUFDLHlCQUFBbkIsQ0FBQyxVQUFFLG1DQUFXRixVQUFYLCtDQUFnRSxFQUFDRyxFQUFFLEVBQUNELENBQUosRUFBaEUsRUFBdUUsQ0FBQyxDQUF4RSxDQUFGLEVBQW54QixFQUFnMkJvQixrQkFBa0IsRUFBQyw0QkFBQXBCLENBQUMsVUFBRSxtQ0FBV0osUUFBWCxvQ0FBbUQsRUFBQ0ssRUFBRSxFQUFDRCxDQUFKLEVBQW5ELENBQUYsRUFBcDNCLEUiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7VVJMfWZyb21cIi4uL3V0aWxzL2NvbmZpZ1wiO2ltcG9ydCByZXF1ZXN0IGZyb21cIi4vcGx2LXJlcXVlc3RcIjtjb25zdHttYWluSG9zdDptYWluSG9zdCxyb3V0ZXJIb3N0OnJvdXRlckhvc3R9PVVSTDtleHBvcnQgZGVmYXVsdHtnZXRPcGVuSWQ6ZT0+cmVxdWVzdChtYWluSG9zdCtcIi9saXZlL3YzL2FwcGxldC9zZGsvb25sb2dpbi1zZGtcIix7cXM6e2NvZGU6ZX19KSxnZXRVc2VySWQ6ZT0+cmVxdWVzdChtYWluSG9zdCtcIi9saXZlL3YzL2FwcGxldC9zZGsvZ2V0LWNoYXQtdXNlcklkXCIse3FzOntvcGVuSWQ6ZX19KSxnZXRDaGFubmVsRGV0YWlsOmU9PnJlcXVlc3QobWFpbkhvc3QrXCIvbGl2ZS92My9hcHBsZXQvc2RrL2dldC1jaGFubmVsLWRldGFpbFwiLHtxczp7Y2hhbm5lbElkOmV9fSksZ2V0T3JkaW5hcnlMaXZlU3RhdHVzOmU9PnJlcXVlc3QobWFpbkhvc3QrXCIvbGl2ZV9zdGF0dXMvcXVlcnlcIix7cXM6e3N0cmVhbTplfX0sITApLGdldFBsYXlCYWNrVmlkZW9zOihlPXtwYWdlU2l6ZTo1MDAscGFnZToxfSk9PnJlcXVlc3QobWFpbkhvc3QrXCIvbGl2ZS92My9jaGFubmVsL3BsYXliYWNrL2xpc3QtYWN0dWFsLXBsYXliYWNrXCIse3FzOmV9KSxnZXRDaGFubmVsS2V5OmU9PnJlcXVlc3QoYCR7bWFpbkhvc3R9L2xpdmUvdjIvY2hhbm5lbHMvJHtlfS9taWMtYXV0aGAse3FzOnt0eXBlOlwid2ViXCIsdGltZXN0YW1wOihuZXcgRGF0ZSkuZ2V0VGltZSgpfX0sITApLGdldENoYXB0ZXJSZWNvcmRzOmU9PnJlcXVlc3QoYCR7bWFpbkhvc3R9L2xpdmUvdjMvY2hhbm5lbC9jaGF0L2dldC1wcHQtcmVjb3Jkc2Ase3FzOmV9KSxnZXRSZXN0cmljdDplPT5yZXF1ZXN0KGAke3JvdXRlckhvc3R9L2xpdmVqc29uLnBvbHl2Lm5ldC9zZXJ2aWNlL3YzL3Jlc3RyaWN0Lmpzb25gLHtxczplfSwhMCksZ2V0QmFja1Jlc3RyaWN0OmU9PnJlcXVlc3QoYCR7cm91dGVySG9zdH0vbGl2ZS5wb2x5di5uZXQvc2VydmljZS92My9yZXN0cmljdC5qc29uYCx7cXM6ZX0sITApLGdldExhdGVzdFNlc3Npb25JZDplPT5yZXF1ZXN0KGAke21haW5Ib3N0fS9saXZlL2NoYW5uZWwtc2Vzc2lvbmlkL3F1ZXJ5YCx7cXM6ZX0pfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),

/***/ 403:
/*!*************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/school.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetSchoolList = GetSchoolList;exports.GetSchoolInfo = GetSchoolInfo;exports.GetSchoolCourseList = GetSchoolCourseList;exports.GetSchoolInfomation = GetSchoolInfomation;exports.GetSchoolTeacherList = GetSchoolTeacherList;exports.GetSchoolClassList = GetSchoolClassList;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n\n\n// 名师列表\nfunction GetSchoolList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolList', params);\n}\n\n// 名师详情\nfunction GetSchoolInfo(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolInfo', params);\n}\n\n// 机构课程查询接口\nfunction GetSchoolCourseList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolCourseList', params);\n}\n\n// 机构资讯查询接口\nfunction GetSchoolInfomation(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolInfomation', params);\n}\n\n// 机构教师查询接口\nfunction GetSchoolTeacherList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolTeacherList', params);\n}\n\n// 机构班级查询接口\nfunction GetSchoolClassList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetSchoolClassList', params);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL3NjaG9vbC5qcyJdLCJuYW1lcyI6WyJHZXRTY2hvb2xMaXN0IiwicGFyYW1zIiwiR2V0U2Nob29sSW5mbyIsIkdldFNjaG9vbENvdXJzZUxpc3QiLCJHZXRTY2hvb2xJbmZvbWF0aW9uIiwiR2V0U2Nob29sVGVhY2hlckxpc3QiLCJHZXRTY2hvb2xDbGFzc0xpc3QiXSwibWFwcGluZ3MiOiJrVkFBQTs7OztBQUlBO0FBQ08sU0FBU0EsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0I7QUFDckMsU0FBTyx1QkFBSSwyQkFBSixFQUFnQ0EsTUFBaEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0MsYUFBVCxDQUF1QkQsTUFBdkIsRUFBK0I7QUFDckMsU0FBTyx1QkFBSSwyQkFBSixFQUFnQ0EsTUFBaEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0UsbUJBQVQsQ0FBNkJGLE1BQTdCLEVBQXFDO0FBQzNDLFNBQU8sdUJBQUksaUNBQUosRUFBc0NBLE1BQXRDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNHLG1CQUFULENBQTZCSCxNQUE3QixFQUFxQztBQUMzQyxTQUFPLHVCQUFJLGlDQUFKLEVBQXNDQSxNQUF0QyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTSSxvQkFBVCxDQUE4QkosTUFBOUIsRUFBc0M7QUFDNUMsU0FBTyx1QkFBSSxrQ0FBSixFQUF1Q0EsTUFBdkMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0ssa0JBQVQsQ0FBNEJMLE1BQTVCLEVBQW9DO0FBQzFDLFNBQU8sdUJBQUksZ0NBQUosRUFBcUNBLE1BQXJDLENBQVA7QUFDQSIsImZpbGUiOiI0MDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdEdFVCxQT1NUXHJcbn0gZnJvbSAnLi9tYWluLmVudHJhbmNlLmpzJ1xyXG5cclxuLy8g5ZCN5biI5YiX6KGoXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRTY2hvb2xMaXN0KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL0dldFNjaG9vbExpc3QnLHBhcmFtcylcdFxyXG59XHJcblxyXG4vLyDlkI3luIjor6bmg4VcclxuZXhwb3J0IGZ1bmN0aW9uIEdldFNjaG9vbEluZm8ocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvR2V0U2Nob29sSW5mbycscGFyYW1zKVx0XHJcbn1cclxuXHJcbi8vIOacuuaehOivvueoi+afpeivouaOpeWPo1xyXG5leHBvcnQgZnVuY3Rpb24gR2V0U2Nob29sQ291cnNlTGlzdChwYXJhbXMpIHtcclxuXHRyZXR1cm4gR0VUKCcvd2ViYXBpL2FwcC9HZXRTY2hvb2xDb3Vyc2VMaXN0JyxwYXJhbXMpXHRcclxufVxyXG5cclxuLy8g5py65p6E6LWE6K6v5p+l6K+i5o6l5Y+jXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRTY2hvb2xJbmZvbWF0aW9uKHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL0dldFNjaG9vbEluZm9tYXRpb24nLHBhcmFtcylcdFxyXG59XHJcblxyXG4vLyDmnLrmnoTmlZnluIjmn6Xor6LmjqXlj6NcclxuZXhwb3J0IGZ1bmN0aW9uIEdldFNjaG9vbFRlYWNoZXJMaXN0KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL0dldFNjaG9vbFRlYWNoZXJMaXN0JyxwYXJhbXMpXHRcclxufVxyXG5cclxuLy8g5py65p6E54+t57qn5p+l6K+i5o6l5Y+jXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRTY2hvb2xDbGFzc0xpc3QocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvR2V0U2Nob29sQ2xhc3NMaXN0JyxwYXJhbXMpXHRcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///403\n");

/***/ }),

/***/ 428:
/*!*****************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/utils/download.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _down = __webpack_require__(/*! api/down */ 429);\nvar AllTasks = [];\nfunction getPlus() {\n  return new Promise(function (resolve) {\n    if (typeof plus === 'object') {\n      resolve(plus);\n    } else {\n      setTimeout(function () {\n        getPlus().then(function (plus) {\n          resolve(plus);\n        });\n      }, 100);\n    }\n  });\n}\n\nvar Download = new Object();\n\n/*\r\n                              * 处理图片地址\r\n                              */\nDownload.handlerSrc = function (src) {\n  switch (src.indexOf('//')) {\n    case 0:\n    case 5:\n    case 6:\n      return src;\n      break;\n    default:\n      return this.baseUrl + src;}\n\n};\n\n/**\r\n    * 数据初始化\r\n    */\nDownload.init = function (options) {\n  this.baseUrl = options.baseUrl || '';\n  this.userid = options.userid;\n  this.courseid = options.courseid;\n  options.periodids = options.periodids || '';\n  this.periodids = options.periodids.split(',');\n  this.onChange = options.onChange;\n  this.getCachTxt();\n};\n/**\r\n    * 获取缓存记录文件\r\n    */\nDownload.getCachTxt = function () {var _this = this;\n  getPlus().then(function (plus) {\n    /*查找记录缓存信息的文件*/\n    plus.io.resolveLocalFileSystemURL(\"_doc/cache/\".concat(_this.userid, \".txt\"), function (entry) {\n      var reader = new plus.io.FileReader();\n      reader.readAsText(entry);\n      reader.onloadend = function (e) {\n        if (!AllTasks.length) {\n          AllTasks = JSON.parse(e.target.result);\n        }\n        /**枚举下载任务*/\n        plus.downloader.enumerate(function (tasks) {\n          if (tasks.length) {\n\n            AllTasks.map(function (courseItem) {\n              if (_this.courseid == courseItem.courseid) {\n                courseItem.taskList.map(function (item) {\n                  var has = false;\n                  tasks.map(function (t) {\n                    /*根据filename 获取periodid*/\n                    var periodid = t.options.filename.split('/');\n                    periodid = periodid[periodid.length - 1].replace(/\\..+/, '');\n                    if (periodid == item.periodid) {\n                      if (has) {\n                        /*回收无用下载任务*/\n                        t.abort();\n                      } else {\n                        if (item.state == 4) {\n                          t.abort();\n                        } else {\n                          _this.bindTaskEvent(item, t);\n                          item.state = t.state;\n                          item.totalSize = (t.totalSize / 1000000).toFixed(1);\n                          item.downloadedSize = (t.downloadedSize / 1000000).toFixed(1);\n                          item.percent = Math.floor(t.downloadedSize / t.totalSize * 100);\n                          item.task = t;\n                        }\n                        has = true;\n                      }\n\n                    }\n                  });\n                  /*对要下载的课时进行去重*/\n                  _this.periodids.map(function (pid, i) {\n                    if (pid == item.periodid) {\n                      _this.periodids.splice(i, 1);\n                    }\n                  });\n                });\n              }\n            });\n          }\n          _this.createTask();\n        });\n      };\n    }, function (e) {\n      /*没有找到,说明未缓存过*/\n      _this.createTask();\n      console.log(__f__(e.message, \" at utils\\\\download.js:107\"));\n    });\n  });\n};\n/**\r\n    * 创建任务\r\n    */\nDownload.createTask = function () {var _this2 = this;\n  (0, _down.DownLoadCourse)({\n    courseid: this.courseid,\n    periodids: this.periodids }).\n  then(function (res) {\n    if (!res.result) {\n      uni.showToast({\n        title: res.msg,\n        icon: 'none' });\n\n      return;\n    }\n    res.data = res.data || [];\n    res.data.map(function (item) {\n      item.state = undefined;\n      item.totalSize = 0;\n      item.downloadedSize = 0;\n      item.percent = 0;\n    });\n    var currentCourseTask;\n    AllTasks.map(function (item) {\n      if (item.courseid == _this2.courseid) {\n        currentCourseTask = item;\n      }\n    });\n    if (!currentCourseTask) {\n      AllTasks.unshift({\n        courseid: res.courseid,\n        coursename: res.coursename,\n        taskList: [] });\n\n      currentCourseTask = AllTasks[0];\n    }\n    _this2.currentCourseTask = currentCourseTask;\n    currentCourseTask.taskList = res.data.concat(currentCourseTask.taskList);\n    /*检查课程封面图片是否已下载*/\n    if (!currentCourseTask.imageUrl) {\n      var courseImage = _this2.handlerSrc(res.photourl);\n      /*下载课程图片*/\n      var imageTask = plus.downloader.createDownload(courseImage, {\n        filename: \"_doc/video/\".concat(_this2.userid, \"/\").concat(_this2.courseid, \"/\").concat(_this2.courseid, \".jpg\") },\n      function (d, status) {\n        if (status == 200) {\n          console.log(__f__('下载课程图片成功', \" at utils\\\\download.js:157\"));\n          var fileSysUrl = plus.io.convertLocalFileSystemURL(\"_doc/video/\".concat(_this2.userid, \"/\").concat(_this2.courseid, \"/\").concat(_this2.courseid, \".jpg\"));\n          currentCourseTask.imageUrl = \"file://\".concat(fileSysUrl);\n          _this2.writeFileJson();\n        } else {\n          console.log(__f__('下载课程图片失败', \" at utils\\\\download.js:162\"));\n        }\n      });\n      imageTask.start();\n    }\n    currentCourseTask.taskList.map(function (item) {\n      if (!item.task) {\n        var task = plus.downloader.createDownload(item.download1, {\n          filename: \"_doc/video/\".concat(_this2.userid, \"/\").concat(_this2.courseid, \"/\").concat(item.periodid, \"/\").concat(item.periodid, \".mp4\") },\n        function (d, status) {\n          if (status == 200) {\n            console.log(__f__('下载成功', \" at utils\\\\download.js:173\"));\n\n          } else {\n            console.log(__f__('下载失败', \" at utils\\\\download.js:176\"));\n          }\n        });\n        /*添加监听事件*/\n        _this2.bindTaskEvent(item, task);\n        task.start();\n        item.task = task;\n      }\n    });\n    _this2.callback();\n\n    /*判断是否有未完成的任务,如果有则启用定时器*/\n    var uncompleted = currentCourseTask.taskList.filter(function (item) {\n      return item.state != 4;\n    });\n    if (uncompleted.length) {\n      _this2.timer = setInterval(function () {\n        _this2.callback();\n      }, 1000);\n    }\n\n  });\n};\n\n/**\r\n    * 下载任务进度变化\r\n    */\nDownload.bindTaskEvent = function (item, task) {var _this3 = this;\n  task.addEventListener(\"statechanged\", function (download, status) {\n    item.state = download.state;\n    item.totalSize = (download.totalSize / 1000000).toFixed(1);\n    item.downloadedSize = (download.downloadedSize / 1000000).toFixed(1);\n    item.percent = Math.floor(download.downloadedSize / download.totalSize * 100);\n    if (item.state == 4 && status == 200) {\n      _this3.writeFileJson();\n      _this3.clearTimer();\n\n    }\n  }, false);\n};\n\n/**\r\n    * 下载暂停\r\n    */\nDownload.pause = function (periodid) {var _this4 = this;\n  this.currentCourseTask.taskList.map(function (item) {\n    if (item.periodid == periodid && typeof item.task.pause === 'function') {\n      item.task.pause();\n      item.state = 5;\n      _this4.callback();\n      _this4.writeFileJson();\n      console.log(__f__('任务暂停', \" at utils\\\\download.js:227\"));\n    }\n  });\n};\n\n/**\r\n    * 全部暂停\r\n    */\nDownload.pauseAll = function () {\n  this.currentCourseTask.taskList.map(function (item) {\n    if (typeof item.task.pause === 'function') {\n      item.task.pause();\n      item.state = 5;\n    }\n  });\n  this.writeFileJson();\n  this.callback();\n  console.log(__f__('全部暂停', \" at utils\\\\download.js:244\"));\n};\n\n/**\r\n    * 恢复下载\r\n    */\nDownload.resume = function (periodid) {var _this5 = this;\n  this.currentCourseTask.taskList.map(function (item) {\n    if (item.periodid == periodid && typeof item.task.resume === 'function') {\n      item.task.resume();\n      item.state = 3;\n      _this5.callback();\n      console.log(__f__('继续下载', \" at utils\\\\download.js:256\"));\n    }\n  });\n};\n\n/**\r\n    * 全部恢复下载\r\n    */\n\nDownload.resumeAll = function () {\n  this.currentCourseTask.taskList.map(function (item) {\n    if (typeof item.task.resume === 'function') {\n      item.task.resume();\n      item.state = 3;\n    }\n  });\n  this.callback();\n  console.log(__f__('全部开始', \" at utils\\\\download.js:273\"));\n};\n\n\n/**\r\n    * 清除定时器\r\n    */\nDownload.clearTimer = function () {\n  var uncompleted = this.currentCourseTask.taskList.filter(function (item) {\n    return item.state != 4;\n  });\n  if (!uncompleted.length) {\n    plus.downloader.clear();\n    /*已下载完成,清除定时器*/\n    clearInterval(this.timer);\n    this.callback();\n  }\n};\n\n/**\r\n    * 将json写入文件\r\n    */\nDownload.writeFileJson = function () {var _this6 = this;\n  plus.io.requestFileSystem(plus.io.PRIVATE_DOC, function (success) {\n    success.root.getFile(\"cache/\".concat(_this6.userid, \".txt\"), {\n      create: true },\n    function (fileEntry) {\n      fileEntry.createWriter(function (suc) {\n        suc.write(JSON.stringify(AllTasks));\n        console.log(__f__('写入成功', \" at utils\\\\download.js:302\"));\n      }, function (e) {\n        console.log(__f__('写入失败,' + e.message, \" at utils\\\\download.js:304\"));\n      });\n    });\n  }, function (e) {\n    //失败的回调\n  });\n},\n\n/**\r\n    * 递归删除任务以及已下载文件\r\n    */\nDownload.removeTask = function (periodids) {var _this7 = this;var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return new Promise(function (resolve) {\n    var periodid = periodids[index];\n    if (!periodid) {\n      _this7.callback();\n      _this7.writeFileJson();\n      resolve();\n      return;\n    }\n    var hander = function hander() {\n      AllTasks.map(function (cositem) {\n        if (cositem.courseid == _this7.courseid) {\n          var _taskList = [];\n          cositem.taskList.map(function (item) {\n            if (item.periodid == periodid) {\n              if (item.task && item.task.state != 4 && typeof item.task.abort === 'function') {\n                item.task.abort();\n              }\n            } else {\n              _taskList.push(item);\n            }\n          });\n          cositem.taskList = _taskList;\n          _this7.clearTimer();\n        }\n      });\n      _this7.removeTask(periodids, index + 1).then(function () {\n        resolve();\n      });\n    };\n\n    /*查找文件*/\n    plus.io.resolveLocalFileSystemURL(\"_doc/video/\".concat(_this7.userid, \"/\").concat(_this7.courseid, \"/\").concat(periodid, \"/\"), function (entry) {\n      /*删除文件*/\n      entry.removeRecursively(function (res) {\n        console.log(__f__('删除成功', \" at utils\\\\download.js:350\"));\n        hander();\n      }, function (e) {\n        console.log(__f__(e.message, \" at utils\\\\download.js:353\"));\n      });\n    }, function (e) {\n      hander();\n      console.log(__f__(e.message, \" at utils\\\\download.js:357\"));\n    });\n  });\n\n};\n\n/**\r\n    * 数据回调\r\n    */\n\nDownload.callback = function () {\n  if (typeof this.onChange === 'function') {\n\n    var data = {\n      completedLength: 0,\n      pausesLength: 0,\n      downLength: 0,\n      coursename: this.currentCourseTask.coursename,\n      taskList: [] };\n\n    this.currentCourseTask.taskList.map(function (item) {\n      if (item.state == 4) {\n        data.completedLength += 1;\n      } else if (item.state == 5) {\n        data.pausesLength += 1;\n      } else {\n        data.downLength += 1;\n      }\n      data.taskList.push({\n        filename: item.task ? item.task.filename : '',\n        periodid: item.periodid,\n        periodname: item.periodname,\n        percent: item.percent,\n        downloadedSize: item.downloadedSize,\n        totalSize: item.totalSize,\n        state: item.state });\n\n    });\n    this.onChange(data);\n  }\n\n};\n\n/**\r\n    * 可在页面卸载的时候执行\r\n    */\nDownload.destroyed = function () {\n  clearInterval(this.timer);\n};var _default =\n\n\nDownload;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///428\n");

/***/ }),

/***/ 429:
/*!***********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/down.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.DownLoadCourse = DownLoadCourse;\nvar _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取下载地址*/\nfunction DownLoadCourse(params) {\n  return (0, _mainEntrance.GET)('/webapi/Course/DownLoadCourse', params, [\"appToken\"]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL2Rvd24uanMiXSwibmFtZXMiOlsiRG93bkxvYWRDb3Vyc2UiLCJwYXJhbXMiXSwibWFwcGluZ3MiOiI7QUFDQTs7QUFFQTtBQUNPLFNBQVNBLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQ3RDLFNBQU8sdUJBQUksK0JBQUosRUFBcUNBLE1BQXJDLEVBQTZDLENBQUMsVUFBRCxDQUE3QyxDQUFQO0FBQ0EiLCJmaWxlIjoiNDI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7R0VULFBPU1R9IGZyb20gJy4vbWFpbi5lbnRyYW5jZS5qcydcclxuXHJcbi8q6I635Y+W5LiL6L295Zyw5Z2AKi9cclxuZXhwb3J0IGZ1bmN0aW9uIERvd25Mb2FkQ291cnNlKHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvQ291cnNlL0Rvd25Mb2FkQ291cnNlJywgcGFyYW1zLCBbXCJhcHBUb2tlblwiXSlcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///429\n");

/***/ }),

/***/ 47:
/*!************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetHome = GetHome;exports.Generalquery = Generalquery;exports.Getstartup = Getstartup;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取首页数据*/\nfunction GetHome() {\n  return (0, _mainEntrance.GET)('/webapi/app/home?a=index');\n}\n/*通用搜索*/\nfunction Generalquery(params) {\n  return (0, _mainEntrance.POST)('/webApi/APP/Generalquery', params);\n}\n/*获取引导图数据*/\nfunction Getstartup() {\n  return (0, _mainEntrance.GET)('/webapi/app/home?a=getstartup');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL2luZGV4LmpzIl0sIm5hbWVzIjpbIkdldEhvbWUiLCJHZW5lcmFscXVlcnkiLCJwYXJhbXMiLCJHZXRzdGFydHVwIl0sIm1hcHBpbmdzIjoiNEpBQUE7O0FBRUE7QUFDTyxTQUFTQSxPQUFULEdBQW1CO0FBQ3pCLFNBQU8sdUJBQUksMEJBQUosQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTQyxZQUFULENBQXNCQyxNQUF0QixFQUE4QjtBQUNwQyxTQUFPLHdCQUFLLDBCQUFMLEVBQWdDQSxNQUFoQyxDQUFQO0FBQ0E7QUFDRDtBQUNPLFNBQVNDLFVBQVQsR0FBc0I7QUFDNUIsU0FBTyx1QkFBSSwrQkFBSixDQUFQO0FBQ0EiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dFVCxQT1NUfSBmcm9tICcuL21haW4uZW50cmFuY2UuanMnXHJcblxyXG4vKuiOt+WPlummlumhteaVsOaNriovXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRIb21lKCkge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL2hvbWU/YT1pbmRleCcpXHJcbn1cclxuLyrpgJrnlKjmkJzntKIqL1xyXG5leHBvcnQgZnVuY3Rpb24gR2VuZXJhbHF1ZXJ5KHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViQXBpL0FQUC9HZW5lcmFscXVlcnknLHBhcmFtcylcclxufVxyXG4vKuiOt+WPluW8leWvvOWbvuaVsOaNriovXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRzdGFydHVwKCkge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL2hvbWU/YT1nZXRzdGFydHVwJylcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n");

/***/ }),

/***/ 484:
/*!***********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/exam.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetAllPaperCategory = GetAllPaperCategory;exports.GetSubjectStatistics = GetSubjectStatistics;exports.GetPaperKnowledge = GetPaperKnowledge;exports.GetPaperSection = GetPaperSection;exports.GetAllPaperType = GetAllPaperType;exports.GetPaperList = GetPaperList;exports.GetTestRecordList = GetTestRecordList;exports.GetPaperRecordList = GetPaperRecordList;exports.DeletePaperRecord = DeletePaperRecord;exports.GetCountErrorTk = GetCountErrorTk;exports.ErrorTkHome = ErrorTkHome;exports.CollectTkHome = CollectTkHome;exports.GetCountCollectTk = GetCountCollectTk;exports.PaperDesc = PaperDesc;exports.SetPaperCollect = SetPaperCollect;exports.GetPaperErrortype = GetPaperErrortype;exports.GetDailyTestPaper = GetDailyTestPaper;exports.GetDailyTestDateList = GetDailyTestDateList;exports.GetPaperDetail = GetPaperDetail;exports.GetTestTk = GetTestTk;exports.SetTkCorrection = SetTkCorrection;exports.SubmitPaperAnswer = SubmitPaperAnswer;exports.SetPaperAnswer = SetPaperAnswer;exports.EndTest = EndTest;exports.EndDailyTest = EndDailyTest;exports.PayPaper = PayPaper;exports.GetPerformance = GetPerformance;exports.PaperSubjective = PaperSubjective;exports.SubmitGrade = SubmitGrade;exports.GetRecordDetail = GetRecordDetail;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*获取试卷分类*/\nfunction GetAllPaperCategory(params) {\n  return (0, _mainEntrance.GET)('/webapi/paper/GetAllPaperCategory', params, ['appToken', \"userId\"]);\n}\n/*获取学习记录数据*/\nfunction GetSubjectStatistics(params) {\n  return (0, _mainEntrance.POST)('/webapi/paper/SubjectStatistics', params, ['appToken', \"userId\"]);\n}\n/*练习知识点*/\nfunction GetPaperKnowledge(params) {\n  return (0, _mainEntrance.GET)('/webapi/paper/GetPaperKnowledge', params, ['appToken', \"userId\"]);\n}\n/*练习章节*/\nfunction GetPaperSection(params) {\n  return (0, _mainEntrance.POST)('/webapi/paper/GetPaperSection', params, ['appToken', \"userId\"]);\n}\n/*获取套卷分类*/\nfunction GetAllPaperType(params) {\n  return (0, _mainEntrance.GET)('/webapi/paper/GetAllPaperType', params, ['appToken', \"userId\"]);\n}\n/*每日一练*/\nfunction GetPaperList(params) {\n  return (0, _mainEntrance.GET)('/webapi/paper/GetPaperList', params, ['appToken', \"userId\"]);\n}\n\n/*获取练习记录*/\nfunction GetTestRecordList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetTestRecordList', params, ['appToken', \"userId\"]);\n}\n/*获取考试记录*/\nfunction GetPaperRecordList(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetPaperRecordList', params, ['appToken', \"userId\"]);\n}\n/*删除考试记录*/\nfunction DeletePaperRecord(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/DeletePaperRecord', params, ['appToken', \"userId\"]);\n}\n/*获取错题数*/\nfunction GetCountErrorTk(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetCountErrorTk', params, ['appToken', \"userId\"]);\n}\n/*获取错题数*/\nfunction ErrorTkHome(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/ErrorTkHome', params, ['appToken', \"userId\"]);\n}\n/*获取收藏数*/\nfunction CollectTkHome(params) {\n  return (0, _mainEntrance.GET)('/webapi/user/CollectTkHome', params, ['appToken', \"userId\"]);\n}\n/*获取收藏数*/\nfunction GetCountCollectTk(params) {\n  return (0, _mainEntrance.POST)('/webapi/user/GetCountCollectTk', params, ['appToken', \"userId\"]);\n}\n/**考试内页 */\nfunction PaperDesc(params) {\n  return (0, _mainEntrance.GET)(\"/webapi/paper/PaperDesc\", params, [\"appToken\", \"userId\"]);\n}\n/**加入收藏 */\nfunction SetPaperCollect(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/user/SetPaperCollect\", params, [\"appToken\", \"userId\"]);\n}\n/**试题纠错类型 */\nfunction GetPaperErrortype(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/GetPaperErrortype\", params, [\"appToken\", \"userId\"]);\n}\n/**每日一练内容 */\nfunction GetDailyTestPaper(params) {\n  return (0, _mainEntrance.GET)(\"/webapi/paper/GetDailyTestPaper\", params, [\"appToken\", \"userId\"]);\n}\n/**每日一练日期 */\nfunction GetDailyTestDateList(params) {\n  return (0, _mainEntrance.GET)(\"/webapi/paper/GetDailyTestDateList\", params, [\"appToken\", \"userId\"]);\n}\n/**试卷显示 */\nfunction GetPaperDetail(params) {\n  return (0, _mainEntrance.GET)(\"/webapi/paper/GetPaperDetail\", params, [\"appToken\", \"userId\"]);\n}\n/**获取随机练习题目 */\nfunction GetTestTk(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/GetTestTk\", params, [\"appToken\", \"userId\"]);\n}\n/**试题纠错 */\nfunction SetTkCorrection(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/user/SetTkCorrection\", params, [\"appToken\", \"userId\"]);\n}\n/**单题提交接口 */\nfunction SubmitPaperAnswer(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/SubmitPaperAnswer\", params, [\"appToken\", \"userId\"]);\n}\n/**做题保存 */\nfunction SetPaperAnswer(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/SetPaperAnswer\", params, [\"appToken\", \"userId\"]);\n}\n/**结束练习 */\nfunction EndTest(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/EndTest\", params, [\"appToken\", \"userId\"]);\n}\n/**每日一练结束练习 */\nfunction EndDailyTest(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/EndDailyTest\", params, [\"appToken\", \"userId\"]);\n}\n/**购买练习 */\nfunction PayPaper(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/PayPaper\", params, [\"appToken\", \"userId\"]);\n}\n/**获取考试结果 */\nfunction GetPerformance(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/GetPerformance\", params, [\"appToken\", \"userId\"]);\n}\n/**学生自己评分 */\nfunction PaperSubjective(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/PaperSubjective\", params, [\"appToken\", \"userId\"]);\n}\n/**学生提交评分 */\nfunction SubmitGrade(params) {\n  return (0, _mainEntrance.POST)(\"/webapi/paper/SubmitGrade\", params, [\"appToken\", \"userId\"]);\n}\n/**试卷解析 */\nfunction GetRecordDetail(params) {\n  return (0, _mainEntrance.GET)(\"/webapi/paper/GetRecordDetail\", params, [\"appToken\", \"userId\"]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///484\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbIlNUQVRfVkVSU0lPTiIsInZlcnNpb24iLCJTVEFUX1VSTCIsIlNUQVRfSDVfVVJMIiwiUEFHRV9QVkVSX1RJTUUiLCJBUFBfUFZFUl9USU1FIiwiT1BFUkFUSU5HX1RJTUUiLCJVVUlEX0tFWSIsIlVVSURfVkFMVUUiLCJnZXRVdWlkIiwidXVpZCIsImdldFBsYXRmb3JtTmFtZSIsInBsdXMiLCJydW50aW1lIiwiZ2V0RENsb3VkSWQiLCJlIiwidW5pIiwiZ2V0U3RvcmFnZVN5bmMiLCJEYXRlIiwibm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic2V0U3RvcmFnZVN5bmMiLCJnZXRTZ2luIiwic3RhdERhdGEiLCJhcnIiLCJPYmplY3QiLCJrZXlzIiwic29ydEFyciIsInNvcnQiLCJzZ2luIiwic2dpblN0ciIsImkiLCJzaWduIiwib3B0aW9ucyIsInN1YnN0ciIsImxlbmd0aCIsImdldFNwbGljaW5nIiwiZGF0YSIsInN0ciIsImdldFRpbWUiLCJwYXJzZUludCIsInBsYXRmb3JtTGlzdCIsInByb2Nlc3MiLCJnZXRQYWNrTmFtZSIsInBhY2tOYW1lIiwiY2FuSVVzZSIsImdldEFjY291bnRJbmZvU3luYyIsIm1pbmlQcm9ncmFtIiwiYXBwSWQiLCJnZXRWZXJzaW9uIiwiZ2V0Q2hhbm5lbCIsInBsYXRmb3JtTmFtZSIsImNoYW5uZWwiLCJnZXRTY2VuZSIsInNjZW5lIiwiZ2V0TGF1bmNoT3B0aW9uc1N5bmMiLCJGaXJzdF9fVmlzaXRfX1RpbWVfX0tFWSIsIkxhc3RfX1Zpc2l0X19UaW1lX19LRVkiLCJnZXRGaXJzdFZpc2l0VGltZSIsInRpbWVTdG9yZ2UiLCJ0aW1lIiwicmVtb3ZlU3RvcmFnZVN5bmMiLCJnZXRMYXN0VmlzaXRUaW1lIiwiUEFHRV9SRVNJREVOQ0VfVElNRSIsIkZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUiLCJMYXN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUiLCJzZXRQYWdlUmVzaWRlbmNlVGltZSIsImdldFBhZ2VSZXNpZGVuY2VUaW1lIiwiVE9UQUxfX1ZJU0lUX19DT1VOVCIsImdldFRvdGFsVmlzaXRDb3VudCIsImNvdW50IiwiR2V0RW5jb2RlVVJJQ29tcG9uZW50T3B0aW9ucyIsInByb3AiLCJlbmNvZGVVUklDb21wb25lbnQiLCJTZXRfX0ZpcnN0X19UaW1lIiwiU2V0X19MYXN0X19UaW1lIiwiZ2V0Rmlyc3RUaW1lIiwiZ2V0TGFzdFRpbWUiLCJnZXRSZXNpZGVuY2VUaW1lIiwidHlwZSIsInJlc2lkZW5jZVRpbWUiLCJvdmVydGltZSIsImdldFJvdXRlIiwicGFnZXMiLCJnZXRDdXJyZW50UGFnZXMiLCJwYWdlIiwiX3NlbGYiLCIkdm0iLCIkbXAiLCJpcyIsIiRzY29wZSIsInJvdXRlIiwiZ2V0UGFnZVJvdXRlIiwic2VsZiIsInF1ZXJ5IiwiX3F1ZXJ5IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFBhZ2VUeXBlcyIsIm1wVHlwZSIsIiRvcHRpb25zIiwiY2FsaWJyYXRpb24iLCJldmVudE5hbWUiLCJjb25zb2xlIiwiZXJyb3IiLCJQYWdlc0pzb24iLCJyZXF1aXJlIiwiZGVmYXVsdCIsInN0YXRDb25maWciLCJyZXN1bHRPcHRpb25zIiwiZ2V0U3lzdGVtSW5mb1N5bmMiLCJVdGlsIiwiX3JldHJ5IiwiX3BsYXRmb3JtIiwiX25hdmlnYXRpb25CYXJUaXRsZSIsImNvbmZpZyIsInJlcG9ydCIsImx0IiwiX29wZXJhdGluZ1RpbWUiLCJfcmVwb3J0aW5nUmVxdWVzdERhdGEiLCJfX3ByZXZlbnRfdHJpZ2dlcmluZyIsIl9fbGljYXRpb25IaWRlIiwiX19saWNhdGlvblNob3ciLCJfbGFzdFBhZ2VSb3V0ZSIsInV0IiwibXBuIiwiYWsiLCJhcHBpZCIsInVzdiIsInYiLCJjaCIsImNuIiwicG4iLCJjdCIsInQiLCJ0dCIsInAiLCJwbGF0Zm9ybSIsImJyYW5kIiwibWQiLCJtb2RlbCIsInN2Iiwic3lzdGVtIiwicmVwbGFjZSIsIm1wc2RrIiwiU0RLVmVyc2lvbiIsIm1wdiIsImxhbmciLCJsYW5ndWFnZSIsInByIiwicGl4ZWxSYXRpbyIsInd3Iiwid2luZG93V2lkdGgiLCJ3aCIsIndpbmRvd0hlaWdodCIsInN3Iiwic2NyZWVuV2lkdGgiLCJzaCIsInNjcmVlbkhlaWdodCIsInBhdGgiLCJzYyIsIl9zZW5kUmVwb3J0UmVxdWVzdCIsIl9zZW5kSGlkZVJlcXVlc3QiLCJ1cmxyZWYiLCJ1cmxyZWZfdHMiLCJyb3V0ZXBhdGgiLCJ0aXRsZU5WaWV3IiwidGl0bGVUZXh0IiwibmF2aWdhdGlvbkJhclRpdGxlVGV4dCIsIl9zZW5kUGFnZVJlcXVlc3QiLCJ1cmwiLCJfc2VuZEV2ZW50UmVxdWVzdCIsImtleSIsImZ2dHMiLCJsdnRzIiwidHZjIiwiZ2V0UHJvcGVydHkiLCJnZXROZXR3b3JrSW5mbyIsIm9wdCIsInJlcXVlc3QiLCJ2YWx1ZSIsImVfbiIsImVfdiIsInRvU3RyaW5nIiwiZ2V0TmV0d29ya1R5cGUiLCJzdWNjZXNzIiwicmVzdWx0IiwibmV0IiwibmV0d29ya1R5cGUiLCJnZXRMb2NhdGlvbiIsIndndGluZm8iLCJnZW9jb2RlIiwiYWRkcmVzcyIsImNvdW50cnkiLCJwcm92aW5jZSIsImNpdHkiLCJsYXQiLCJsYXRpdHVkZSIsImxuZyIsImxvbmdpdHVkZSIsInRpdGxlIiwidHRuIiwidHRwaiIsInR0YyIsInJlcXVlc3REYXRhIiwicHVzaCIsInVuaVN0YXREYXRhIiwiZmlyc3RBcnIiLCJjb250ZW50QXJyIiwibGFzdEFyciIsInJkIiwiZm9yRWFjaCIsImVsbSIsIm5ld0RhdGEiLCJvcHRpb25zRGF0YSIsInJlcXVlc3RzIiwiaW1hZ2VSZXF1ZXN0Iiwic2V0VGltZW91dCIsIl9zZW5kUmVxdWVzdCIsIm1ldGhvZCIsImZhaWwiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiU3RhdCIsImluc3RhbmNlIiwiYWRkSW50ZXJjZXB0b3IiLCJhZGRJbnRlcmNlcHRvckluaXQiLCJpbnRlcmNlcHRMb2dpbiIsImludGVyY2VwdFNoYXJlIiwiaW50ZXJjZXB0UmVxdWVzdFBheW1lbnQiLCJpbnZva2UiLCJhcmdzIiwiY29tcGxldGUiLCJfbG9naW4iLCJfc2hhcmUiLCJfcGF5bWVudCIsIl9wYWdlU2hvdyIsIl9hcHBsaWNhdGlvblNob3ciLCJfcGFnZUhpZGUiLCJfYXBwbGljYXRpb25IaWRlIiwiZW0iLCJpbmZvIiwiZW1WYWwiLCJtZXNzYWdlIiwic3RhY2siLCJzdGF0IiwiZ2V0SW5zdGFuY2UiLCJpc0hpZGUiLCJsaWZlY3ljbGUiLCJvbkxhdW5jaCIsIm9uUmVhZHkiLCJyZWFkeSIsIm9uTG9hZCIsImxvYWQiLCJvblNoYXJlQXBwTWVzc2FnZSIsIm9sZFNoYXJlQXBwTWVzc2FnZSIsImNhbGwiLCJvblNob3ciLCJzaG93Iiwib25IaWRlIiwiaGlkZSIsIm9uVW5sb2FkIiwib25FcnJvciIsIm1haW4iXSwibWFwcGluZ3MiOiIyQ0FBQSw2RDs7QUFFQSxJQUFNQSxZQUFZLEdBQUdDLGdCQUFyQjtBQUNBLElBQU1DLFFBQVEsR0FBRyxtQ0FBakI7QUFDQSxJQUFNQyxXQUFXLEdBQUcsdUNBQXBCO0FBQ0EsSUFBTUMsY0FBYyxHQUFHLElBQXZCO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLEdBQXRCO0FBQ0EsSUFBTUMsY0FBYyxHQUFHLEVBQXZCOztBQUVBLElBQU1DLFFBQVEsR0FBRyxnQkFBakI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsaUJBQW5COztBQUVBLFNBQVNDLE9BQVQsR0FBbUI7QUFDakIsTUFBSUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxNQUFJQyxlQUFlLE9BQU8sR0FBMUIsRUFBK0I7QUFDN0IsUUFBSTtBQUNGRCxVQUFJLEdBQUdFLElBQUksQ0FBQ0MsT0FBTCxDQUFhQyxXQUFiLEVBQVA7QUFDRCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1ZMLFVBQUksR0FBRyxFQUFQO0FBQ0Q7QUFDRCxXQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGQSxRQUFJLEdBQUdNLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQlYsUUFBbkIsQ0FBUDtBQUNELEdBRkQsQ0FFRSxP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LENBQUNqQixjQUFMLENBQW9CLEtBQXBCO0FBQ0EsZUFBTzJCLGtCQUFrQixDQUFDQyxJQUFuQixDQUF3QixJQUF4QixFQUE4QmhPLE9BQTlCLENBQVA7QUFDRCxPQUhEO0FBSUQ7QUFDRixHQWpCZTtBQWtCaEJpTyxRQWxCZ0Isb0JBa0JQO0FBQ1BWLFVBQU0sR0FBRyxLQUFUO0FBQ0FGLFFBQUksQ0FBQ2EsSUFBTCxDQUFVLElBQVY7QUFDRCxHQXJCZTtBQXNCaEJDLFFBdEJnQixvQkFzQlA7QUFDUFosVUFBTSxHQUFHLElBQVQ7QUFDQUYsUUFBSSxDQUFDZSxJQUFMLENBQVUsSUFBVjtBQUNELEdBekJlO0FBMEJoQkMsVUExQmdCLHNCQTBCTDtBQUNULFFBQUlkLE1BQUosRUFBWTtBQUNWQSxZQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7QUFDREYsUUFBSSxDQUFDZSxJQUFMLENBQVUsSUFBVjtBQUNELEdBaENlO0FBaUNoQkUsU0FqQ2dCLG1CQWlDUjFQLENBakNRLEVBaUNMO0FBQ1R5TyxRQUFJLENBQUM5SSxLQUFMLENBQVczRixDQUFYO0FBQ0QsR0FuQ2UsRUFBbEI7OztBQXNDQSxTQUFTMlAsSUFBVCxHQUFnQjtBQUNkLE1BQUk5TixJQUFKLEVBQTRDO0FBQzFDNUIsT0FBRyxDQUFDc0csTUFBSixHQUFhLFVBQVNyQyxJQUFULEVBQWU5QyxPQUFmLEVBQXdCLENBQUUsQ0FBdkM7QUFDRCxHQUZELE1BRUssWUFNSjtBQUNGOztBQUVEdU8sSUFBSSxHIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcclxuXHJcbmNvbnN0IFNUQVRfVkVSU0lPTiA9IHZlcnNpb247XHJcbmNvbnN0IFNUQVRfVVJMID0gJ2h0dHBzOi8vdG9uZ2ppLmRjbG91ZC5pby91bmkvc3RhdCc7XHJcbmNvbnN0IFNUQVRfSDVfVVJMID0gJ2h0dHBzOi8vdG9uZ2ppLmRjbG91ZC5pby91bmkvc3RhdC5naWYnOyBcclxuY29uc3QgUEFHRV9QVkVSX1RJTUUgPSAxODAwO1xyXG5jb25zdCBBUFBfUFZFUl9USU1FID0gMzAwO1xyXG5jb25zdCBPUEVSQVRJTkdfVElNRSA9IDEwO1xyXG5cclxuY29uc3QgVVVJRF9LRVkgPSAnX19EQ19TVEFUX1VVSUQnO1xyXG5jb25zdCBVVUlEX1ZBTFVFID0gJ19fRENfVVVJRF9WQUxVRSc7XHJcblxyXG5mdW5jdGlvbiBnZXRVdWlkKCkge1xyXG4gIGxldCB1dWlkID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHV1aWQgPSBwbHVzLnJ1bnRpbWUuZ2V0RENsb3VkSWQoKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdXVpZCA9ICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHV1aWRcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICB1dWlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFVVSURfS0VZKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB1dWlkID0gVVVJRF9WQUxVRTtcclxuICB9XHJcblxyXG4gIGlmICghdXVpZCkge1xyXG4gICAgdXVpZCA9IERhdGUubm93KCkgKyAnJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlNyk7XHJcbiAgICB0cnkge1xyXG4gICAgICB1bmkuc2V0U3RvcmFnZVN5bmMoVVVJRF9LRVksIHV1aWQpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB1bmkuc2V0U3RvcmFnZVN5bmMoVVVJRF9LRVksIFVVSURfVkFMVUUpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdXVpZDtcclxufVxyXG5cclxuY29uc3QgZ2V0U2dpbiA9IChzdGF0RGF0YSkgPT4ge1xyXG4gIGxldCBhcnIgPSBPYmplY3Qua2V5cyhzdGF0RGF0YSk7XHJcbiAgbGV0IHNvcnRBcnIgPSBhcnIuc29ydCgpO1xyXG4gIGxldCBzZ2luID0ge307XHJcbiAgbGV0IHNnaW5TdHIgPSAnJztcclxuICBmb3IgKHZhciBpIGluIHNvcnRBcnIpIHtcclxuICAgIHNnaW5bc29ydEFycltpXV0gPSBzdGF0RGF0YVtzb3J0QXJyW2ldXTtcclxuICAgIHNnaW5TdHIgKz0gc29ydEFycltpXSArICc9JyArIHN0YXREYXRhW3NvcnRBcnJbaV1dICsgJyYnO1xyXG4gIH1cclxuICAvLyBjb25zdCBvcHRpb25zID0gc2dpblN0ci5zdWJzdHIoMCwgc2dpblN0ci5sZW5ndGggLSAxKVxyXG4gIC8vIHNnaW5TdHIgPSBzZ2luU3RyLnN1YnN0cigwLCBzZ2luU3RyLmxlbmd0aCAtIDEpICsgJyZrZXk9JyArIFNUQVRfS0VZO1xyXG4gIC8vIGNvbnN0IHNpID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShzZ2luU3RyKS5kaWdlc3QoJ2hleCcpO1xyXG4gIHJldHVybiB7XHJcbiAgICBzaWduOiAnJyxcclxuICAgIG9wdGlvbnM6IHNnaW5TdHIuc3Vic3RyKDAsIHNnaW5TdHIubGVuZ3RoIC0gMSlcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U3BsaWNpbmcgPSAoZGF0YSkgPT4ge1xyXG4gIGxldCBzdHIgPSAnJztcclxuICBmb3IgKHZhciBpIGluIGRhdGEpIHtcclxuICAgIHN0ciArPSBpICsgJz0nICsgZGF0YVtpXSArICcmJztcclxuICB9XHJcbiAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgc3RyLmxlbmd0aCAtIDEpXHJcbn07XHJcblxyXG5jb25zdCBnZXRUaW1lID0gKCkgPT4ge1xyXG4gIHJldHVybiBwYXJzZUludChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0UGxhdGZvcm1OYW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHBsYXRmb3JtTGlzdCA9IHtcclxuICAgICdhcHAtcGx1cyc6ICduJyxcclxuICAgICdoNSc6ICdoNScsXHJcbiAgICAnbXAtd2VpeGluJzogJ3d4JyxcclxuICAgICdtcC1hbGlwYXknOiAnYWxpJyxcclxuICAgICdtcC1iYWlkdSc6ICdiZCcsXHJcbiAgICAnbXAtdG91dGlhbyc6ICd0dCcsXHJcbiAgICAnbXAtcXEnOiAncXEnXHJcbiAgfTtcclxuICByZXR1cm4gcGxhdGZvcm1MaXN0W3Byb2Nlc3MuZW52LlZVRV9BUFBfUExBVEZPUk1dO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0UGFja05hbWUgPSAoKSA9PiB7XHJcbiAgbGV0IHBhY2tOYW1lID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnd3gnIHx8IGdldFBsYXRmb3JtTmFtZSgpID09PSAncXEnKSB7XHJcbiAgICAvLyDlhbzlrrnlvq7kv6HlsI/nqIvluo/kvY7niYjmnKzln7rnoYDlupNcclxuICAgIGlmKHVuaS5jYW5JVXNlKCdnZXRBY2NvdW50SW5mb1N5bmMnKSl7XHJcbiAgICAgIHBhY2tOYW1lID0gdW5pLmdldEFjY291bnRJbmZvU3luYygpLm1pbmlQcm9ncmFtLmFwcElkIHx8ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcGFja05hbWVcclxufTtcclxuXHJcbmNvbnN0IGdldFZlcnNpb24gPSAoKSA9PiB7XHJcbiAgcmV0dXJuIGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicgPyBwbHVzLnJ1bnRpbWUudmVyc2lvbiA6ICcnO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0Q2hhbm5lbCA9ICgpID0+IHtcclxuICBjb25zdCBwbGF0Zm9ybU5hbWUgPSBnZXRQbGF0Zm9ybU5hbWUoKTtcclxuICBsZXQgY2hhbm5lbCA9ICcnO1xyXG4gIGlmIChwbGF0Zm9ybU5hbWUgPT09ICduJykge1xyXG4gICAgY2hhbm5lbCA9IHBsdXMucnVudGltZS5jaGFubmVsO1xyXG4gIH1cclxuICByZXR1cm4gY2hhbm5lbDtcclxufTtcclxuXHJcbmNvbnN0IGdldFNjZW5lID0gKG9wdGlvbnMpID0+IHtcclxuICBjb25zdCBwbGF0Zm9ybU5hbWUgPSBnZXRQbGF0Zm9ybU5hbWUoKTtcclxuICBsZXQgc2NlbmUgPSAnJztcclxuICBpZiAob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfVxyXG4gIGlmIChwbGF0Zm9ybU5hbWUgPT09ICd3eCcpIHtcclxuICAgIHNjZW5lID0gdW5pLmdldExhdW5jaE9wdGlvbnNTeW5jKCkuc2NlbmU7XHJcbiAgfVxyXG4gIHJldHVybiBzY2VuZTtcclxufTtcclxuY29uc3QgRmlyc3RfX1Zpc2l0X19UaW1lX19LRVkgPSAnRmlyc3RfX1Zpc2l0X19UaW1lJztcclxuY29uc3QgTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSA9ICdMYXN0X19WaXNpdF9fVGltZSc7XHJcblxyXG5jb25zdCBnZXRGaXJzdFZpc2l0VGltZSA9ICgpID0+IHtcclxuICBjb25zdCB0aW1lU3RvcmdlID0gdW5pLmdldFN0b3JhZ2VTeW5jKEZpcnN0X19WaXNpdF9fVGltZV9fS0VZKTtcclxuICBsZXQgdGltZSA9IDA7XHJcbiAgaWYgKHRpbWVTdG9yZ2UpIHtcclxuICAgIHRpbWUgPSB0aW1lU3RvcmdlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aW1lID0gZ2V0VGltZSgpO1xyXG4gICAgdW5pLnNldFN0b3JhZ2VTeW5jKEZpcnN0X19WaXNpdF9fVGltZV9fS0VZLCB0aW1lKTtcclxuICAgIHVuaS5yZW1vdmVTdG9yYWdlU3luYyhMYXN0X19WaXNpdF9fVGltZV9fS0VZKTtcclxuICB9XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5jb25zdCBnZXRMYXN0VmlzaXRUaW1lID0gKCkgPT4ge1xyXG4gIGNvbnN0IHRpbWVTdG9yZ2UgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSk7XHJcbiAgbGV0IHRpbWUgPSAwO1xyXG4gIGlmICh0aW1lU3RvcmdlKSB7XHJcbiAgICB0aW1lID0gdGltZVN0b3JnZTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGltZSA9ICcnO1xyXG4gIH1cclxuICB1bmkuc2V0U3RvcmFnZVN5bmMoTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSwgZ2V0VGltZSgpKTtcclxuICByZXR1cm4gdGltZTtcclxufTtcclxuXHJcblxyXG5jb25zdCBQQUdFX1JFU0lERU5DRV9USU1FID0gJ19fcGFnZV9fcmVzaWRlbmNlX190aW1lJztcclxubGV0IEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUgPSAwO1xyXG5sZXQgTGFzdF9QYWdlX3Jlc2lkZW5jZV90aW1lID0gMDtcclxuXHJcblxyXG5jb25zdCBzZXRQYWdlUmVzaWRlbmNlVGltZSA9ICgpID0+IHtcclxuICBGaXJzdF9QYWdlX3Jlc2lkZW5jZV90aW1lID0gZ2V0VGltZSgpO1xyXG4gIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICB1bmkuc2V0U3RvcmFnZVN5bmMoUEFHRV9SRVNJREVOQ0VfVElNRSwgZ2V0VGltZSgpKTtcclxuICB9XHJcbiAgcmV0dXJuIEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWVcclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VSZXNpZGVuY2VUaW1lID0gKCkgPT4ge1xyXG4gIExhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IGdldFRpbWUoKTtcclxuICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgRmlyc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IHVuaS5nZXRTdG9yYWdlU3luYyhQQUdFX1JFU0lERU5DRV9USU1FKTtcclxuICB9XHJcbiAgcmV0dXJuIExhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSAtIEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWVcclxufTtcclxuY29uc3QgVE9UQUxfX1ZJU0lUX19DT1VOVCA9ICdUb3RhbF9fVmlzaXRfX0NvdW50JztcclxuY29uc3QgZ2V0VG90YWxWaXNpdENvdW50ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHRpbWVTdG9yZ2UgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoVE9UQUxfX1ZJU0lUX19DT1VOVCk7XHJcbiAgbGV0IGNvdW50ID0gMTtcclxuICBpZiAodGltZVN0b3JnZSkge1xyXG4gICAgY291bnQgPSB0aW1lU3RvcmdlO1xyXG4gICAgY291bnQrKztcclxuICB9XHJcbiAgdW5pLnNldFN0b3JhZ2VTeW5jKFRPVEFMX19WSVNJVF9fQ09VTlQsIGNvdW50KTtcclxuICByZXR1cm4gY291bnQ7XHJcbn07XHJcblxyXG5jb25zdCBHZXRFbmNvZGVVUklDb21wb25lbnRPcHRpb25zID0gKHN0YXREYXRhKSA9PiB7XHJcbiAgbGV0IGRhdGEgPSB7fTtcclxuICBmb3IgKGxldCBwcm9wIGluIHN0YXREYXRhKSB7XHJcbiAgICBkYXRhW3Byb3BdID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0YXREYXRhW3Byb3BdKTtcclxuICB9XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn07XHJcblxyXG5sZXQgU2V0X19GaXJzdF9fVGltZSA9IDA7XHJcbmxldCBTZXRfX0xhc3RfX1RpbWUgPSAwO1xyXG5cclxuY29uc3QgZ2V0Rmlyc3RUaW1lID0gKCkgPT4ge1xyXG4gIGxldCB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgU2V0X19GaXJzdF9fVGltZSA9IHRpbWU7XHJcbiAgU2V0X19MYXN0X19UaW1lID0gMDtcclxuICByZXR1cm4gdGltZTtcclxufTtcclxuXHJcblxyXG5jb25zdCBnZXRMYXN0VGltZSA9ICgpID0+IHtcclxuICBsZXQgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gIFNldF9fTGFzdF9fVGltZSA9IHRpbWU7XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5cclxuY29uc3QgZ2V0UmVzaWRlbmNlVGltZSA9ICh0eXBlKSA9PiB7XHJcbiAgbGV0IHJlc2lkZW5jZVRpbWUgPSAwO1xyXG4gIGlmIChTZXRfX0ZpcnN0X19UaW1lICE9PSAwKSB7XHJcbiAgICByZXNpZGVuY2VUaW1lID0gU2V0X19MYXN0X19UaW1lIC0gU2V0X19GaXJzdF9fVGltZTtcclxuICB9XHJcblxyXG4gIHJlc2lkZW5jZVRpbWUgPSBwYXJzZUludChyZXNpZGVuY2VUaW1lIC8gMTAwMCk7XHJcbiAgcmVzaWRlbmNlVGltZSA9IHJlc2lkZW5jZVRpbWUgPCAxID8gMSA6IHJlc2lkZW5jZVRpbWU7XHJcbiAgaWYgKHR5cGUgPT09ICdhcHAnKSB7XHJcbiAgICBsZXQgb3ZlcnRpbWUgPSByZXNpZGVuY2VUaW1lID4gQVBQX1BWRVJfVElNRSA/IHRydWUgOiBmYWxzZTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc2lkZW5jZVRpbWUsXHJcbiAgICAgIG92ZXJ0aW1lXHJcbiAgICB9O1xyXG4gIH1cclxuICBpZiAodHlwZSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICBsZXQgb3ZlcnRpbWUgPSByZXNpZGVuY2VUaW1lID4gUEFHRV9QVkVSX1RJTUUgPyB0cnVlIDogZmFsc2U7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXNpZGVuY2VUaW1lLFxyXG4gICAgICBvdmVydGltZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXNpZGVuY2VUaW1lXHJcbiAgfTtcclxuXHJcbn07XHJcblxyXG5jb25zdCBnZXRSb3V0ZSA9ICgpID0+IHtcclxuICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICB2YXIgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdO1xyXG4gIGxldCBfc2VsZiA9IHBhZ2UuJHZtO1xyXG5cclxuICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICdiZCcpIHtcclxuICAgIHJldHVybiBfc2VsZi4kbXAgJiYgX3NlbGYuJG1wLnBhZ2UuaXM7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAoX3NlbGYuJHNjb3BlICYmIF9zZWxmLiRzY29wZS5yb3V0ZSkgfHwgKF9zZWxmLiRtcCAmJiBfc2VsZi4kbXAucGFnZS5yb3V0ZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgZ2V0UGFnZVJvdXRlID0gKHNlbGYpID0+IHtcclxuICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICB2YXIgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdO1xyXG4gIGxldCBfc2VsZiA9IHBhZ2UuJHZtO1xyXG4gIGxldCBxdWVyeSA9IHNlbGYuX3F1ZXJ5O1xyXG4gIGxldCBzdHIgPSBxdWVyeSAmJiBKU09OLnN0cmluZ2lmeShxdWVyeSkgIT09ICd7fScgPyAnPycgKyBKU09OLnN0cmluZ2lmeShxdWVyeSkgOiAnJztcclxuICAvLyBjbGVhclxyXG4gIHNlbGYuX3F1ZXJ5ID0gJyc7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnYmQnKSB7XHJcbiAgICByZXR1cm4gX3NlbGYuJG1wICYmIF9zZWxmLiRtcC5wYWdlLmlzICsgc3RyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gKF9zZWxmLiRzY29wZSAmJiBfc2VsZi4kc2NvcGUucm91dGUgKyBzdHIgKXx8IChfc2VsZi4kbXAgJiYgX3NlbGYuJG1wLnBhZ2Uucm91dGUgKyBzdHIpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VUeXBlcyA9IChzZWxmKSA9PiB7XHJcbiAgaWYgKHNlbGYubXBUeXBlID09PSAncGFnZScgfHwgKHNlbGYuJG1wICYmIHNlbGYuJG1wLm1wVHlwZSA9PT0gJ3BhZ2UnKSB8fCBzZWxmLiRvcHRpb25zLm1wVHlwZSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuY29uc3QgY2FsaWJyYXRpb24gPSAoZXZlbnROYW1lLCBvcHRpb25zKSA9PiB7XHJcbiAgLy8gIGxvZ2luIOOAgSBzaGFyZSDjgIFwYXlfc3VjY2VzcyDjgIFwYXlfZmFpbCDjgIFyZWdpc3RlciDjgIF0aXRsZVxyXG4gIGlmKCFldmVudE5hbWUpe1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCDnvLrlsJEgW2V2ZW50TmFtZV0g5Y+C5pWwYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPT0gJ3N0cmluZycpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW2V2ZW50TmFtZV0g5Y+C5pWw57G75Z6L6ZSZ6K+vLOWPquiDveS4uiBTdHJpbmcg57G75Z6LYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAoZXZlbnROYW1lLmxlbmd0aCA+IDI1NSkge1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCBbZXZlbnROYW1lXSDlj4LmlbDplb/luqbkuI3og73lpKfkuo4gMjU1YCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW29wdGlvbnNdIOWPguaVsOexu+Wei+mUmeivryzlj6rog73kuLogU3RyaW5nIOaIliBPYmplY3Qg57G75Z6LYCk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmxlbmd0aCA+IDI1NSkge1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5pLnJlcG9ydCBbb3B0aW9uc10g5Y+C5pWw6ZW/5bqm5LiN6IO95aSn5LqOIDI1NWApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGlmIChldmVudE5hbWUgPT09ICd0aXRsZScgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCd1bmkucmVwb3J0IFtldmVudE5hbWVdIOWPguaVsOS4uiB0aXRsZSDml7bvvIxbb3B0aW9uc10g5Y+C5pWw5Y+q6IO95Li6IFN0cmluZyDnsbvlnosnKTtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgUGFnZXNKc29uID0gcmVxdWlyZSgndW5pLXBhZ2VzP3tcInR5cGVcIjpcInN0eWxlXCJ9JykuZGVmYXVsdDtcclxuY29uc3Qgc3RhdENvbmZpZyA9IHJlcXVpcmUoJ3VuaS1zdGF0LWNvbmZpZycpLmRlZmF1bHQgfHwgcmVxdWlyZSgndW5pLXN0YXQtY29uZmlnJyk7XHJcblxyXG5jb25zdCByZXN1bHRPcHRpb25zID0gdW5pLmdldFN5c3RlbUluZm9TeW5jKCk7XHJcblxyXG5jbGFzcyBVdGlsIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc2VsZiA9ICcnO1xyXG4gICAgdGhpcy5fcmV0cnkgPSAwO1xyXG4gICAgdGhpcy5fcGxhdGZvcm0gPSAnJztcclxuICAgIHRoaXMuX3F1ZXJ5ID0ge307XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUgPSB7XHJcbiAgICAgIGNvbmZpZzogJycsXHJcbiAgICAgIHBhZ2U6ICcnLFxyXG4gICAgICByZXBvcnQ6ICcnLFxyXG4gICAgICBsdDogJydcclxuICAgIH07XHJcbiAgICB0aGlzLl9vcGVyYXRpbmdUaW1lID0gMDtcclxuICAgIHRoaXMuX3JlcG9ydGluZ1JlcXVlc3REYXRhID0ge1xyXG4gICAgICAnMSc6IFtdLFxyXG4gICAgICAnMTEnOiBbXVxyXG4gICAgfTtcclxuICAgIHRoaXMuX19wcmV2ZW50X3RyaWdnZXJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9fbGljYXRpb25IaWRlID0gZmFsc2U7XHJcbiAgICB0aGlzLl9fbGljYXRpb25TaG93ID0gZmFsc2U7XHJcbiAgICB0aGlzLl9sYXN0UGFnZVJvdXRlID0gJyc7XHJcbiAgICB0aGlzLnN0YXREYXRhID0ge1xyXG4gICAgICB1dWlkOiBnZXRVdWlkKCksXHJcbiAgICAgIHV0OiBnZXRQbGF0Zm9ybU5hbWUoKSxcclxuICAgICAgbXBuOiBnZXRQYWNrTmFtZSgpLFxyXG4gICAgICBhazogc3RhdENvbmZpZy5hcHBpZCxcclxuICAgICAgdXN2OiBTVEFUX1ZFUlNJT04sXHJcbiAgICAgIHY6IGdldFZlcnNpb24oKSxcclxuICAgICAgY2g6IGdldENoYW5uZWwoKSxcclxuICAgICAgY246ICcnLFxyXG4gICAgICBwbjogJycsXHJcbiAgICAgIGN0OiAnJyxcclxuICAgICAgdDogZ2V0VGltZSgpLFxyXG4gICAgICB0dDogJycsXHJcbiAgICAgIHA6IHJlc3VsdE9wdGlvbnMucGxhdGZvcm0gPT09ICdhbmRyb2lkJyA/ICdhJyA6ICdpJyxcclxuICAgICAgYnJhbmQ6IHJlc3VsdE9wdGlvbnMuYnJhbmQgfHwgJycsXHJcbiAgICAgIG1kOiByZXN1bHRPcHRpb25zLm1vZGVsLFxyXG4gICAgICBzdjogcmVzdWx0T3B0aW9ucy5zeXN0ZW0ucmVwbGFjZSgvKEFuZHJvaWR8aU9TKVxccy8sICcnKSxcclxuICAgICAgbXBzZGs6IHJlc3VsdE9wdGlvbnMuU0RLVmVyc2lvbiB8fCAnJyxcclxuICAgICAgbXB2OiByZXN1bHRPcHRpb25zLnZlcnNpb24gfHwgJycsXHJcbiAgICAgIGxhbmc6IHJlc3VsdE9wdGlvbnMubGFuZ3VhZ2UsXHJcbiAgICAgIHByOiByZXN1bHRPcHRpb25zLnBpeGVsUmF0aW8sXHJcbiAgICAgIHd3OiByZXN1bHRPcHRpb25zLndpbmRvd1dpZHRoLFxyXG4gICAgICB3aDogcmVzdWx0T3B0aW9ucy53aW5kb3dIZWlnaHQsXHJcbiAgICAgIHN3OiByZXN1bHRPcHRpb25zLnNjcmVlbldpZHRoLFxyXG4gICAgICBzaDogcmVzdWx0T3B0aW9ucy5zY3JlZW5IZWlnaHRcclxuICAgIH07XHJcblxyXG4gIH1cclxuXHJcbiAgX2FwcGxpY2F0aW9uU2hvdygpIHtcclxuICAgIGlmICh0aGlzLl9fbGljYXRpb25IaWRlKSB7XHJcbiAgICAgIGdldExhc3RUaW1lKCk7XHJcbiAgICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCdhcHAnKTtcclxuICAgICAgaWYgKHRpbWUub3ZlcnRpbWUpIHtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIHBhdGg6IHRoaXMuX2xhc3RQYWdlUm91dGUsXHJcbiAgICAgICAgICBzY2VuZTogdGhpcy5zdGF0RGF0YS5zY1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fc2VuZFJlcG9ydFJlcXVlc3Qob3B0aW9ucyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fX2xpY2F0aW9uSGlkZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FwcGxpY2F0aW9uSGlkZShzZWxmLCB0eXBlKSB7XHJcblxyXG4gICAgdGhpcy5fX2xpY2F0aW9uSGlkZSA9IHRydWU7XHJcbiAgICBnZXRMYXN0VGltZSgpO1xyXG4gICAgY29uc3QgdGltZSA9IGdldFJlc2lkZW5jZVRpbWUoKTtcclxuICAgIGdldEZpcnN0VGltZSgpO1xyXG4gICAgY29uc3Qgcm91dGUgPSBnZXRQYWdlUm91dGUodGhpcyk7XHJcbiAgICB0aGlzLl9zZW5kSGlkZVJlcXVlc3Qoe1xyXG4gICAgICB1cmxyZWY6IHJvdXRlLFxyXG4gICAgICB1cmxyZWZfdHM6IHRpbWUucmVzaWRlbmNlVGltZVxyXG4gICAgfSwgdHlwZSk7XHJcbiAgfVxyXG5cclxuICBfcGFnZVNob3coKSB7XHJcbiAgICBjb25zdCByb3V0ZSA9IGdldFBhZ2VSb3V0ZSh0aGlzKTtcclxuICAgIGNvbnN0IHJvdXRlcGF0aCA9IGdldFJvdXRlKCk7XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUuY29uZmlnID0gUGFnZXNKc29uICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdLnRpdGxlTlZpZXcgJiZcclxuICAgICAgUGFnZXNKc29uLnBhZ2VzW3JvdXRlcGF0aF0udGl0bGVOVmlldy50aXRsZVRleHQgfHxcclxuICAgICAgUGFnZXNKc29uICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdLm5hdmlnYXRpb25CYXJUaXRsZVRleHQgfHwgJyc7XHJcblxyXG4gICAgaWYgKHRoaXMuX19saWNhdGlvblNob3cpIHtcclxuICAgICAgZ2V0Rmlyc3RUaW1lKCk7XHJcbiAgICAgIHRoaXMuX19saWNhdGlvblNob3cgPSBmYWxzZTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ+i/meaYryBvbkxhdWNoIOS5i+WQjuaJp+ihjOeahOesrOS4gOasoSBwYWdlU2hvdyDvvIzkuLrkuIvmrKHorrDlvZXml7bpl7TlgZrlh4blpIcnKTtcclxuICAgICAgdGhpcy5fbGFzdFBhZ2VSb3V0ZSA9IHJvdXRlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFzdFRpbWUoKTtcclxuICAgIHRoaXMuX2xhc3RQYWdlUm91dGUgPSByb3V0ZTtcclxuICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCdwYWdlJyk7XHJcbiAgICBpZiAodGltZS5vdmVydGltZSkge1xyXG4gICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgICBwYXRoOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgIHNjZW5lOiB0aGlzLnN0YXREYXRhLnNjXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuX3NlbmRSZXBvcnRSZXF1ZXN0KG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0Rmlyc3RUaW1lKCk7XHJcbiAgfVxyXG5cclxuICBfcGFnZUhpZGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX19saWNhdGlvbkhpZGUpIHtcclxuICAgICAgZ2V0TGFzdFRpbWUoKTtcclxuICAgICAgY29uc3QgdGltZSA9IGdldFJlc2lkZW5jZVRpbWUoJ3BhZ2UnKTtcclxuICAgICAgdGhpcy5fc2VuZFBhZ2VSZXF1ZXN0KHtcclxuICAgICAgICB1cmw6IHRoaXMuX2xhc3RQYWdlUm91dGUsXHJcbiAgICAgICAgdXJscmVmOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgIHVybHJlZl90czogdGltZS5yZXNpZGVuY2VUaW1lXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUgPSB7XHJcbiAgICAgICAgY29uZmlnOiAnJyxcclxuICAgICAgICBwYWdlOiAnJyxcclxuICAgICAgICByZXBvcnQ6ICcnLFxyXG4gICAgICAgIGx0OiAnJ1xyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfbG9naW4oKSB7XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5OiAnbG9naW4nXHJcbiAgICB9LCAwKTtcclxuICB9XHJcblxyXG4gIF9zaGFyZSgpIHtcclxuICAgIHRoaXMuX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAgICBrZXk6ICdzaGFyZSdcclxuICAgIH0sIDApO1xyXG4gIH1cclxuICBfcGF5bWVudChrZXkpIHtcclxuICAgIHRoaXMuX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAgICBrZXlcclxuICAgIH0sIDApO1xyXG4gIH1cclxuICBfc2VuZFJlcG9ydFJlcXVlc3Qob3B0aW9ucykge1xyXG5cclxuICAgIHRoaXMuX25hdmlnYXRpb25CYXJUaXRsZS5sdCA9ICcxJztcclxuICAgIGxldCBxdWVyeSA9IG9wdGlvbnMucXVlcnkgJiYgSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5xdWVyeSkgIT09ICd7fScgPyAnPycgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zLnF1ZXJ5KSA6ICcnO1xyXG4gICAgdGhpcy5zdGF0RGF0YS5sdCA9ICcxJztcclxuICAgIHRoaXMuc3RhdERhdGEudXJsID0gKG9wdGlvbnMucGF0aCArIHF1ZXJ5KSB8fCAnJztcclxuICAgIHRoaXMuc3RhdERhdGEudCA9IGdldFRpbWUoKTtcclxuICAgIHRoaXMuc3RhdERhdGEuc2MgPSBnZXRTY2VuZShvcHRpb25zLnNjZW5lKTtcclxuICAgIHRoaXMuc3RhdERhdGEuZnZ0cyA9IGdldEZpcnN0VmlzaXRUaW1lKCk7XHJcbiAgICB0aGlzLnN0YXREYXRhLmx2dHMgPSBnZXRMYXN0VmlzaXRUaW1lKCk7XHJcbiAgICB0aGlzLnN0YXREYXRhLnR2YyA9IGdldFRvdGFsVmlzaXRDb3VudCgpO1xyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdGhpcy5nZXRQcm9wZXJ0eSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5nZXROZXR3b3JrSW5mbygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NlbmRQYWdlUmVxdWVzdChvcHQpIHtcclxuICAgIGxldCB7XHJcbiAgICAgIHVybCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHNcclxuICAgIH0gPSBvcHQ7XHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUubHQgPSAnMTEnO1xyXG4gICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGFrOiB0aGlzLnN0YXREYXRhLmFrLFxyXG4gICAgICB1dWlkOiB0aGlzLnN0YXREYXRhLnV1aWQsXHJcbiAgICAgIGx0OiAnMTEnLFxyXG4gICAgICB1dDogdGhpcy5zdGF0RGF0YS51dCxcclxuICAgICAgdXJsLFxyXG4gICAgICB0dDogdGhpcy5zdGF0RGF0YS50dCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHMsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIF9zZW5kSGlkZVJlcXVlc3Qob3B0LCB0eXBlKSB7XHJcbiAgICBsZXQge1xyXG4gICAgICB1cmxyZWYsXHJcbiAgICAgIHVybHJlZl90c1xyXG4gICAgfSA9IG9wdDtcclxuICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICBhazogdGhpcy5zdGF0RGF0YS5hayxcclxuICAgICAgdXVpZDogdGhpcy5zdGF0RGF0YS51dWlkLFxyXG4gICAgICBsdDogJzMnLFxyXG4gICAgICB1dDogdGhpcy5zdGF0RGF0YS51dCxcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHMsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zLCB0eXBlKTtcclxuICB9XHJcbiAgX3NlbmRFdmVudFJlcXVlc3Qoe1xyXG4gICAga2V5ID0gJycsXHJcbiAgICB2YWx1ZSA9IFwiXCJcclxuICB9ID0ge30pIHtcclxuICAgIGNvbnN0IHJvdXRlID0gdGhpcy5fbGFzdFBhZ2VSb3V0ZTtcclxuICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICBhazogdGhpcy5zdGF0RGF0YS5hayxcclxuICAgICAgdXVpZDogdGhpcy5zdGF0RGF0YS51dWlkLFxyXG4gICAgICBsdDogJzIxJyxcclxuICAgICAgdXQ6IHRoaXMuc3RhdERhdGEudXQsXHJcbiAgICAgIHVybDogcm91dGUsXHJcbiAgICAgIGNoOiB0aGlzLnN0YXREYXRhLmNoLFxyXG4gICAgICBlX246IGtleSxcclxuICAgICAgZV92OiB0eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlLnRvU3RyaW5nKCksXHJcbiAgICAgIHVzdjogdGhpcy5zdGF0RGF0YS51c3YsXHJcbiAgICAgIHQ6IGdldFRpbWUoKSxcclxuICAgICAgcDogdGhpcy5zdGF0RGF0YS5wXHJcbiAgICB9O1xyXG4gICAgdGhpcy5yZXF1ZXN0KG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TmV0d29ya0luZm8oKSB7XHJcbiAgICB1bmkuZ2V0TmV0d29ya1R5cGUoe1xyXG4gICAgICBzdWNjZXNzOiAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdGF0RGF0YS5uZXQgPSByZXN1bHQubmV0d29ya1R5cGU7XHJcbiAgICAgICAgdGhpcy5nZXRMb2NhdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFByb3BlcnR5KCkge1xyXG4gICAgcGx1cy5ydW50aW1lLmdldFByb3BlcnR5KHBsdXMucnVudGltZS5hcHBpZCwgKHdndGluZm8pID0+IHtcclxuICAgICAgdGhpcy5zdGF0RGF0YS52ID0gd2d0aW5mby52ZXJzaW9uIHx8ICcnO1xyXG4gICAgICB0aGlzLmdldE5ldHdvcmtJbmZvKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldExvY2F0aW9uKCkge1xyXG4gICAgaWYgKHN0YXRDb25maWcuZ2V0TG9jYXRpb24pIHtcclxuICAgICAgdW5pLmdldExvY2F0aW9uKHtcclxuICAgICAgICB0eXBlOiAnd2dzODQnLFxyXG4gICAgICAgIGdlb2NvZGU6IHRydWUsXHJcbiAgICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlc3VsdC5hZGRyZXNzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdERhdGEuY24gPSByZXN1bHQuYWRkcmVzcy5jb3VudHJ5O1xyXG4gICAgICAgICAgICB0aGlzLnN0YXREYXRhLnBuID0gcmVzdWx0LmFkZHJlc3MucHJvdmluY2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdERhdGEuY3QgPSByZXN1bHQuYWRkcmVzcy5jaXR5O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuc3RhdERhdGEubGF0ID0gcmVzdWx0LmxhdGl0dWRlO1xyXG4gICAgICAgICAgdGhpcy5zdGF0RGF0YS5sbmcgPSByZXN1bHQubG9uZ2l0dWRlO1xyXG4gICAgICAgICAgdGhpcy5yZXF1ZXN0KHRoaXMuc3RhdERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXREYXRhLmxhdCA9IDA7XHJcbiAgICAgIHRoaXMuc3RhdERhdGEubG5nID0gMDtcclxuICAgICAgdGhpcy5yZXF1ZXN0KHRoaXMuc3RhdERhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVxdWVzdChkYXRhLCB0eXBlKSB7XHJcbiAgICBsZXQgdGltZSA9IGdldFRpbWUoKTtcclxuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlO1xyXG4gICAgZGF0YS50dG4gPSB0aXRsZS5wYWdlO1xyXG4gICAgZGF0YS50dHBqID0gdGl0bGUuY29uZmlnO1xyXG4gICAgZGF0YS50dGMgPSB0aXRsZS5yZXBvcnQ7XHJcblxyXG4gICAgbGV0IHJlcXVlc3REYXRhID0gdGhpcy5fcmVwb3J0aW5nUmVxdWVzdERhdGE7XHJcbiAgICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgICByZXF1ZXN0RGF0YSA9IHVuaS5nZXRTdG9yYWdlU3luYygnX19VTklfX1NUQVRfX0RBVEEnKSB8fCB7fTtcclxuICAgIH1cclxuICAgIGlmICghcmVxdWVzdERhdGFbZGF0YS5sdF0pIHtcclxuICAgICAgcmVxdWVzdERhdGFbZGF0YS5sdF0gPSBbXTtcclxuICAgIH1cclxuICAgIHJlcXVlc3REYXRhW2RhdGEubHRdLnB1c2goZGF0YSk7XHJcblxyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdW5pLnNldFN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScsIHJlcXVlc3REYXRhKTtcclxuICAgIH1cclxuICAgIGlmIChnZXRQYWdlUmVzaWRlbmNlVGltZSgpIDwgT1BFUkFUSU5HX1RJTUUgJiYgIXR5cGUpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBsZXQgdW5pU3RhdERhdGEgPSB0aGlzLl9yZXBvcnRpbmdSZXF1ZXN0RGF0YTtcclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICAgIHVuaVN0YXREYXRhID0gdW5pLmdldFN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScpO1xyXG4gICAgfVxyXG4gICAgLy8g5pe26Ze06LaF6L+H77yM6YeN5paw6I635Y+W5pe26Ze05oizXHJcbiAgICBzZXRQYWdlUmVzaWRlbmNlVGltZSgpO1xyXG4gICAgbGV0IGZpcnN0QXJyID0gW107XHJcbiAgICBsZXQgY29udGVudEFyciA9IFtdO1xyXG4gICAgbGV0IGxhc3RBcnIgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHVuaVN0YXREYXRhKSB7XHJcbiAgICAgIGNvbnN0IHJkID0gdW5pU3RhdERhdGFbaV07XHJcbiAgICAgIHJkLmZvckVhY2goKGVsbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBnZXRTcGxpY2luZyhlbG0pO1xyXG4gICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICBmaXJzdEFyci5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMykge1xyXG4gICAgICAgICAgbGFzdEFyci5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZW50QXJyLnB1c2gobmV3RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdEFyci5wdXNoKC4uLmNvbnRlbnRBcnIsIC4uLmxhc3RBcnIpO1xyXG4gICAgbGV0IG9wdGlvbnNEYXRhID0ge1xyXG4gICAgICB1c3Y6IFNUQVRfVkVSU0lPTiwgLy/nu5/orqEgU0RLIOeJiOacrOWPt1xyXG4gICAgICB0OiB0aW1lLCAvL+WPkemAgeivt+axguaXtueahOaXtumXtOaIrlxyXG4gICAgICByZXF1ZXN0czogSlNPTi5zdHJpbmdpZnkoZmlyc3RBcnIpLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9yZXBvcnRpbmdSZXF1ZXN0RGF0YSA9IHt9O1xyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgdW5pLnJlbW92ZVN0b3JhZ2VTeW5jKCdfX1VOSV9fU1RBVF9fREFUQScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkYXRhLnV0ID09PSAnaDUnKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2VSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicgJiYgdGhpcy5zdGF0RGF0YS5wID09PSAnYScpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fc2VuZFJlcXVlc3Qob3B0aW9uc0RhdGEpO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHRoaXMuX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICB9XHJcbiAgX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKSB7XHJcbiAgICB1bmkucmVxdWVzdCh7XHJcbiAgICAgIHVybDogU1RBVF9VUkwsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAvLyBoZWFkZXI6IHtcclxuICAgICAgLy8gICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIC8vIOm7mOiupOWAvFxyXG4gICAgICAvLyB9LFxyXG4gICAgICBkYXRhOiBvcHRpb25zRGF0YSxcclxuICAgICAgc3VjY2VzczogKCkgPT4ge1xyXG4gICAgICAgIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coJ3N0YXQgcmVxdWVzdCBzdWNjZXNzJyk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICB9LFxyXG4gICAgICBmYWlsOiAoZSkgPT4ge1xyXG4gICAgICAgIGlmICgrK3RoaXMuX3JldHJ5IDwgMykge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIGg1IOivt+axglxyXG4gICAqL1xyXG4gIGltYWdlUmVxdWVzdChkYXRhKSB7XHJcbiAgICBsZXQgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGxldCBvcHRpb25zID0gZ2V0U2dpbihHZXRFbmNvZGVVUklDb21wb25lbnRPcHRpb25zKGRhdGEpKS5vcHRpb25zO1xyXG4gICAgaW1hZ2Uuc3JjID0gU1RBVF9INV9VUkwgKyAnPycgKyBvcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgc2VuZEV2ZW50KGtleSwgdmFsdWUpIHtcclxuICAgIC8vIOagoemqjCB0eXBlIOWPguaVsFxyXG4gICAgaWYgKGNhbGlicmF0aW9uKGtleSwgdmFsdWUpKSByZXR1cm5cclxuXHJcbiAgICBpZiAoa2V5ID09PSAndGl0bGUnKSB7XHJcbiAgICAgIHRoaXMuX25hdmlnYXRpb25CYXJUaXRsZS5yZXBvcnQgPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5LFxyXG4gICAgICB2YWx1ZTogdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZVxyXG4gICAgfSwgMSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgU3RhdCBleHRlbmRzIFV0aWwge1xyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xyXG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFN0YXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcclxuICAgIC8vIOazqOWGjOaLpuaIquWZqFxyXG4gICAgaWYgKHR5cGVvZiB1bmkuYWRkSW50ZXJjZXB0b3IgPT09ICdmdW5jdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgICAgdGhpcy5hZGRJbnRlcmNlcHRvckluaXQoKTtcclxuICAgICAgdGhpcy5pbnRlcmNlcHRMb2dpbigpO1xyXG4gICAgICB0aGlzLmludGVyY2VwdFNoYXJlKHRydWUpO1xyXG4gICAgICB0aGlzLmludGVyY2VwdFJlcXVlc3RQYXltZW50KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRJbnRlcmNlcHRvckluaXQoKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICB1bmkuYWRkSW50ZXJjZXB0b3IoJ3NldE5hdmlnYXRpb25CYXJUaXRsZScsIHtcclxuICAgICAgaW52b2tlKGFyZ3MpIHtcclxuICAgICAgICBzZWxmLl9uYXZpZ2F0aW9uQmFyVGl0bGUucGFnZSA9IGFyZ3MudGl0bGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW50ZXJjZXB0TG9naW4oKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICB1bmkuYWRkSW50ZXJjZXB0b3IoJ2xvZ2luJywge1xyXG4gICAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICBzZWxmLl9sb2dpbigpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdFNoYXJlKHR5cGUpIHtcclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIGlmICghdHlwZSkge1xyXG4gICAgICBzZWxmLl9zaGFyZSgpO1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHVuaS5hZGRJbnRlcmNlcHRvcignc2hhcmUnLCB7XHJcbiAgICAgIHN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgc2VsZi5fc2hhcmUoKTtcclxuICAgICAgfSxcclxuICAgICAgZmFpbCgpIHtcclxuICAgICAgICBzZWxmLl9zaGFyZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdFJlcXVlc3RQYXltZW50KCkge1xyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgdW5pLmFkZEludGVyY2VwdG9yKCdyZXF1ZXN0UGF5bWVudCcsIHtcclxuICAgICAgc3VjY2VzcygpIHtcclxuICAgICAgICBzZWxmLl9wYXltZW50KCdwYXlfc3VjY2VzcycpO1xyXG4gICAgICB9LFxyXG4gICAgICBmYWlsKCkge1xyXG4gICAgICAgIHNlbGYuX3BheW1lbnQoJ3BheV9mYWlsJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVwb3J0KG9wdGlvbnMsIHNlbGYpIHtcclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2coJ3JlcG9ydCBpbml0Jyk7XHJcbiAgICAvLyB9XHJcbiAgICBzZXRQYWdlUmVzaWRlbmNlVGltZSgpO1xyXG4gICAgdGhpcy5fX2xpY2F0aW9uU2hvdyA9IHRydWU7XHJcbiAgICB0aGlzLl9zZW5kUmVwb3J0UmVxdWVzdChvcHRpb25zLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGxvYWQob3B0aW9ucywgc2VsZikge1xyXG4gICAgaWYgKCFzZWxmLiRzY29wZSAmJiAhc2VsZi4kbXApIHtcclxuICAgICAgY29uc3QgcGFnZSA9IGdldEN1cnJlbnRQYWdlcygpO1xyXG4gICAgICBzZWxmLiRzY29wZSA9IHBhZ2VbcGFnZS5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICB0aGlzLl9xdWVyeSA9IG9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICBzaG93KHNlbGYpIHtcclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICBpZiAoZ2V0UGFnZVR5cGVzKHNlbGYpKSB7XHJcbiAgICAgIHRoaXMuX3BhZ2VTaG93KHNlbGYpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fYXBwbGljYXRpb25TaG93KHNlbGYpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVhZHkoc2VsZikge1xyXG4gICAgLy8gdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIC8vIGlmIChnZXRQYWdlVHlwZXMoc2VsZikpIHtcclxuICAgIC8vICAgdGhpcy5fcGFnZVNob3coc2VsZik7XHJcbiAgICAvLyB9XHJcbiAgfVxyXG4gIGhpZGUoc2VsZikge1xyXG4gICAgdGhpcy5zZWxmID0gc2VsZjtcclxuICAgIGlmIChnZXRQYWdlVHlwZXMoc2VsZikpIHtcclxuICAgICAgdGhpcy5fcGFnZUhpZGUoc2VsZik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9hcHBsaWNhdGlvbkhpZGUoc2VsZiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVycm9yKGVtKSB7XHJcbiAgICBpZiAodGhpcy5fcGxhdGZvcm0gPT09ICdkZXZ0b29scycpIHtcclxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCflvZPliY3ov5DooYznjq/looPkuLrlvIDlj5HogIXlt6XlhbfvvIzkuI3kuIrmiqXmlbDmja7jgIInKTtcclxuICAgICAgfVxyXG4gICAgICAvLyByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgZW1WYWwgPSAnJztcclxuICAgIGlmICghZW0ubWVzc2FnZSkge1xyXG4gICAgICBlbVZhbCA9IEpTT04uc3RyaW5naWZ5KGVtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVtVmFsID0gZW0uc3RhY2s7XHJcbiAgICB9XHJcbiAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgYWs6IHRoaXMuc3RhdERhdGEuYWssXHJcbiAgICAgIHV1aWQ6IHRoaXMuc3RhdERhdGEudXVpZCxcclxuICAgICAgbHQ6ICczMScsXHJcbiAgICAgIHV0OiB0aGlzLnN0YXREYXRhLnV0LFxyXG4gICAgICBjaDogdGhpcy5zdGF0RGF0YS5jaCxcclxuICAgICAgbXBzZGs6IHRoaXMuc3RhdERhdGEubXBzZGssXHJcbiAgICAgIG1wdjogdGhpcy5zdGF0RGF0YS5tcHYsXHJcbiAgICAgIHY6IHRoaXMuc3RhdERhdGEudixcclxuICAgICAgZW06IGVtVmFsLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHN0YXQgPSBTdGF0LmdldEluc3RhbmNlKCk7XHJcbmxldCBpc0hpZGUgPSBmYWxzZTtcclxuY29uc3QgbGlmZWN5Y2xlID0ge1xyXG4gIG9uTGF1bmNoKG9wdGlvbnMpIHtcclxuICAgIHN0YXQucmVwb3J0KG9wdGlvbnMsIHRoaXMpO1xyXG4gIH0sXHJcbiAgb25SZWFkeSgpIHtcclxuICAgIHN0YXQucmVhZHkodGhpcyk7XHJcbiAgfSxcclxuICBvbkxvYWQob3B0aW9ucykge1xyXG4gICAgc3RhdC5sb2FkKG9wdGlvbnMsIHRoaXMpO1xyXG4gICAgLy8g6YeN5YaZ5YiG5Lqr77yM6I635Y+W5YiG5Lqr5LiK5oql5LqL5Lu2XHJcbiAgICBpZiAodGhpcy4kc2NvcGUgJiYgdGhpcy4kc2NvcGUub25TaGFyZUFwcE1lc3NhZ2UpIHtcclxuICAgICAgbGV0IG9sZFNoYXJlQXBwTWVzc2FnZSA9IHRoaXMuJHNjb3BlLm9uU2hhcmVBcHBNZXNzYWdlO1xyXG4gICAgICB0aGlzLiRzY29wZS5vblNoYXJlQXBwTWVzc2FnZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBzdGF0LmludGVyY2VwdFNoYXJlKGZhbHNlKTtcclxuICAgICAgICByZXR1cm4gb2xkU2hhcmVBcHBNZXNzYWdlLmNhbGwodGhpcywgb3B0aW9ucylcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9LFxyXG4gIG9uU2hvdygpIHtcclxuICAgIGlzSGlkZSA9IGZhbHNlO1xyXG4gICAgc3RhdC5zaG93KHRoaXMpO1xyXG4gIH0sXHJcbiAgb25IaWRlKCkge1xyXG4gICAgaXNIaWRlID0gdHJ1ZTtcclxuICAgIHN0YXQuaGlkZSh0aGlzKTtcclxuICB9LFxyXG4gIG9uVW5sb2FkKCkge1xyXG4gICAgaWYgKGlzSGlkZSkge1xyXG4gICAgICBpc0hpZGUgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBzdGF0LmhpZGUodGhpcyk7XHJcbiAgfSxcclxuICBvbkVycm9yKGUpIHtcclxuICAgIHN0YXQuZXJyb3IoZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gbWFpbigpIHtcclxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIHVuaS5yZXBvcnQgPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zKSB7fTtcclxuICB9ZWxzZXtcclxuICAgIGNvbnN0IFZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpO1xyXG4gICAgKFZ1ZS5kZWZhdWx0IHx8IFZ1ZSkubWl4aW4obGlmZWN5Y2xlKTtcclxuICAgIHVuaS5yZXBvcnQgPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zKSB7XHJcbiAgICAgIHN0YXQuc2VuZEV2ZW50KHR5cGUsIG9wdGlvbnMpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbm1haW4oKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 565:
/*!**************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/utils/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var Utils;\n(function () {\n  var letters = [];\n  for (var i = 65; i < 91; i++) {\n    letters.push(String.fromCharCode(i));\n  }\n  Utils = {\n    /**\r\n             * 数组遍历\r\n             * @param {Array} data \r\n             * @param {Function} fn \r\n             */\n    map: function map(data, fn) {\n      if (data instanceof Array) {\n        for (var i = 0; i < data.length; i++) {\n          typeof fn === 'function' && fn(data[i], i);\n        }\n      } else {\n        return false;\n      }\n    },\n    /**\r\n        * 判断数据是数组还是对象\r\n        */\n    isArrayOrObject: function isArrayOrObject(data) {\n      var callType = Object.prototype.toString.call(data);\n      var type = false;\n      if (callType === '[object Array]') {\n        type = 'Array';\n      } else if (callType === '[object Object]') {\n        type = 'Object';\n      }\n      return type;\n    },\n\n    /**\r\n        * 根据下标返回字母\r\n        * @param {Number}\r\n        */\n    getLetter: function getLetter(i) {\n      return letters[i];\n    },\n\n    /**\r\n        * 根据子母返回下标\r\n        * @param {Number}\r\n        */\n    getLetterIndex: function getLetterIndex(letter) {\n      var index = 0;\n      letters.map(function (ltr, i) {\n        if (ltr == letter) {\n          index = i;\n        }\n      });\n      return index;\n    },\n    /**\r\n        * 判断是否滚动至底部\r\n        */\n    getIsScrolltolower: function getIsScrolltolower(el) {\n      var isScrolltolower = false;\n      if (el) {\n        if (el.scrollTop + el.offsetHeight >= el.scrollHeight) {\n          isScrolltolower = true;\n        }\n      } else {\n        if (window.scrollY + window.innerHeight >= document.getElementsByTagName('body')[0].scrollHeight) {\n          isScrolltolower = true;\n        }\n      }\n\n      return isScrolltolower;\n    },\n    /**\r\n        * 判断手机号\r\n        */\n    isPoneAvailable: function isPoneAvailable(str) {\n      var myreg = /^[1][3,4,5,7,8,9][0-9]{9}$/;\n      if (!myreg.test(str)) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    /**\r\n            * 获取时间（仿微信消息格式）\r\n            */\n    getHistoryTime: function getHistoryTime(time, SERVER_TIME) {\n      if (typeof time === 'string') {\n        time = time.replace(/\\-/g, '/');\n      }\n      var createTime = new Date(time);\n      var diff = SERVER_TIME - createTime;\n      if (diff <= 3000)\n      return '刚刚';else\n      if (diff <= 60 * 1000)\n      return \"1分钟内\";else\n      if (diff <= 1000 * 60 * 60)\n      return parseInt(diff / (60 * 1000)) + '分钟前';else\n      if (diff <= 1000 * 60 * 60)\n      return parseInt(diff / (1000 * 60 * 60)) + '小时前';else\n      if (diff <= 1000 * 60 * 60 * 12 * 2) {\n        var list = createTime.toString().split(\" \");\n        var lastIndex = list[4].lastIndexOf(\":\");\n        var realtime = list[4].toString().substring(0, lastIndex);\n        return realtime;\n      } else if (diff < 1000 * 60 * 60 * 24 * 1 * 7) {\n        if (diff < 1000 * 60 * 60 * 24 * 1) {\n          return parseInt(diff / (1000 * 60 * 60 * 12)) + '天前';\n        }\n        var t = createTime.toString().slice(0, 3);\n        switch (t) {\n          case \"Mon\":\n            return '星期一';\n          case \"Tue\":\n            return '星期二';\n          case \"Wed\":\n            return '星期三';\n          case \"Thu\":\n            return '星期四';\n          case \"Fri\":\n            return '星期五';\n          case \"Sat\":\n            return '星期六';\n          case \"Sun\":\n            return '星期日';}\n\n      } else if (diff < 1000 * 60 * 60 * 24 * 30 * 24) {\n        var list = createTime.toString().split(\" \");\n        var month = list[1];\n        var realtime = \"\";\n        if (diff < 1000 * 60 * 60 * 24 * 30) {\n          realtime += getNumberMonth(month);\n        } else {\n          realtime = list[3] + \"-\" + getNumberMonth(month);\n        }\n        return realtime + \"-\" + list[2];\n      }\n    } };\n\n})();var _default =\nUtils;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///565\n");

/***/ }),

/***/ 598:
/*!*******************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/utils/play.learn.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _course = __webpack_require__(/*! @/api/course */ 238);function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\nPlayerLearn = /*#__PURE__*/function () {\n  function PlayerLearn(params) {var _this = this;_classCallCheck(this, PlayerLearn);\n    this.init(params);\n    setInterval(function () {\n      if (_this.saveFlag) {\n        _this.time += 1;\n        if (_this.time >= 6) {\n          _this.save();\n          _this.time = 0;\n        }\n      }\n    }, 1000);\n  }_createClass(PlayerLearn, [{ key: \"init\", value: function init()\n    {var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.time = 0;\n      this.saveFlag = false;\n      this.params = params;\n      if (params.type == 2) {\n        this.currentTime = 1;\n        this.duration = 1;\n        this.save(1);\n      } else {\n        this.currentTime = 0;\n        this.duration = 0;\n      }\n    } }, { key: \"onplay\", value: function onplay(\n    e) {\n      this.saveFlag = true;\n    } }, { key: \"onpause\", value: function onpause()\n    {\n      this.saveFlag = false;\n      this.save(1);\n    } }, { key: \"ontimeupdate\", value: function ontimeupdate(\n    e) {\n      this.currentTime = Math.round(e.detail.currentTime);\n      this.duration = Math.round(e.detail.duration);\n      if (this.params.audition > 0 && this.currentTime >= this.params.audition) {\n        if (typeof this.params.onAuditionEnded === 'function') {\n          this.params.onAuditionEnded();\n        }\n      }\n    } }, { key: \"onended\", value: function onended()\n    {\n      this.saveFlag = false;\n      this.save(1);\n    } }, { key: \"save\", value: function save()\n    {var _this2 = this;var savetodb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.saveing) {\n        return;\n      }\n      this.saveing = true;\n      (0, _course.SaveLearnProgress)({\n        courseid: this.params.courseid,\n        pid: this.params.periodid,\n        costype: this.params.costype,\n        time: this.currentTime,\n        totaltime: this.duration,\n        savetodb: savetodb }).\n      then(function (msg) {\n        _this2.saveing = false;\n        if (typeof _this2.params.onSaveCallback === 'onSaveCallback') {\n          _this2.params.onSaveCallback(msg);\n        }\n      });\n    } }]);return PlayerLearn;}();var _default =\n\n\n\nPlayerLearn;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvcGxheS5sZWFybi5qcyJdLCJuYW1lcyI6WyJQbGF5ZXJMZWFybiIsInBhcmFtcyIsImluaXQiLCJzZXRJbnRlcnZhbCIsInNhdmVGbGFnIiwidGltZSIsInNhdmUiLCJ0eXBlIiwiY3VycmVudFRpbWUiLCJkdXJhdGlvbiIsImUiLCJNYXRoIiwicm91bmQiLCJkZXRhaWwiLCJhdWRpdGlvbiIsIm9uQXVkaXRpb25FbmRlZCIsInNhdmV0b2RiIiwic2F2ZWluZyIsImNvdXJzZWlkIiwicGlkIiwicGVyaW9kaWQiLCJjb3N0eXBlIiwidG90YWx0aW1lIiwidGhlbiIsIm1zZyIsIm9uU2F2ZUNhbGxiYWNrIl0sIm1hcHBpbmdzIjoidUZBQUEsMkQ7QUFDTUEsVztBQUNGLHVCQUFZQyxNQUFaLEVBQW1CO0FBQ2YsU0FBS0MsSUFBTCxDQUFVRCxNQUFWO0FBQ0FFLGVBQVcsQ0FBQyxZQUFJO0FBQ2QsVUFBRyxLQUFJLENBQUNDLFFBQVIsRUFBaUI7QUFDYixhQUFJLENBQUNDLElBQUwsSUFBYSxDQUFiO0FBQ0EsWUFBRyxLQUFJLENBQUNBLElBQUwsSUFBYSxDQUFoQixFQUFrQjtBQUNkLGVBQUksQ0FBQ0MsSUFBTDtBQUNBLGVBQUksQ0FBQ0QsSUFBTCxHQUFZLENBQVo7QUFDSDtBQUNKO0FBQ0osS0FSWSxFQVFYLElBUlcsQ0FBWDtBQVNILEc7QUFDZ0IsU0FBWkosTUFBWSx1RUFBSCxFQUFHO0FBQ2YsV0FBS0ksSUFBTCxHQUFZLENBQVo7QUFDQSxXQUFLRCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsV0FBS0gsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsVUFBR0EsTUFBTSxDQUFDTSxJQUFQLElBQWUsQ0FBbEIsRUFBb0I7QUFDbEIsYUFBS0MsV0FBTCxHQUFtQixDQUFuQjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQSxhQUFLSCxJQUFMLENBQVUsQ0FBVjtBQUNELE9BSkQsTUFJSztBQUNILGFBQUtFLFdBQUwsR0FBbUIsQ0FBbkI7QUFDQSxhQUFLQyxRQUFMLEdBQWdCLENBQWhCO0FBQ0Q7QUFDRixLO0FBQ01DLEssRUFBRTtBQUNMLFdBQUtOLFFBQUwsR0FBZ0IsSUFBaEI7QUFDSCxLO0FBQ1E7QUFDTCxXQUFLQSxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsV0FBS0UsSUFBTCxDQUFVLENBQVY7QUFDSCxLO0FBQ1lJLEssRUFBRTtBQUNiLFdBQUtGLFdBQUwsR0FBbUJHLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixDQUFDLENBQUNHLE1BQUYsQ0FBU0wsV0FBcEIsQ0FBbkI7QUFDQSxXQUFLQyxRQUFMLEdBQWdCRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsQ0FBQyxDQUFDRyxNQUFGLENBQVNKLFFBQXBCLENBQWhCO0FBQ0EsVUFBRyxLQUFLUixNQUFMLENBQVlhLFFBQVosR0FBdUIsQ0FBdkIsSUFBNEIsS0FBS04sV0FBTCxJQUFvQixLQUFLUCxNQUFMLENBQVlhLFFBQS9ELEVBQXdFO0FBQ3RFLFlBQUcsT0FBTyxLQUFLYixNQUFMLENBQVljLGVBQW5CLEtBQXVDLFVBQTFDLEVBQXFEO0FBQ25ELGVBQUtkLE1BQUwsQ0FBWWMsZUFBWjtBQUNEO0FBQ0Y7QUFDRixLO0FBQ1E7QUFDTCxXQUFLWCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsV0FBS0UsSUFBTCxDQUFVLENBQVY7QUFDSCxLO0FBQ2lCLDJCQUFiVSxRQUFhLHVFQUFGLENBQUU7QUFDaEIsVUFBRyxLQUFLQyxPQUFSLEVBQWdCO0FBQ2Q7QUFDRDtBQUNELFdBQUtBLE9BQUwsR0FBZSxJQUFmO0FBQ0EscUNBQWtCO0FBQ2hCQyxnQkFBUSxFQUFDLEtBQUtqQixNQUFMLENBQVlpQixRQURMO0FBRWhCQyxXQUFHLEVBQUMsS0FBS2xCLE1BQUwsQ0FBWW1CLFFBRkE7QUFHaEJDLGVBQU8sRUFBQyxLQUFLcEIsTUFBTCxDQUFZb0IsT0FISjtBQUloQmhCLFlBQUksRUFBQyxLQUFLRyxXQUpNO0FBS2hCYyxpQkFBUyxFQUFDLEtBQUtiLFFBTEM7QUFNaEJPLGdCQUFRLEVBQVJBLFFBTmdCLEVBQWxCO0FBT0dPLFVBUEgsQ0FPUSxVQUFDQyxHQUFELEVBQU87QUFDYixjQUFJLENBQUNQLE9BQUwsR0FBZSxLQUFmO0FBQ0EsWUFBRyxPQUFPLE1BQUksQ0FBQ2hCLE1BQUwsQ0FBWXdCLGNBQW5CLEtBQXNDLGdCQUF6QyxFQUEwRDtBQUN4RCxnQkFBSSxDQUFDeEIsTUFBTCxDQUFZd0IsY0FBWixDQUEyQkQsR0FBM0I7QUFDRDtBQUNGLE9BWkQ7QUFhRCxLOzs7O0FBSVV4QixXIiwiZmlsZSI6IjU5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2F2ZUxlYXJuUHJvZ3Jlc3N9IGZyb20gJ0AvYXBpL2NvdXJzZSdcbmNsYXNzIFBsYXllckxlYXJuIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpe1xuICAgICAgICB0aGlzLmluaXQocGFyYW1zKVxuICAgICAgICBzZXRJbnRlcnZhbCgoKT0+e1xuICAgICAgICAgIGlmKHRoaXMuc2F2ZUZsYWcpe1xuICAgICAgICAgICAgICB0aGlzLnRpbWUgKz0gMVxuICAgICAgICAgICAgICBpZih0aGlzLnRpbWUgPj0gNil7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKVxuICAgICAgICAgICAgICAgICAgdGhpcy50aW1lID0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfSwxMDAwKVxuICAgIH1cbiAgICBpbml0KHBhcmFtcyA9IHt9KXtcbiAgICAgIHRoaXMudGltZSA9IDBcbiAgICAgIHRoaXMuc2F2ZUZsYWcgPSBmYWxzZVxuICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXNcbiAgICAgIGlmKHBhcmFtcy50eXBlID09IDIpe1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMVxuICAgICAgICB0aGlzLmR1cmF0aW9uID0gMVxuICAgICAgICB0aGlzLnNhdmUoMSlcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMFxuICAgICAgICB0aGlzLmR1cmF0aW9uID0gMFxuICAgICAgfVxuICAgIH1cbiAgICBvbnBsYXkoZSl7XG4gICAgICAgIHRoaXMuc2F2ZUZsYWcgPSB0cnVlXG4gICAgfVxuICAgIG9ucGF1c2UoKXtcbiAgICAgICAgdGhpcy5zYXZlRmxhZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuc2F2ZSgxKVxuICAgIH1cbiAgICBvbnRpbWV1cGRhdGUoZSl7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lID0gTWF0aC5yb3VuZChlLmRldGFpbC5jdXJyZW50VGltZSlcbiAgICAgIHRoaXMuZHVyYXRpb24gPSBNYXRoLnJvdW5kKGUuZGV0YWlsLmR1cmF0aW9uKVxuICAgICAgaWYodGhpcy5wYXJhbXMuYXVkaXRpb24gPiAwICYmIHRoaXMuY3VycmVudFRpbWUgPj0gdGhpcy5wYXJhbXMuYXVkaXRpb24pe1xuICAgICAgICBpZih0eXBlb2YgdGhpcy5wYXJhbXMub25BdWRpdGlvbkVuZGVkID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICB0aGlzLnBhcmFtcy5vbkF1ZGl0aW9uRW5kZWQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG9uZW5kZWQoKXtcbiAgICAgICAgdGhpcy5zYXZlRmxhZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuc2F2ZSgxKVxuICAgIH1cbiAgICBzYXZlKHNhdmV0b2RiID0gMCl7XG4gICAgICBpZih0aGlzLnNhdmVpbmcpe1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZWluZyA9IHRydWVcbiAgICAgIFNhdmVMZWFyblByb2dyZXNzKHtcbiAgICAgICAgY291cnNlaWQ6dGhpcy5wYXJhbXMuY291cnNlaWQsXG4gICAgICAgIHBpZDp0aGlzLnBhcmFtcy5wZXJpb2RpZCxcbiAgICAgICAgY29zdHlwZTp0aGlzLnBhcmFtcy5jb3N0eXBlLFxuICAgICAgICB0aW1lOnRoaXMuY3VycmVudFRpbWUsXG4gICAgICAgIHRvdGFsdGltZTp0aGlzLmR1cmF0aW9uLFxuICAgICAgICBzYXZldG9kYlxuICAgICAgfSkudGhlbigobXNnKT0+e1xuICAgICAgICB0aGlzLnNhdmVpbmcgPSBmYWxzZVxuICAgICAgICBpZih0eXBlb2YgdGhpcy5wYXJhbXMub25TYXZlQ2FsbGJhY2sgPT09ICdvblNhdmVDYWxsYmFjaycpe1xuICAgICAgICAgIHRoaXMucGFyYW1zLm9uU2F2ZUNhbGxiYWNrKG1zZylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllckxlYXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///598\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_id\":\"@dcloudio/uni-stat@2.0.0-v3-24020191018001\",\"_inBundle\":false,\"_integrity\":\"sha512-nYBm5pRrYzrj2dKMqucWSF2PwInUMnn3MLHM/ik3gnLUEKSW61rzcY1RPlUwaH7c+Snm6N+bAJzmj3GvlrlVXA==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"^2.0.0-alpha-24420191128001\",\"saveSpec\":null,\"fetchSpec\":\"^2.0.0-alpha-24420191128001\"},\"_requiredBy\":[\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-v3-24020191018001.tgz\",\"_shasum\":\"6ef04326cc0b945726413eebe442ab8f47c7536c\",\"_spec\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"197e8df53cc9d4c3f6eb722b918ccf51672b5cfe\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-v3-24020191018001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!***************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/pages.json?{"type":"style"} ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/app/index\": { \"navigationBarTitleText\": \"引导页\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"titleNView\": false }, \"pages/index/index\": { \"navigationBarTitleText\": \"首页\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true, \"titleNView\": { \"type\": \"float\", \"searchInput\": { \"backgroundColor\": \"#f7f7f7\", \"borderRadius\": \"12px\", \"placeholder\": \"请输入搜索内容\", \"placeholderColor\": \"#888888\" } } }, \"pages/service/service\": { \"navigationBarTitleText\": \"在线客服\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/course/commentlist\": { \"navigationBarTitleText\": \"提问列表\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class/commentlist\": { \"navigationBarTitleText\": \"提问列表\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class/index\": { \"navigationBarTitleText\": \"班级列表\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/class-center/index\": { \"navigationBarTitleText\": \"课间\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/group/details\": { \"navigationBarTitleText\": \"小组详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/group/topicview\": { \"navigationBarTitleText\": \"话题详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/group/topic\": { \"navigationBarTitleText\": \"发表话题\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/ask/details\": { \"navigationBarTitleText\": \"问答详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/ask/question\": { \"navigationBarTitleText\": \"发布问题\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/class-center/photo/details\": { \"navigationBarTitleText\": \"作品详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/teacher/index\": { \"navigationBarTitleText\": \"名师\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/teacher/details\": { \"navigationBarTitleText\": \"\", \"navigationBarBackgroundColor\": \"#2987EE\", \"backgroundColor\": \"#ffffff\", \"navigationBarTextStyle\": \"white\" }, \"pages/teacher/evaluation\": { \"navigationBarTitleText\": \"写评价\", \"navigationBarBackgroundColor\": \"#2987EE\", \"navigationBarTextStyle\": \"white\", \"backgroundColor\": \"#ffffff\" }, \"pages/teacher/question\": { \"navigationBarTitleText\": \"留言\", \"navigationBarBackgroundColor\": \"#2987EE\", \"navigationBarTextStyle\": \"white\", \"enablePullDownRefresh\": true }, \"pages/learn-record/index\": { \"navigationBarTitleText\": \"学习记录\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/index\": { \"navigationBarTitleText\": \"我的\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/login/index\": { \"navigationBarTitleText\": \"登录\", \"navigationBarBackgroundColor\": \"#2987EE\", \"navigationBarTextStyle\": \"white\" }, \"pages/user/login/registercode\": { \"navigationBarTitleText\": \"注册账号\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/login/register\": { \"navigationBarTitleText\": \"注册账号\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/login/forgetcode\": { \"navigationBarTitleText\": \"忘记密码\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/login/repassword\": { \"navigationBarTitleText\": \"忘记密码\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/course/courselist\": { \"navigationBarTitleText\": \"课程列表\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"titleNView\": { \"buttons\": [{ \"fontSrc\": \"/static/iconfont/iconfont.ttf\", \"text\": \"\", \"fontSize\": \"16px\" }] }, \"enablePullDownRefresh\": true }, \"pages/course/search\": { \"navigationBarTitleText\": \"搜索内容\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/settings/index\": { \"navigationBarTitleText\": \"设置\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/settings/basicinfo\": { \"navigationBarTitleText\": \"个人资料\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/course/index\": { \"navigationBarTitleText\": \"我的课程\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/share/index\": { \"navigationBarTitleText\": \"推广邀约\" }, \"pages/user/settings/about\": { \"navigationBarTitleText\": \"关于我们\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/order/index\": { \"navigationBarTitleText\": \"我的订单\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/collect/index\": { \"navigationBarTitleText\": \"我的收藏\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/massage/index\": { \"navigationBarTitleText\": \"消息中心\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/vip/index\": { \"navigationBarTitleText\": \"升级vip\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/ask/index\": { \"navigationBarTitleText\": \"我的提问\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/coupon/index\": { \"navigationBarTitleText\": \"卡券包\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/coupon/redpackage\": { \"navigationBarTitleText\": \"我的红包\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/coupon/coupon\": { \"navigationBarTitleText\": \"我的优惠券\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/proposal/index\": { \"navigationBarTitleText\": \"举报/建议\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/login/modifypass\": { \"navigationBarTitleText\": \"修改密码\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/web/web\": { \"navigationBarTitleText\": \"\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/learn-record/exam\": { \"navigationBarTitleText\": \"学习考试\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/payment/payment\": { \"navigationBarTitleText\": \"订单支付\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/prompt/prompt\": { \"navigationBarTitleText\": \"提示\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/school/index\": { \"navigationBarTitleText\": \"机构列表\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/school/details\": { \"navigationBarTitleText\": \"机构详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/column/index\": { \"navigationBarTitleText\": \"我的专栏\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/local/index\": { \"titleNView\": { \"buttons\": [{ \"text\": \"管理\", \"fontSize\": \"16px\", \"width\": \"auto\" }] }, \"navigationBarTitleText\": \"离线缓存\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/local/download\": { \"titleNView\": { \"buttons\": [{ \"text\": \"缓存管理\", \"fontSize\": \"16px\", \"width\": \"auto\", \"color\": \"#5FBF82\" }] }, \"navigationBarTitleText\": \"选择缓存\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/local/player\": { \"navigationBarTitleText\": \"播放视频\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"titleNView\": false }, \"pages/user/local/courselist\": { \"navigationBarTitleText\": \"下载管理\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/user/card/index\": { \"navigationBarTitleText\": \"营销卡\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/card/detail\": { \"navigationBarTitleText\": \"营销卡详情\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/user/class/index\": { \"navigationBarTitleText\": \"我的班级\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/exam/index\": { \"navigationBarTitleText\": \"我的考试\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/select\": { \"navigationBarTitleText\": \"选择分类\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/practice\": { \"navigationBarTitleText\": \"练习中心\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/exambank\": { \"navigationBarTitleText\": \"套卷练习\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/exam/practicerecord\": { \"navigationBarTitleText\": \"练习记录\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/exam/examrecord\": { \"navigationBarTitleText\": \"考试记录\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/exam/errorbank\": { \"navigationBarTitleText\": \"错题练习\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/collectbank\": { \"navigationBarTitleText\": \"收藏练习\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/practicedaily\": { \"navigationBarTitleText\": \"每日一练\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"enablePullDownRefresh\": true }, \"pages/exam/paperinfo\": { \"navigationBarTitleText\": \"试卷介绍\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/testpage\": { \"navigationBarTitleText\": \"正在做题\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/result\": { \"navigationBarTitleText\": \"查看结果\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/ownscore\": { \"navigationBarTitleText\": \"自己评分\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/exam/analysis\": { \"navigationBarTitleText\": \"查看试卷解析\", \"navigationBarBackgroundColor\": \"#FFFFFF\" }, \"pages/course/courseplay\": { \"navigationBarTitleText\": \"课程播放\", \"navigationBarBackgroundColor\": \"#FFFFFF\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"uni-app\", \"navigationBarBackgroundColor\": \"#F0F4F7\", \"backgroundColor\": \"#F0F4F7\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 788:
/*!******************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/components/uni/uni-swipe-action/mpother.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  data: function data() {\n    return {\n      uniShow: false,\n      left: 0 };\n\n  },\n  computed: {\n    moveLeft: function moveLeft() {\n      return \"translateX(\".concat(this.left, \"px)\");\n    } },\n\n  watch: {\n    show: function show(newVal) {\n      if (this.autoClose) return;\n      if (newVal) {\n        this.$emit('change', true);\n        this.open();\n      } else {\n        this.$emit('change', false);\n        this.close();\n      }\n      uni.$emit('__uni__swipe__event', this);\n    } },\n\n  onReady: function onReady() {\n    this.init();\n    this.getSelectorQuery();\n  },\n  beforeDestoy: function beforeDestoy() {\n    uni.$off('__uni__swipe__event');\n  },\n  methods: {\n    init: function init() {var _this = this;\n      uni.$on('__uni__swipe__event', function (res) {\n        if (res !== _this && _this.autoClose) {\n          if (_this.left !== 0) {\n            _this.close();\n          }\n        }\n      });\n    },\n    onClick: function onClick(index, item) {\n      this.$emit('click', {\n        content: item,\n        index: index });\n\n    },\n    touchstart: function touchstart(e) {var\n\n      pageX =\n      e.touches[0].pageX;\n      if (this.disabled) return;\n      var left = this.position[0].left;\n      uni.$emit('__uni__swipe__event', this);\n      this.width = pageX - left;\n      if (this.isopen) return;\n      if (this.uniShow) {\n        this.uniShow = false;\n        this.isopen = true;\n        this.openleft = this.left + this.position[1].width;\n      }\n    },\n    touchmove: function touchmove(e, index) {\n      if (this.disabled) return;var\n\n      pageX =\n      e.touches[0].pageX;\n      this.setPosition(pageX);\n    },\n    touchend: function touchend() {\n      if (this.disabled) return;\n      if (this.isopen) {\n        this.move(this.openleft, 0);\n        return;\n      }\n      this.move(this.left, -40);\n    },\n    setPosition: function setPosition(x, y) {\n      if (!this.position[1].width) {\n        return;\n      }\n      // const width = this.position[0].width\n      this.left = x - this.width;\n      this.setValue(x - this.width);\n    },\n    setValue: function setValue(value) {\n      // 设置最大最小值\n      this.left = Math.max(-this.position[1].width, Math.min(parseInt(value), 0));\n      this.position[0].left = this.left;\n      if (this.isopen) {\n        this.openleft = this.left + this.position[1].width;\n      }\n    },\n    move: function move(left, value) {\n      if (left >= value) {\n        this.$emit('change', false);\n        this.close();\n      } else {\n        this.$emit('change', true);\n        this.open();\n      }\n    },\n    open: function open() {\n      this.uniShow = true;\n      this.left = -this.position[1].width;\n      this.setValue(-this.position[1].width);\n    },\n    close: function close() {var _this2 = this;\n      this.uniShow = true;\n      this.setValue(0);\n      setTimeout(function () {\n        _this2.uniShow = false;\n        _this2.isopen = false;\n      }, 200);\n    },\n    getSelectorQuery: function getSelectorQuery() {var _this3 = this;\n      var views = uni.createSelectorQuery().\n      in(this);\n      views.\n      selectAll('.selector-query-hock').\n      boundingClientRect(function (data) {\n        _this3.position = data;\n        if (_this3.autoClose) return;\n        if (_this3.show) {\n          _this3.open();\n        } else {\n          _this3.close();\n        }\n      }).\n      exec();\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///788\n");

/***/ }),

/***/ 789:
/*!*************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/components/uni/uni-swipe-action/mp.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  data: function data() {\n    return {\n      position: [],\n      button: [] };\n\n  },\n  computed: {\n    pos: function pos() {\n      return JSON.stringify(this.position);\n    },\n    btn: function btn() {\n      return JSON.stringify(this.button);\n    } },\n\n  watch: {\n    show: function show(newVal) {\n      if (this.autoClose) return;\n      var valueObj = this.position[0];\n      if (!valueObj) return;\n      valueObj.show = newVal;\n      this.$set(this.position, 0, valueObj);\n    } },\n\n\n\n\n\n\n\n\n\n  onReady: function onReady() {\n    this.init();\n    this.getSize();\n    this.getButtonSize();\n  },\n\n  methods: {\n    init: function init() {var _this = this;\n      uni.$on('__uni__swipe__event', function (res) {\n        if (res !== _this && _this.autoClose) {\n          var valueObj = _this.position[0];\n          valueObj.show = false;\n          _this.$set(_this.position, 0, valueObj);\n        }\n      });\n    },\n    openSwipe: function openSwipe() {\n      uni.$emit('__uni__swipe__event', this);\n    },\n    change: function change(e) {\n      this.$emit('change', e.open);\n      var valueObj = this.position[0];\n      valueObj.show = e.open;\n      this.$set(this.position, 0, valueObj);\n      // console.log('改变', e);\n    },\n    onClick: function onClick(index, item) {\n      this.$emit('click', {\n        content: item,\n        index: index });\n\n    },\n    getSize: function getSize() {var _this2 = this;\n      var views = uni.createSelectorQuery().in(this);\n      views.\n      selectAll('.selector-query-hock').\n      boundingClientRect(function (data) {\n        if (_this2.autoClose) {\n          data[0].show = false;\n        } else {\n          data[0].show = _this2.show;\n        }\n        _this2.position = data;\n      }).\n      exec();\n    },\n    getButtonSize: function getButtonSize() {var _this3 = this;\n      var views = uni.createSelectorQuery().in(this);\n      views.\n      selectAll('.button-hock').\n      boundingClientRect(function (data) {\n        _this3.button = data;\n      }).\n      exec();\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmkvdW5pLXN3aXBlLWFjdGlvbi9tcC5qcyJdLCJuYW1lcyI6WyJkYXRhIiwicG9zaXRpb24iLCJidXR0b24iLCJjb21wdXRlZCIsInBvcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJidG4iLCJ3YXRjaCIsInNob3ciLCJuZXdWYWwiLCJhdXRvQ2xvc2UiLCJ2YWx1ZU9iaiIsIiRzZXQiLCJvblJlYWR5IiwiaW5pdCIsImdldFNpemUiLCJnZXRCdXR0b25TaXplIiwibWV0aG9kcyIsInVuaSIsIiRvbiIsInJlcyIsIm9wZW5Td2lwZSIsIiRlbWl0IiwiY2hhbmdlIiwiZSIsIm9wZW4iLCJvbkNsaWNrIiwiaW5kZXgiLCJpdGVtIiwiY29udGVudCIsInZpZXdzIiwiY3JlYXRlU2VsZWN0b3JRdWVyeSIsImluIiwic2VsZWN0QWxsIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiZXhlYyJdLCJtYXBwaW5ncyI6ImlKQUFlO0FBQ2JBLE1BRGEsa0JBQ0w7QUFDTixXQUFPO0FBQ0xDLGNBQVEsRUFBRSxFQURMO0FBRUxDLFlBQU0sRUFBRSxFQUZILEVBQVA7O0FBSUQsR0FOWTtBQU9iQyxVQUFRLEVBQUU7QUFDUkMsT0FEUSxpQkFDRDtBQUNMLGFBQU9DLElBQUksQ0FBQ0MsU0FBTCxDQUFlLEtBQUtMLFFBQXBCLENBQVA7QUFDRCxLQUhPO0FBSVJNLE9BSlEsaUJBSUQ7QUFDTCxhQUFPRixJQUFJLENBQUNDLFNBQUwsQ0FBZSxLQUFLSixNQUFwQixDQUFQO0FBQ0QsS0FOTyxFQVBHOztBQWViTSxPQUFLLEVBQUU7QUFDTEMsUUFESyxnQkFDQ0MsTUFERCxFQUNTO0FBQ1osVUFBSSxLQUFLQyxTQUFULEVBQW9CO0FBQ3BCLFVBQUlDLFFBQVEsR0FBRyxLQUFLWCxRQUFMLENBQWMsQ0FBZCxDQUFmO0FBQ0EsVUFBSSxDQUFDVyxRQUFMLEVBQWU7QUFDZkEsY0FBUSxDQUFDSCxJQUFULEdBQWdCQyxNQUFoQjtBQUNBLFdBQUtHLElBQUwsQ0FBVSxLQUFLWixRQUFmLEVBQXlCLENBQXpCLEVBQTRCVyxRQUE1QjtBQUNELEtBUEksRUFmTTs7Ozs7Ozs7OztBQWdDYkUsU0FoQ2EscUJBZ0NGO0FBQ1QsU0FBS0MsSUFBTDtBQUNBLFNBQUtDLE9BQUw7QUFDQSxTQUFLQyxhQUFMO0FBQ0QsR0FwQ1k7O0FBc0NiQyxTQUFPLEVBQUU7QUFDUEgsUUFETyxrQkFDQztBQUNOSSxTQUFHLENBQUNDLEdBQUosQ0FBUSxxQkFBUixFQUErQixVQUFDQyxHQUFELEVBQVM7QUFDdEMsWUFBSUEsR0FBRyxLQUFLLEtBQVIsSUFBZ0IsS0FBSSxDQUFDVixTQUF6QixFQUFvQztBQUNsQyxjQUFJQyxRQUFRLEdBQUcsS0FBSSxDQUFDWCxRQUFMLENBQWMsQ0FBZCxDQUFmO0FBQ0FXLGtCQUFRLENBQUNILElBQVQsR0FBZ0IsS0FBaEI7QUFDQSxlQUFJLENBQUNJLElBQUwsQ0FBVSxLQUFJLENBQUNaLFFBQWYsRUFBeUIsQ0FBekIsRUFBNEJXLFFBQTVCO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0FUTTtBQVVQVSxhQVZPLHVCQVVNO0FBQ1hILFNBQUcsQ0FBQ0ksS0FBSixDQUFVLHFCQUFWLEVBQWlDLElBQWpDO0FBQ0QsS0FaTTtBQWFQQyxVQWJPLGtCQWFDQyxDQWJELEVBYUk7QUFDVCxXQUFLRixLQUFMLENBQVcsUUFBWCxFQUFxQkUsQ0FBQyxDQUFDQyxJQUF2QjtBQUNBLFVBQUlkLFFBQVEsR0FBRyxLQUFLWCxRQUFMLENBQWMsQ0FBZCxDQUFmO0FBQ0FXLGNBQVEsQ0FBQ0gsSUFBVCxHQUFnQmdCLENBQUMsQ0FBQ0MsSUFBbEI7QUFDQSxXQUFLYixJQUFMLENBQVUsS0FBS1osUUFBZixFQUF5QixDQUF6QixFQUE0QlcsUUFBNUI7QUFDQTtBQUNELEtBbkJNO0FBb0JQZSxXQXBCTyxtQkFvQkVDLEtBcEJGLEVBb0JTQyxJQXBCVCxFQW9CZTtBQUNwQixXQUFLTixLQUFMLENBQVcsT0FBWCxFQUFvQjtBQUNsQk8sZUFBTyxFQUFFRCxJQURTO0FBRWxCRCxhQUFLLEVBQUxBLEtBRmtCLEVBQXBCOztBQUlELEtBekJNO0FBMEJQWixXQTFCTyxxQkEwQkk7QUFDVCxVQUFNZSxLQUFLLEdBQUdaLEdBQUcsQ0FBQ2EsbUJBQUosR0FBMEJDLEVBQTFCLENBQTZCLElBQTdCLENBQWQ7QUFDQUYsV0FBSztBQUNGRyxlQURILENBQ2Esc0JBRGI7QUFFR0Msd0JBRkgsQ0FFc0IsVUFBQW5DLElBQUksRUFBSTtBQUMxQixZQUFJLE1BQUksQ0FBQ1csU0FBVCxFQUFvQjtBQUNsQlgsY0FBSSxDQUFDLENBQUQsQ0FBSixDQUFRUyxJQUFSLEdBQWUsS0FBZjtBQUNELFNBRkQsTUFFTztBQUNMVCxjQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFTLElBQVIsR0FBZSxNQUFJLENBQUNBLElBQXBCO0FBQ0Q7QUFDRCxjQUFJLENBQUNSLFFBQUwsR0FBZ0JELElBQWhCO0FBQ0QsT0FUSDtBQVVHb0MsVUFWSDtBQVdELEtBdkNNO0FBd0NQbkIsaUJBeENPLDJCQXdDVTtBQUNmLFVBQU1jLEtBQUssR0FBR1osR0FBRyxDQUFDYSxtQkFBSixHQUEwQkMsRUFBMUIsQ0FBNkIsSUFBN0IsQ0FBZDtBQUNBRixXQUFLO0FBQ0ZHLGVBREgsQ0FDYSxjQURiO0FBRUdDLHdCQUZILENBRXNCLFVBQUFuQyxJQUFJLEVBQUk7QUFDMUIsY0FBSSxDQUFDRSxNQUFMLEdBQWNGLElBQWQ7QUFDRCxPQUpIO0FBS0dvQyxVQUxIO0FBTUQsS0FoRE0sRUF0Q0ksRSIsImZpbGUiOiI3ODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XHJcbiAgZGF0YSAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwb3NpdGlvbjogW10sXHJcbiAgICAgIGJ1dHRvbjogW11cclxuICAgIH1cclxuICB9LFxyXG4gIGNvbXB1dGVkOiB7XHJcbiAgICBwb3MgKCkge1xyXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5wb3NpdGlvbilcclxuICAgIH0sXHJcbiAgICBidG4gKCkge1xyXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5idXR0b24pXHJcbiAgICB9XHJcbiAgfSxcclxuICB3YXRjaDoge1xyXG4gICAgc2hvdyAobmV3VmFsKSB7XHJcbiAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkgcmV0dXJuXHJcbiAgICAgIGxldCB2YWx1ZU9iaiA9IHRoaXMucG9zaXRpb25bMF1cclxuICAgICAgaWYgKCF2YWx1ZU9iaikgcmV0dXJuXHJcbiAgICAgIHZhbHVlT2JqLnNob3cgPSBuZXdWYWxcclxuICAgICAgdGhpcy4kc2V0KHRoaXMucG9zaXRpb24sIDAsIHZhbHVlT2JqKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICBvblJlYWR5ICgpIHtcclxuICAgIHRoaXMuaW5pdCgpXHJcbiAgICB0aGlzLmdldFNpemUoKVxyXG4gICAgdGhpcy5nZXRCdXR0b25TaXplKClcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBpbml0ICgpIHtcclxuICAgICAgdW5pLiRvbignX191bmlfX3N3aXBlX19ldmVudCcsIChyZXMpID0+IHtcclxuICAgICAgICBpZiAocmVzICE9PSB0aGlzICYmIHRoaXMuYXV0b0Nsb3NlKSB7XHJcbiAgICAgICAgICBsZXQgdmFsdWVPYmogPSB0aGlzLnBvc2l0aW9uWzBdXHJcbiAgICAgICAgICB2YWx1ZU9iai5zaG93ID0gZmFsc2VcclxuICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnBvc2l0aW9uLCAwLCB2YWx1ZU9iailcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgb3BlblN3aXBlICgpIHtcclxuICAgICAgdW5pLiRlbWl0KCdfX3VuaV9fc3dpcGVfX2V2ZW50JywgdGhpcylcclxuICAgIH0sXHJcbiAgICBjaGFuZ2UgKGUpIHtcclxuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgZS5vcGVuKVxyXG4gICAgICBsZXQgdmFsdWVPYmogPSB0aGlzLnBvc2l0aW9uWzBdXHJcbiAgICAgIHZhbHVlT2JqLnNob3cgPSBlLm9wZW5cclxuICAgICAgdGhpcy4kc2V0KHRoaXMucG9zaXRpb24sIDAsIHZhbHVlT2JqKVxyXG4gICAgICAvLyBjb25zb2xlLmxvZygn5pS55Y+YJywgZSk7XHJcbiAgICB9LFxyXG4gICAgb25DbGljayAoaW5kZXgsIGl0ZW0pIHtcclxuICAgICAgdGhpcy4kZW1pdCgnY2xpY2snLCB7XHJcbiAgICAgICAgY29udGVudDogaXRlbSxcclxuICAgICAgICBpbmRleFxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuICAgIGdldFNpemUgKCkge1xyXG4gICAgICBjb25zdCB2aWV3cyA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KCkuaW4odGhpcylcclxuICAgICAgdmlld3NcclxuICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0b3ItcXVlcnktaG9jaycpXHJcbiAgICAgICAgLmJvdW5kaW5nQ2xpZW50UmVjdChkYXRhID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkge1xyXG4gICAgICAgICAgICBkYXRhWzBdLnNob3cgPSBmYWxzZVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGF0YVswXS5zaG93ID0gdGhpcy5zaG93XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZGF0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmV4ZWMoKVxyXG4gICAgfSxcclxuICAgIGdldEJ1dHRvblNpemUgKCkge1xyXG4gICAgICBjb25zdCB2aWV3cyA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KCkuaW4odGhpcylcclxuICAgICAgdmlld3NcclxuICAgICAgICAuc2VsZWN0QWxsKCcuYnV0dG9uLWhvY2snKVxyXG4gICAgICAgIC5ib3VuZGluZ0NsaWVudFJlY3QoZGF0YSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmJ1dHRvbiA9IGRhdGFcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5leGVjKClcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///789\n");

/***/ }),

/***/ 8:
/*!**************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/pages.json?{"type":"stat"} ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__C0290ED\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19DMDI5MEVEXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 82:
/*!**********************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/app.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.CheckOrder = CheckOrder;exports.GetAppOtherConf = GetAppOtherConf;\nvar _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n/*订单状态查询*/\nfunction CheckOrder(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/CheckOrder', params, ['appToken', 'userId']);\n}\n\n/**\r\n   * 获取app其他配置\r\n   */\nvar AppConf = null;\nfunction GetAppOtherConf() {\n  return new Promise(function (resolve) {\n    if (AppConf) {\n      resolve(AppConf);\n    } else {\n      (0, _mainEntrance.GET)('/config/app/config.txt').then(function (res) {\n        if (typeof res === 'object') {\n          AppConf = res;\n        } else {\n          AppConf = {};\n        }\n        resolve(AppConf);\n      }).catch(function (err) {\n        resolve({});\n      });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL2FwcC5qcyJdLCJuYW1lcyI6WyJDaGVja09yZGVyIiwicGFyYW1zIiwiQXBwQ29uZiIsIkdldEFwcE90aGVyQ29uZiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJlcyIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiO0FBQ0E7O0FBRUE7QUFDTyxTQUFTQSxVQUFULENBQW9CQyxNQUFwQixFQUE0QjtBQUNsQyxTQUFPLHdCQUFLLHdCQUFMLEVBQThCQSxNQUE5QixFQUFxQyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQXJDLENBQVA7QUFDQTs7QUFFRDs7O0FBR0EsSUFBSUMsT0FBTyxHQUFHLElBQWQ7QUFDTyxTQUFTQyxlQUFULEdBQTBCO0FBQ2hDLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUFDLE9BQU8sRUFBRTtBQUMzQixRQUFHSCxPQUFILEVBQVc7QUFDVkcsYUFBTyxDQUFDSCxPQUFELENBQVA7QUFDQSxLQUZELE1BRUs7QUFDSiw2QkFBSSx3QkFBSixFQUE4QkksSUFBOUIsQ0FBbUMsVUFBQUMsR0FBRyxFQUFFO0FBQ3ZDLFlBQUcsT0FBT0EsR0FBUCxLQUFlLFFBQWxCLEVBQTJCO0FBQzFCTCxpQkFBTyxHQUFHSyxHQUFWO0FBQ0EsU0FGRCxNQUVLO0FBQ0pMLGlCQUFPLEdBQUcsRUFBVjtBQUNBO0FBQ0RHLGVBQU8sQ0FBQ0gsT0FBRCxDQUFQO0FBQ0EsT0FQRCxFQU9HTSxLQVBILENBT1MsVUFBQUMsR0FBRyxFQUFFO0FBQ2JKLGVBQU8sQ0FBQyxFQUFELENBQVA7QUFDQSxPQVREO0FBVUE7QUFDRCxHQWZNLENBQVA7QUFnQkEiLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHtHRVQsUE9TVH0gZnJvbSAnLi9tYWluLmVudHJhbmNlLmpzJ1xyXG5cclxuLyrorqLljZXnirbmgIHmn6Xor6IqL1xyXG5leHBvcnQgZnVuY3Rpb24gQ2hlY2tPcmRlcihwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9hcHAvQ2hlY2tPcmRlcicscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOiOt+WPlmFwcOWFtuS7lumFjee9rlxyXG4gKi9cclxudmFyIEFwcENvbmYgPSBudWxsXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRBcHBPdGhlckNvbmYoKXtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZT0+e1xyXG5cdFx0aWYoQXBwQ29uZil7XHJcblx0XHRcdHJlc29sdmUoQXBwQ29uZilcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRHRVQoJy9jb25maWcvYXBwL2NvbmZpZy50eHQnKS50aGVuKHJlcz0+e1xyXG5cdFx0XHRcdGlmKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKXtcclxuXHRcdFx0XHRcdEFwcENvbmYgPSByZXNcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdEFwcENvbmYgPSB7fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXNvbHZlKEFwcENvbmYpXHJcblx0XHRcdH0pLmNhdGNoKGVycj0+e1xyXG5cdFx0XHRcdHJlc29sdmUoe30pXHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblx0fSlcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///82\n");

/***/ }),

/***/ 83:
/*!*******************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/api/class-center.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.GetDataList = GetDataList;exports.GetWorksView = GetWorksView;exports.GetInfoView = GetInfoView;exports.GetAskView = GetAskView;exports.ReplyAskTopic = ReplyAskTopic;exports.CloseAsk = CloseAsk;exports.AddReward = AddReward;exports.SetAskSatisfied = SetAskSatisfied;exports.DeleteAnswer = DeleteAnswer;exports.PublishAskTopic = PublishAskTopic;exports.GetGroupListView = GetGroupListView;exports.JoinGroup = JoinGroup;exports.PublishTopic = PublishTopic;exports.ReplyTopic = ReplyTopic;exports.GetTopicView = GetTopicView;exports.GetAskClass = GetAskClass;exports.GetAllClassList = GetAllClassList;var _mainEntrance = __webpack_require__(/*! ./main.entrance.js */ 19);\n\n\n\n// 课间列表\nfunction GetDataList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/home', params);\n}\n// 作品详情页\nfunction GetWorksView(params) {\n  return (0, _mainEntrance.GET)('/webapi/APP/GetWorksView', params);\n}\n// 资讯详情页\nfunction GetInfoView(params) {\n  return (0, _mainEntrance.GET)('/webapi/APP/GetInfoView', params);\n}\n// 问答详情页\nfunction GetAskView(params) {\n  return (0, _mainEntrance.GET)('/webapi/APP/GetAskView', params, ['appToken', 'userId']);\n}\n\n// 回复问答\nfunction ReplyAskTopic(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/ReplyAskTopic', params, ['appToken', 'userId']);\n}\n\n// 关闭问题\nfunction CloseAsk(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/CloseAsk', params, ['appToken', 'userId']);\n}\n\n// 增加悬赏分接口\nfunction AddReward(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/AddReward', params, ['appToken', 'userId']);\n}\n\n// 设置回答为最佳答案\nfunction SetAskSatisfied(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/SetAskSatisfied', params, ['appToken', 'userId']);\n}\n\n// 删除回复\nfunction DeleteAnswer(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/DeleteAnswer', params, ['appToken', 'userId']);\n}\n\n// 发布问题\nfunction PublishAskTopic(params) {\n  return (0, _mainEntrance.POST)('/webapi/APP/PublishAskTopic', params, ['appToken', 'userId']);\n}\n\n// 小组详情\nfunction GetGroupListView(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetGroupListView', params, ['appToken', 'userId']);\n}\n\n// 申请加入小组\nfunction JoinGroup(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/JoinGroup', params, ['appToken', 'userId']);\n}\n\n// 发表话题\nfunction PublishTopic(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/PublishTopic', params, ['appToken', 'userId']);\n}\n\n// 回复话题\nfunction ReplyTopic(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/ReplyTopic', params, ['appToken', 'userId']);\n}\n\n// 话题详情\nfunction GetTopicView(params) {\n  return (0, _mainEntrance.POST)('/webapi/app/GetTopicView', params, ['appToken', 'userId']);\n}\n\n// 话题详情\nfunction GetAskClass(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetAskClass', params, ['appToken', 'userId']);\n}\n\n// 班级列表\nfunction GetAllClassList(params) {\n  return (0, _mainEntrance.GET)('/webapi/app/GetAllClassList', params);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXBpL2NsYXNzLWNlbnRlci5qcyJdLCJuYW1lcyI6WyJHZXREYXRhTGlzdCIsInBhcmFtcyIsIkdldFdvcmtzVmlldyIsIkdldEluZm9WaWV3IiwiR2V0QXNrVmlldyIsIlJlcGx5QXNrVG9waWMiLCJDbG9zZUFzayIsIkFkZFJld2FyZCIsIlNldEFza1NhdGlzZmllZCIsIkRlbGV0ZUFuc3dlciIsIlB1Ymxpc2hBc2tUb3BpYyIsIkdldEdyb3VwTGlzdFZpZXciLCJKb2luR3JvdXAiLCJQdWJsaXNoVG9waWMiLCJSZXBseVRvcGljIiwiR2V0VG9waWNWaWV3IiwiR2V0QXNrQ2xhc3MiLCJHZXRBbGxDbGFzc0xpc3QiXSwibWFwcGluZ3MiOiI0cEJBQUE7Ozs7QUFJQTtBQUNPLFNBQVNBLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCO0FBQ25DLFNBQU8sdUJBQUksa0JBQUosRUFBdUJBLE1BQXZCLENBQVA7QUFDQTtBQUNEO0FBQ08sU0FBU0MsWUFBVCxDQUFzQkQsTUFBdEIsRUFBOEI7QUFDcEMsU0FBTyx1QkFBSSwwQkFBSixFQUErQkEsTUFBL0IsQ0FBUDtBQUNBO0FBQ0Q7QUFDTyxTQUFTRSxXQUFULENBQXFCRixNQUFyQixFQUE2QjtBQUNuQyxTQUFPLHVCQUFJLHlCQUFKLEVBQThCQSxNQUE5QixDQUFQO0FBQ0E7QUFDRDtBQUNPLFNBQVNHLFVBQVQsQ0FBb0JILE1BQXBCLEVBQTRCO0FBQ2xDLFNBQU8sdUJBQUksd0JBQUosRUFBNkJBLE1BQTdCLEVBQW9DLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBcEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU0ksYUFBVCxDQUF1QkosTUFBdkIsRUFBK0I7QUFDckMsU0FBTyx3QkFBSywyQkFBTCxFQUFpQ0EsTUFBakMsRUFBd0MsQ0FBQyxVQUFELEVBQVksUUFBWixDQUF4QyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTSyxRQUFULENBQWtCTCxNQUFsQixFQUEwQjtBQUNoQyxTQUFPLHdCQUFLLHNCQUFMLEVBQTRCQSxNQUE1QixFQUFtQyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQW5DLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNNLFNBQVQsQ0FBbUJOLE1BQW5CLEVBQTJCO0FBQ2pDLFNBQU8sd0JBQUssdUJBQUwsRUFBNkJBLE1BQTdCLEVBQW9DLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBcEMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU08sZUFBVCxDQUF5QlAsTUFBekIsRUFBaUM7QUFDdkMsU0FBTyx3QkFBSyw2QkFBTCxFQUFtQ0EsTUFBbkMsRUFBMEMsQ0FBQyxVQUFELEVBQVksUUFBWixDQUExQyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTUSxZQUFULENBQXNCUixNQUF0QixFQUE4QjtBQUNwQyxTQUFPLHdCQUFLLDBCQUFMLEVBQWdDQSxNQUFoQyxFQUF1QyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQXZDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNTLGVBQVQsQ0FBeUJULE1BQXpCLEVBQWlDO0FBQ3ZDLFNBQU8sd0JBQUssNkJBQUwsRUFBbUNBLE1BQW5DLEVBQTBDLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBMUMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU1UsZ0JBQVQsQ0FBMEJWLE1BQTFCLEVBQWtDO0FBQ3hDLFNBQU8sdUJBQUksOEJBQUosRUFBbUNBLE1BQW5DLEVBQTBDLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBMUMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU1csU0FBVCxDQUFtQlgsTUFBbkIsRUFBMkI7QUFDakMsU0FBTyx3QkFBSyx1QkFBTCxFQUE2QkEsTUFBN0IsRUFBb0MsQ0FBQyxVQUFELEVBQVksUUFBWixDQUFwQyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTWSxZQUFULENBQXNCWixNQUF0QixFQUE4QjtBQUNwQyxTQUFPLHdCQUFLLDBCQUFMLEVBQWdDQSxNQUFoQyxFQUF1QyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQXZDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNhLFVBQVQsQ0FBb0JiLE1BQXBCLEVBQTRCO0FBQ2xDLFNBQU8sd0JBQUssd0JBQUwsRUFBOEJBLE1BQTlCLEVBQXFDLENBQUMsVUFBRCxFQUFZLFFBQVosQ0FBckMsQ0FBUDtBQUNBOztBQUVEO0FBQ08sU0FBU2MsWUFBVCxDQUFzQmQsTUFBdEIsRUFBOEI7QUFDcEMsU0FBTyx3QkFBSywwQkFBTCxFQUFnQ0EsTUFBaEMsRUFBdUMsQ0FBQyxVQUFELEVBQVksUUFBWixDQUF2QyxDQUFQO0FBQ0E7O0FBRUQ7QUFDTyxTQUFTZSxXQUFULENBQXFCZixNQUFyQixFQUE2QjtBQUNuQyxTQUFPLHVCQUFJLHlCQUFKLEVBQThCQSxNQUE5QixFQUFxQyxDQUFDLFVBQUQsRUFBWSxRQUFaLENBQXJDLENBQVA7QUFDQTs7QUFFRDtBQUNPLFNBQVNnQixlQUFULENBQXlCaEIsTUFBekIsRUFBaUM7QUFDdkMsU0FBTyx1QkFBSSw2QkFBSixFQUFrQ0EsTUFBbEMsQ0FBUDtBQUNBIiwiZmlsZSI6IjgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuXHRHRVQsUE9TVFxyXG59IGZyb20gJy4vbWFpbi5lbnRyYW5jZS5qcydcclxuXHJcbi8vIOivvumXtOWIl+ihqFxyXG5leHBvcnQgZnVuY3Rpb24gR2V0RGF0YUxpc3QocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvaG9tZScscGFyYW1zKVx0XHJcbn1cclxuLy8g5L2c5ZOB6K+m5oOF6aG1XHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRXb3Jrc1ZpZXcocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9BUFAvR2V0V29ya3NWaWV3JyxwYXJhbXMpXHRcclxufVxyXG4vLyDotYTorq/or6bmg4XpobVcclxuZXhwb3J0IGZ1bmN0aW9uIEdldEluZm9WaWV3KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvQVBQL0dldEluZm9WaWV3JyxwYXJhbXMpXHJcbn1cclxuLy8g6Zeu562U6K+m5oOF6aG1XHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRBc2tWaWV3KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvQVBQL0dldEFza1ZpZXcnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOWbnuWkjemXruetlFxyXG5leHBvcnQgZnVuY3Rpb24gUmVwbHlBc2tUb3BpYyhwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9BUFAvUmVwbHlBc2tUb3BpYycscGFyYW1zLFsnYXBwVG9rZW4nLCd1c2VySWQnXSlcclxufVxyXG5cclxuLy8g5YWz6Zet6Zeu6aKYXHJcbmV4cG9ydCBmdW5jdGlvbiBDbG9zZUFzayhwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9BUFAvQ2xvc2VBc2snLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOWinuWKoOaCrOi1j+WIhuaOpeWPo1xyXG5leHBvcnQgZnVuY3Rpb24gQWRkUmV3YXJkKHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL0FQUC9BZGRSZXdhcmQnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOiuvue9ruWbnuetlOS4uuacgOS9s+etlOahiFxyXG5leHBvcnQgZnVuY3Rpb24gU2V0QXNrU2F0aXNmaWVkKHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL0FQUC9TZXRBc2tTYXRpc2ZpZWQnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOWIoOmZpOWbnuWkjVxyXG5leHBvcnQgZnVuY3Rpb24gRGVsZXRlQW5zd2VyKHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL0FQUC9EZWxldGVBbnN3ZXInLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOWPkeW4g+mXrumimFxyXG5leHBvcnQgZnVuY3Rpb24gUHVibGlzaEFza1RvcGljKHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL0FQUC9QdWJsaXNoQXNrVG9waWMnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOWwj+e7hOivpuaDhVxyXG5leHBvcnQgZnVuY3Rpb24gR2V0R3JvdXBMaXN0VmlldyhwYXJhbXMpIHtcclxuXHRyZXR1cm4gR0VUKCcvd2ViYXBpL2FwcC9HZXRHcm91cExpc3RWaWV3JyxwYXJhbXMsWydhcHBUb2tlbicsJ3VzZXJJZCddKVxyXG59XHJcblxyXG4vLyDnlLPor7fliqDlhaXlsI/nu4RcclxuZXhwb3J0IGZ1bmN0aW9uIEpvaW5Hcm91cChwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9hcHAvSm9pbkdyb3VwJyxwYXJhbXMsWydhcHBUb2tlbicsJ3VzZXJJZCddKVxyXG59XHJcblxyXG4vLyDlj5Hooajor53pophcclxuZXhwb3J0IGZ1bmN0aW9uIFB1Ymxpc2hUb3BpYyhwYXJhbXMpIHtcclxuXHRyZXR1cm4gUE9TVCgnL3dlYmFwaS9hcHAvUHVibGlzaFRvcGljJyxwYXJhbXMsWydhcHBUb2tlbicsJ3VzZXJJZCddKVxyXG59XHJcblxyXG4vLyDlm57lpI3or53pophcclxuZXhwb3J0IGZ1bmN0aW9uIFJlcGx5VG9waWMocGFyYW1zKSB7XHJcblx0cmV0dXJuIFBPU1QoJy93ZWJhcGkvYXBwL1JlcGx5VG9waWMnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOivnemimOivpuaDhVxyXG5leHBvcnQgZnVuY3Rpb24gR2V0VG9waWNWaWV3KHBhcmFtcykge1xyXG5cdHJldHVybiBQT1NUKCcvd2ViYXBpL2FwcC9HZXRUb3BpY1ZpZXcnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOivnemimOivpuaDhVxyXG5leHBvcnQgZnVuY3Rpb24gR2V0QXNrQ2xhc3MocGFyYW1zKSB7XHJcblx0cmV0dXJuIEdFVCgnL3dlYmFwaS9hcHAvR2V0QXNrQ2xhc3MnLHBhcmFtcyxbJ2FwcFRva2VuJywndXNlcklkJ10pXHJcbn1cclxuXHJcbi8vIOePree6p+WIl+ihqFxyXG5leHBvcnQgZnVuY3Rpb24gR2V0QWxsQ2xhc3NMaXN0KHBhcmFtcykge1xyXG5cdHJldHVybiBHRVQoJy93ZWJhcGkvYXBwL0dldEFsbENsYXNzTGlzdCcscGFyYW1zKVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n");

/***/ }),

/***/ 834:
/*!************************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/components/ks-components/ucharts/u-charts.min.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {var config = { yAxisWidth: 15, yAxisSplit: 5, xAxisHeight: 15, xAxisLineHeight: 15, legendHeight: 15, yAxisTitleWidth: 15, padding: [10, 10, 10, 10], pixelRatio: 1, rotate: !1, columePadding: 3, fontSize: 13, dataPointShape: [\"circle\", \"circle\", \"circle\", \"circle\"], colors: [\"#1890ff\", \"#2fc25b\", \"#facc14\", \"#f04864\", \"#8543e0\", \"#90ed7d\"], pieChartLinePadding: 15, pieChartTextPadding: 5, xAxisTextPadding: 3, titleColor: \"#333333\", titleFontSize: 20, subtitleColor: \"#999999\", subtitleFontSize: 15, toolTipPadding: 3, toolTipBackground: \"#000000\", toolTipOpacity: .7, toolTipLineHeight: 20, radarLabelTextMargin: 15, gaugeLabelTextMargin: 15 };var assign = function assign(e) {for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {t[_key - 1] = arguments[_key];}function i(e, t) {for (var a in t) {e[a] = e[a] && \"[object Object]\" === e[a].toString() ? i(e[a], t[a]) : e[a] = t[a];}return e;}if (null == e) throw new TypeError(\"Cannot convert undefined or null to object\");return !t || 0 >= t.length ? e : (t.forEach(function (t) {e = i(e, t);}), e);};var util = { toFixed: function toFixed(e, t) {return t = t || 2, this.isFloat(e) && (e = e.toFixed(t)), e;}, isFloat: function isFloat(e) {return 0 != e % 1;}, approximatelyEqual: function approximatelyEqual(e, t) {return 1e-10 > Math.abs(e - t);}, isSameSign: function isSameSign(e, t) {var i = Math.abs;return i(e) === e && i(t) === t || i(e) !== e && i(t) !== t;}, isSameXCoordinateArea: function isSameXCoordinateArea(e, t) {return this.isSameSign(e.x, t.x);}, isCollision: function isCollision(e, t) {e.end = {}, e.end.x = e.start.x + e.width, e.end.y = e.start.y - e.height, t.end = {}, t.end.x = t.start.x + t.width, t.end.y = t.start.y - t.height;var i = t.start.x > e.end.x || t.end.x < e.start.x || t.end.y > e.start.y || t.start.y < e.end.y;return !i;} };function getH5Offset(t) {return t.mp = { changedTouches: [] }, t.mp.changedTouches.push({ x: t.offsetX, y: t.offsetY }), t;}function hexToRgb(e, t) {var i = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,a = e.replace(i, function (e, t, i, a) {return t + t + i + i + a + a;}),o = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(a),n = parseInt(o[1], 16),l = parseInt(o[2], 16),r = parseInt(o[3], 16);return \"rgba(\" + n + \",\" + l + \",\" + r + \",\" + t + \")\";}function findRange(e, t, i) {if (isNaN(e)) throw new Error(\"[uCharts] unvalid series data!\");i = i || 10, t = t ? t : \"upper\";for (var a = 1; 1 > i;) {i *= 10, a *= 10;}for (e = \"upper\" === t ? Math.ceil(e * a) : Math.floor(e * a); 0 != e % i;) {\"upper\" === t ? e++ : e--;}return e / a;}function calCandleMA(e, t, i, a) {var o = [];for (var n, l = 0; l < e.length; l++) {n = { data: [], name: t[l], color: i[l] };for (var _t = 0, _i = a.length; _t < _i; _t++) {if (_t < e[l]) {n.data.push(null);continue;}var _i2 = 0;for (var _o = 0; _o < e[l]; _o++) {_i2 += a[_t - _o][1];}n.data.push(+(_i2 / e[l]).toFixed(3));}o.push(n);}return o;}function calValidDistance(e, t, i, a, o) {var n = o.width - o.area[1] - o.area[3],l = i.eachSpacing * (o.chartData.xAxisData.xAxisPoints.length - 1),r = t;return 0 <= t ? (r = 0, e.event.trigger(\"scrollLeft\")) : Math.abs(t) >= l - n && (r = n - l, e.event.trigger(\"scrollRight\")), r;}function isInAngleRange(e, t, i) {function a(e) {for (; 0 > e;) {e += 2 * o;}for (; e > 2 * o;) {e -= 2 * o;}return e;}var o = Math.PI;return e = a(e), t = a(t), i = a(i), t > i && (i += 2 * o, e < t && (e += 2 * o)), e >= t && e <= i;}function calRotateTranslate(e, t, i) {var a = e,o = i - t,n = a + (i - o - a) / 1.4142135623730951;n *= -1;return { transX: n, transY: (i - o) * (1.4142135623730951 - 1) - (i - o - a) / 1.4142135623730951 };}function createCurveControlPoints(e, t) {function i(e, t) {return !!(e[t - 1] && e[t + 1]) && (e[t].y >= n(e[t - 1].y, e[t + 1].y) || e[t].y <= o(e[t - 1].y, e[t + 1].y));}var o = Math.min,n = Math.max,l = .2,a = .2,r = null,s = null,d = null,h = null;if (1 > t ? (r = e[0].x + (e[1].x - e[0].x) * l, s = e[0].y + (e[1].y - e[0].y) * l) : (r = e[t].x + (e[t + 1].x - e[t - 1].x) * l, s = e[t].y + (e[t + 1].y - e[t - 1].y) * l), t > e.length - 3) {var x = e.length - 1;d = e[x].x - (e[x].x - e[x - 1].x) * a, h = e[x].y - (e[x].y - e[x - 1].y) * a;} else d = e[t + 1].x - (e[t + 2].x - e[t].x) * a, h = e[t + 1].y - (e[t + 2].y - e[t].y) * a;return i(e, t + 1) && (h = e[t + 1].y), i(e, t) && (s = e[t].y), (s >= n(e[t].y, e[t + 1].y) || s <= o(e[t].y, e[t + 1].y)) && (s = e[t].y), (h >= n(e[t].y, e[t + 1].y) || h <= o(e[t].y, e[t + 1].y)) && (h = e[t + 1].y), { ctrA: { x: r, y: s }, ctrB: { x: d, y: h } };}function convertCoordinateOrigin(e, t, i) {return { x: i.x + e, y: i.y - t };}function avoidCollision(e, t) {if (t) for (; util.isCollision(e, t);) {0 < e.start.x ? e.start.y-- : 0 > e.start.x ? e.start.y++ : 0 < e.start.y ? e.start.y++ : e.start.y--;}return e;}function fillSeries(e, t, i) {var a = 0;return e.map(function (e) {if (e.color || (e.color = i.colors[a], a = (a + 1) % i.colors.length), e.index || (e.index = 0), e.type || (e.type = t.type), \"undefined\" == typeof e.show && (e.show = !0), e.type || (e.type = t.type), e.pointShape || (e.pointShape = \"circle\"), !e.legendShape) switch (e.type) {case \"line\":e.legendShape = \"line\";break;case \"column\":e.legendShape = \"rect\";break;case \"area\":e.legendShape = \"triangle\";break;default:e.legendShape = \"circle\";}return e;});}function getDataRange(e, t) {var i = 0,a = t - e;return i = 1e4 <= a ? 1e3 : 1e3 <= a ? 100 : 100 <= a ? 10 : 10 <= a ? 5 : 1 <= a ? 1 : .1 <= a ? .1 : .01 <= a ? .01 : .001 <= a ? .001 : 1e-4 <= a ? 1e-4 : 1e-5 <= a ? 1e-5 : 1e-6, { minRange: findRange(e, \"lower\", i), maxRange: findRange(t, \"upper\", i) };}function measureText(e) {var t = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : config.fontSize;e = e + \"\";var e = e.split(\"\"),a = 0;for (var _t2, o = 0; o < e.length; o++) {_t2 = e[o], a += /[a-zA-Z]/.test(_t2) ? 7 : /[0-9]/.test(_t2) ? 5.5 : /\\./.test(_t2) ? 2.7 : /-/.test(_t2) ? 3.25 : /[\\u4e00-\\u9fa5]/.test(_t2) ? 10 : /\\(|\\)/.test(_t2) ? 3.73 : /\\s/.test(_t2) ? 2.5 : /%/.test(_t2) ? 8 : 10;}return a * t / 10;}function dataCombine(e) {return e.reduce(function (e, t) {return (e.data ? e.data : e).concat(t.data);}, []);}function dataCombineStack(e, t) {for (var o = Array(t), a = 0; a < o.length; a++) {o[a] = 0;}for (var n = 0; n < e.length; n++) {for (var a = 0; a < o.length; a++) {o[a] += e[n].data[a];}}return e.reduce(function (e, t) {return (e.data ? e.data : e).concat(t.data).concat(o);}, []);}function getTouches(t, i, a) {var e, o;return t.clientX ? i.rotate ? (o = i.height - t.clientX * i.pixelRatio, e = (t.pageY - a.currentTarget.offsetTop - i.height / i.pixelRatio / 2 * (i.pixelRatio - 1)) * i.pixelRatio) : (e = t.clientX * i.pixelRatio, o = (t.pageY - a.currentTarget.offsetTop - i.height / i.pixelRatio / 2 * (i.pixelRatio - 1)) * i.pixelRatio) : i.rotate ? (o = i.height - t.x * i.pixelRatio, e = t.y * i.pixelRatio) : (e = t.x * i.pixelRatio, o = t.y * i.pixelRatio), { x: e, y: o };}function getSeriesDataItem(e, t) {var i = [];for (var a, o = 0; o < e.length; o++) {if (a = e[o], null !== a.data[t] && \"undefined\" != typeof a.data[t] && a.show) {var _e = {};_e.color = a.color, _e.type = a.type, _e.style = a.style, _e.pointShape = a.pointShape, _e.disableLegend = a.disableLegend, _e.name = a.name, _e.show = a.show, _e.data = a.format ? a.format(a.data[t]) : a.data[t], i.push(_e);}}return i;}function getMaxTextListLength(e) {var t = e.map(function (e) {return measureText(e);});return Math.max.apply(null, t);}function getRadarCoordinateSeries(e) {for (var t = Math.PI, a = [], o = 0; o < e; o++) {a.push(2 * t / e * o);}return a.map(function (e) {return -1 * e + t / 2;});}function getToolTipData(e, t, a, i) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : {},n = e.map(function (e) {var t = [];return t = i ? i : e.data, { text: o.format ? o.format(e, t[a]) : e.name + \": \" + e.data, color: e.color };}),l = [],r = { x: 0, y: 0 };for (var _o2, _n = 0; _n < t.length; _n++) {_o2 = t[_n], \"undefined\" != typeof _o2[a] && null !== _o2[a] && l.push(_o2[a]);}for (var _o3, _n2 = 0; _n2 < l.length; _n2++) {_o3 = l[_n2], r.x = Math.round(_o3.x), r.y += _o3.y;}return r.y /= l.length, { textList: n, offset: r };}function getMixToolTipData(e, t, a, i) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : {},n = e.map(function (e) {return { text: o.format ? o.format(e, i[a]) : e.name + \": \" + e.data, color: e.color, disableLegend: !!e.disableLegend };});n = n.filter(function (e) {if (!0 !== e.disableLegend) return e;});var l = [],r = { x: 0, y: 0 };for (var _o4, _n3 = 0; _n3 < t.length; _n3++) {_o4 = t[_n3], \"undefined\" != typeof _o4[a] && null !== _o4[a] && l.push(_o4[a]);}for (var _o5, _n4 = 0; _n4 < l.length; _n4++) {_o5 = l[_n4], r.x = Math.round(_o5.x), r.y += _o5.y;}return r.y /= l.length, { textList: n, offset: r };}function getCandleToolTipData(e, t, a, o, i, n) {6 < arguments.length && void 0 !== arguments[6] ? arguments[6] : {};var l = n.color.upFill,r = n.color.downFill,s = [l, l, r, l];var d = [];var h = { text: i[o], color: null };d.push(h), t.map(function (t) {0 == o && 0 > t.data[1] - t.data[0] ? s[1] = r : (t.data[0] < e[o - 1][1] && (s[0] = r), t.data[1] < t.data[0] && (s[1] = r), t.data[2] > e[o - 1][1] && (s[2] = l), t.data[3] < e[o - 1][1] && (s[3] = r));var i = { text: \"\\u5F00\\u76D8\\uFF1A\" + t.data[0], color: s[0] },a = { text: \"\\u6536\\u76D8\\uFF1A\" + t.data[1], color: s[1] },n = { text: \"\\u6700\\u4F4E\\uFF1A\" + t.data[2], color: s[2] },h = { text: \"\\u6700\\u9AD8\\uFF1A\" + t.data[3], color: s[3] };d.push(i, a, n, h);});var x = [],c = { x: 0, y: 0 };for (var _l, _r = 0; _r < a.length; _r++) {_l = a[_r], \"undefined\" != typeof _l[o] && null !== _l[o] && x.push(_l[o]);}return c.x = Math.round(x[0][0].x), { textList: d, offset: c };}function filterSeries(e) {var t = [];for (var a = 0; a < e.length; a++) {!0 == e[a].show && t.push(e[a]);}return t;}function findCurrentIndex(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,n = -1,l = 0;var r = [];for (var _o6 = 0; _o6 < t[0].length; _o6++) {r.push(t[0][_o6].x);}return (\"line\" == i.type || \"area\" == i.type) && \"justify\" == i.xAxis.boundaryGap && (l = i.chartData.eachSpacing / 2), i.categories || (l = 0), isInExactChartArea(e, i, a) && r.forEach(function (t, i) {e.x + o + l > t && (n = i);}), n;}function findLegendIndex(e, t) {var i = -1;if (isInExactLegendArea(e, t.area)) {var a = t.points,o = -1;for (var _t3, n = 0, l = a.length; n < l; n++) {_t3 = a[n];for (var _a = 0; _a < _t3.length; _a++) {o += 1;var _n5 = _t3[_a].area;if (e.x > _n5[0] && e.x < _n5[2] && e.y > _n5[1] && e.y < _n5[3]) {i = o;break;}}}return i;}return i;}function isInExactLegendArea(e, t) {return e.x > t.start.x && e.x < t.end.x && e.y > t.start.y && e.y < t.end.y;}function isInExactChartArea(e, t) {return e.x <= t.width - t.area[1] + 10 && e.x >= t.area[3] - 10 && e.y >= t.area[0] && e.y <= t.height - t.area[2];}function findRadarChartCurrentIndex(e, t, i) {var a = Math.PI,o = 2 * a / i,n = -1;if (isInExactPieChartArea(e, t.center, t.radius)) {var l = function l(e) {return 0 > e && (e += 2 * a), e > 2 * a && (e -= 2 * a), e;},r = Math.atan2(t.center.y - e.y, e.x - t.center.x);r = -1 * r, 0 > r && (r += 2 * a);var s = t.angleList.map(function (e) {return e = l(-1 * e), e;});s.forEach(function (e, t) {var i = l(e - o / 2),s = l(e + o / 2);s < i && (s += 2 * a), (r >= i && r <= s || r + 2 * a >= i && r + 2 * a <= s) && (n = t);});}return n;}function findFunnelChartCurrentIndex(e, t) {for (var a, o = -1, n = 0, l = t.series.length; n < l; n++) {if (a = t.series[n], e.x > a.funnelArea[0] && e.x < a.funnelArea[2] && e.y > a.funnelArea[1] && e.y < a.funnelArea[3]) {o = n;break;}}return o;}function findWordChartCurrentIndex(e, t) {for (var a, o = -1, n = 0, l = t.length; n < l; n++) {if (a = t[n], e.x > a.area[0] && e.x < a.area[2] && e.y > a.area[1] && e.y < a.area[3]) {o = n;break;}}return o;}function findMapChartCurrentIndex(e, t) {for (var a, o = -1, n = t.chartData.mapData, l = t.series, r = pointToCoordinate(e.y, e.x, n.bounds, n.scale, n.xoffset, n.yoffset), s = [r.x, r.y], d = 0, h = l.length; d < h; d++) {if (a = l[d].geometry.coordinates, isPoiWithinPoly(s, a)) {o = d;break;}}return o;}function findPieChartCurrentIndex(e, t) {var a = -1;if (isInExactPieChartArea(e, t.center, t.radius)) {var o = Math.atan2(t.center.y - e.y, e.x - t.center.x);o = -o;for (var n, l = 0, r = t.series.length; l < r; l++) {if (n = t.series[l], isInAngleRange(o, n._start_, n._start_ + 2 * n._proportion_ * Math.PI)) {a = l;break;}}}return a;}function isInExactPieChartArea(e, t, i) {var a = Math.pow;return a(e.x - t.x, 2) + a(e.y - t.y, 2) <= a(i, 2);}function splitPoints(e) {var t = [],i = [];return e.forEach(function (e) {null === e ? (i.length && t.push(i), i = []) : i.push(e);}), i.length && t.push(i), t;}function calLegendData(e, t, i, a) {var o = Math.max,n = Math.floor;var l = { area: { start: { x: 0, y: 0 }, end: { x: 0, y: 0 }, width: 0, height: 0, wholeWidth: 0, wholeHeight: 0 }, points: [], widthArr: [], heightArr: [] };if (!1 === t.legend.show) return a.legendData = l, l;var r = t.legend.padding,s = t.legend.margin,d = t.legend.fontSize,h = 15 * t.pixelRatio,x = 5 * t.pixelRatio,c = o(t.legend.lineHeight * t.pixelRatio, d);if (\"top\" == t.legend.position || \"bottom\" == t.legend.position) {var _a2 = [],_n6 = 0,p = [],g = [];for (var _o7 = 0; _o7 < e.length; _o7++) {var _i3 = e[_o7],_l2 = h + x + measureText(_i3.name || \"undefined\", d) + t.legend.itemGap;_n6 + _l2 > t.width - t.padding[1] - t.padding[3] ? (_a2.push(g), p.push(_n6 - t.legend.itemGap), _n6 = _l2, g = [_i3]) : (_n6 += _l2, g.push(_i3));}if (g.length) {_a2.push(g), p.push(_n6 - t.legend.itemGap), l.widthArr = p;var _e2 = o.apply(null, p);switch (t.legend.float) {case \"left\":l.area.start.x = t.padding[3], l.area.end.x = t.padding[3] + 2 * r;break;case \"right\":l.area.start.x = t.width - t.padding[1] - _e2 - 2 * r, l.area.end.x = t.width - t.padding[1];break;default:l.area.start.x = (t.width - _e2) / 2 - r, l.area.end.x = (t.width + _e2) / 2 + r;}l.area.width = _e2 + 2 * r, l.area.wholeWidth = _e2 + 2 * r, l.area.height = _a2.length * c + 2 * r, l.area.wholeHeight = _a2.length * c + 2 * r + 2 * s, l.points = _a2;}} else {var _i4 = e.length,_a3 = t.height - t.padding[0] - t.padding[2] - 2 * s - 2 * r,_o8 = Math.min(n(_a3 / c), _i4);switch (l.area.height = _o8 * c + 2 * r, l.area.wholeHeight = _o8 * c + 2 * r, t.legend.float) {case \"top\":l.area.start.y = t.padding[0] + s, l.area.end.y = t.padding[0] + s + l.area.height;break;case \"bottom\":l.area.start.y = t.height - t.padding[2] - s - l.area.height, l.area.end.y = t.height - t.padding[2] - s;break;default:l.area.start.y = (t.height - l.area.height) / 2, l.area.end.y = (t.height + l.area.height) / 2;}var _p = 0 == _i4 % _o8 ? _i4 / _o8 : n(_i4 / _o8 + 1),_g = [];for (var _t4, _a4 = 0; _a4 < _p; _a4++) {_t4 = e.slice(_a4 * _o8, _a4 * _o8 + _o8), _g.push(_t4);}if (l.points = _g, _g.length) {for (var _e4 = 0; _e4 < _g.length; _e4++) {var _i5 = _g[_e4],_a5 = 0;for (var _e5, _o9 = 0; _o9 < _i5.length; _o9++) {_e5 = h + x + measureText(_i5[_o9].name || \"undefined\", d) + t.legend.itemGap, _e5 > _a5 && (_a5 = _e5);}l.widthArr.push(_a5), l.heightArr.push(_i5.length * c + 2 * r);}var _e3 = 0;for (var _t5 = 0; _t5 < l.widthArr.length; _t5++) {_e3 += l.widthArr[_t5];}l.area.width = _e3 - t.legend.itemGap + 2 * r, l.area.wholeWidth = l.area.width + r;}}switch (t.legend.position) {case \"top\":l.area.start.y = t.padding[0] + s, l.area.end.y = t.padding[0] + s + l.area.height;break;case \"bottom\":l.area.start.y = t.height - t.padding[2] - l.area.height - s, l.area.end.y = t.height - t.padding[2] - s;break;case \"left\":l.area.start.x = t.padding[3], l.area.end.x = t.padding[3] + l.area.width;break;case \"right\":l.area.start.x = t.width - t.padding[1] - l.area.width, l.area.end.x = t.width - t.padding[1];}return a.legendData = l, l;}function calCategoriesData(e, t, i, a) {var o = { angle: 0, xAxisHeight: i.xAxisHeight },n = e.map(function (e) {return measureText(e, t.xAxis.fontSize || i.fontSize);}),l = Math.max.apply(this, n);return !0 == t.xAxis.rotateLabel && l + 2 * i.xAxisTextPadding > a && (o.angle = 45 * Math.PI / 180, o.xAxisHeight = 2 * i.xAxisTextPadding + l * Math.sin(o.angle)), o;}function getXAxisTextList(e, t) {var a = Math.min,o = Math.max,n = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : -1,l = dataCombine(e),r = [];l = l.filter(function (e) {return \"object\" == typeof e && null !== e ? e.constructor == Array ? null !== e : null !== e.value : null !== e;}), l.map(function (e) {\"object\" == typeof e ? e.constructor == Array ? \"candle\" == t.type ? e.map(function (e) {r.push(e);}) : r.push(e[0]) : r.push(e.value) : r.push(e);});var s = 0,d = 0;if (0 < r.length && (s = a.apply(this, r), d = o.apply(this, r)), -1 < n ? (\"number\" == typeof t.xAxis.data[n].min && (s = a(t.xAxis.data[n].min, s)), \"number\" == typeof t.xAxis.data[n].max && (d = o(t.xAxis.data[n].max, d))) : (\"number\" == typeof t.xAxis.min && (s = a(t.xAxis.min, s)), \"number\" == typeof t.xAxis.max && (d = o(t.xAxis.max, d))), s === d) {var h = d || 10;d += h;}for (var x = getDataRange(s, d), c = x.minRange, p = x.maxRange, g = [], y = (p - c) / t.xAxis.splitNumber, f = 0; f <= t.xAxis.splitNumber; f++) {g.push(c + y * f);}return g;}function calXAxisData(e, t, i) {var a = { angle: 0, xAxisHeight: i.xAxisHeight };a.ranges = getXAxisTextList(e, t, i), a.rangesFormat = a.ranges.map(function (e) {return e = t.xAxis.format ? t.xAxis.format(e) : util.toFixed(e, 2), e;});var o = a.ranges.map(function (e) {return e = util.toFixed(e, 2), e = t.xAxis.format ? t.xAxis.format(+e) : e, e;});a = Object.assign(a, getXAxisPoints(o, t, i));var n = a.eachSpacing,l = o.map(function (e) {return measureText(e);}),r = Math.max.apply(this, l);return r + 2 * i.xAxisTextPadding > n && (a.angle = 45 * Math.PI / 180, a.xAxisHeight = 2 * i.xAxisTextPadding + r * Math.sin(a.angle)), !0 === t.xAxis.disabled && (a.xAxisHeight = 0), a;}function getRadarDataPoints(e, t, i, a, o) {var n = Math.max,l = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 1,r = o.extra.radar || {};r.max = r.max || 0;var s = n(r.max, n.apply(null, dataCombine(a))),d = [];var _loop = function _loop(_n7) {var o = a[_n7],r = {};r.color = o.color, r.legendShape = o.legendShape, r.pointShape = o.pointShape, r.data = [], o.data.forEach(function (a, o) {var n = {};n.angle = e[o], n.proportion = a / s, n.position = convertCoordinateOrigin(i * n.proportion * l * Math.cos(n.angle), i * n.proportion * l * Math.sin(n.angle), t), r.data.push(n);}), d.push(r);};for (var _n7 = 0; _n7 < a.length; _n7++) {_loop(_n7);}return d;}function getPieDataPoints(e, t) {var a = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1,o = 0,n = 0;for (var _a6, _n8 = 0; _n8 < e.length; _n8++) {_a6 = e[_n8], _a6.data = null === _a6.data ? 0 : _a6.data, o += _a6.data;}for (var _n9, l = 0; l < e.length; l++) {_n9 = e[l], _n9.data = null === _n9.data ? 0 : _n9.data, _n9._proportion_ = 0 === o ? 1 / e.length * a : _n9.data / o * a, _n9._radius_ = t;}for (var _a7, _o10 = 0; _o10 < e.length; _o10++) {_a7 = e[_o10], _a7._start_ = n, n += 2 * _a7._proportion_ * Math.PI;}return e;}function getFunnelDataPoints(e, t) {var a = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1;e = e.sort(function (e, t) {return parseInt(t.data) - parseInt(e.data);});for (var o = 0; o < e.length; o++) {e[o].radius = e[o].data / e[0].data * t * a, e[o]._proportion_ = e[o].data / e[0].data;}return e.reverse();}function getRoseDataPoints(e, t, a, o) {var n = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 1,l = 0,r = 0,s = [];for (var _n10, _r2 = 0; _r2 < e.length; _r2++) {_n10 = e[_r2], _n10.data = null === _n10.data ? 0 : _n10.data, l += _n10.data, s.push(_n10.data);}var d = Math.min.apply(null, s),h = Math.max.apply(null, s);for (var _r3, _s = 0; _s < e.length; _s++) {_r3 = e[_s], _r3.data = null === _r3.data ? 0 : _r3.data, 0 === l || \"area\" == t ? (_r3._proportion_ = _r3.data / l * n, _r3._rose_proportion_ = 1 / e.length * n) : (_r3._proportion_ = _r3.data / l * n, _r3._rose_proportion_ = _r3.data / l * n), _r3._radius_ = a + (o - a) * ((_r3.data - d) / (h - d));}for (var _n11, _l3 = 0; _l3 < e.length; _l3++) {_n11 = e[_l3], _n11._start_ = r, r += 2 * _n11._rose_proportion_ * Math.PI;}return e;}function getArcbarDataPoints(e, t) {var a = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1;1 == a && (a = .999999);for (var o, n = 0; n < e.length; n++) {o = e[n], o.data = null === o.data ? 0 : o.data;var i = void 0;i = \"circle\" == t.type ? 2 : t.endAngle < t.startAngle ? 2 + t.endAngle - t.startAngle : t.startAngle - t.endAngle, o._proportion_ = i * o.data * a + t.startAngle, 2 <= o._proportion_ && (o._proportion_ %= 2);}return e;}function getGaugeAxisPoints(e, t, a) {var o = t;for (var n = 0; n < e.length; n++) {e[n].value = null === e[n].value ? 0 : e[n].value, e[n]._startAngle_ = o, e[n]._endAngle_ = (t - a + 1) * e[n].value + t, 2 <= e[n]._endAngle_ && (e[n]._endAngle_ %= 2), o = e[n]._endAngle_;}return e;}function getGaugeDataPoints(e, t, a) {var o = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 1;for (var n, l = 0; l < e.length; l++) {if (n = e[l], n.data = null === n.data ? 0 : n.data, \"auto\" == a.pointer.color) {for (var _e6 = 0; _e6 < t.length; _e6++) {if (n.data <= t[_e6].value) {n.color = t[_e6].color;break;}}} else n.color = a.pointer.color;var i = a.startAngle - a.endAngle + 1;n._endAngle_ = i * n.data + a.startAngle, n._oldAngle_ = a.oldAngle, a.oldAngle < a.endAngle && (n._oldAngle_ += 2), n._proportion_ = n.data >= a.oldData ? (n._endAngle_ - n._oldAngle_) * o + a.oldAngle : n._oldAngle_ - (n._oldAngle_ - n._endAngle_) * o, 2 <= n._proportion_ && (n._proportion_ %= 2);}return e;}function getPieTextMaxLength(e) {e = getPieDataPoints(e);var t = 0;for (var a = 0; a < e.length; a++) {var i = e[a],o = i.format ? i.format(+i._proportion_.toFixed(2)) : util.toFixed(100 * i._proportion_) + \"%\";t = Math.max(t, measureText(o));}return t;}function fixColumeData(e, t, i, a, o, n) {return e.map(function (e) {return null === e ? null : (e.width = Math.ceil((t - 2 * o.columePadding) / i), n.extra.column && n.extra.column.width && 0 < +n.extra.column.width && (e.width = Math.min(e.width, +n.extra.column.width)), 0 >= e.width && (e.width = 1), e.x += (a + .5 - i / 2) * e.width, e);});}function fixColumeMeterData(e, t, i, a, o, n, l) {return e.map(function (e) {return null === e ? null : (e.width = Math.ceil((t - 2 * o.columePadding) / 2), n.extra.column && n.extra.column.width && 0 < +n.extra.column.width && (e.width = Math.min(e.width, +n.extra.column.width)), 0 < a && (e.width -= 2 * l), e);});}function fixColumeStackData(e, t, i, a, o, n) {return e.map(function (e) {return null === e ? null : (e.width = Math.ceil((t - 2 * o.columePadding) / 2), n.extra.column && n.extra.column.width && 0 < +n.extra.column.width && (e.width = Math.min(e.width, +n.extra.column.width)), e);});}function getXAxisPoints(e, t) {var i = t.width - t.area[1] - t.area[3],a = t.enableScroll ? Math.min(t.xAxis.itemCount, e.length) : e.length;(\"line\" == t.type || \"area\" == t.type) && 1 < a && \"justify\" == t.xAxis.boundaryGap && (a -= 1);var o = i / a,n = [],l = t.area[3],r = t.width - t.area[1];return e.forEach(function (e, t) {n.push(l + t * o);}), \"justify\" !== t.xAxis.boundaryGap && (!0 === t.enableScroll ? n.push(l + e.length * o) : n.push(r)), { xAxisPoints: n, startX: l, endX: r, eachSpacing: o };}function getCandleDataPoints(e, t, i, a, o, n) {var l = Math.round,r = 7 < arguments.length && void 0 !== arguments[7] ? arguments[7] : 1,s = [],d = n.height - n.area[0] - n.area[2];return e.forEach(function (e, h) {if (null === e) s.push(null);else {var x = [];e.forEach(function (e) {var s = { x: a[h] + l(o / 2) },c = e.value || e,p = d * (c - t) / (i - t);p *= r, s.y = n.height - l(p) - n.area[2], x.push(s);}), s.push(x);}}), s;}function getDataPoints(e, t, i, a, o, n) {var l = Math.round,r = 7 < arguments.length && void 0 !== arguments[7] ? arguments[7] : 1,s = \"center\";(\"line\" == n.type || \"area\" == n.type) && (s = n.xAxis.boundaryGap);var d = [],h = n.height - n.area[0] - n.area[2],x = n.width - n.area[1] - n.area[3];return e.forEach(function (e, c) {if (null === e) d.push(null);else {var p = { color: e.color, x: a[c] },g = e;if (\"object\" == typeof e && null !== e) if (e.constructor == Array) {var _t6, _i6, _a8;_t6 = [].concat(n.chartData.xAxisData.ranges), _i6 = _t6.shift(), _a8 = _t6.pop(), g = e[1], p.x = n.area[3] + x * (e[0] - _i6) / (_a8 - _i6);} else g = e.value;\"center\" == s && (p.x += l(o / 2));var y = h * (g - t) / (i - t);y *= r, p.y = n.height - l(y) - n.area[2], d.push(p);}}), d;}function getStackDataPoints(e, t, i, a, o, n, l, r, s) {var d = Math.round,h = 9 < arguments.length && void 0 !== arguments[9] ? arguments[9] : 1,x = [],c = n.height - n.area[0] - n.area[2];return e.forEach(function (e, l) {if (null === e) x.push(null);else {var p = { color: e.color, x: a[l] + d(o / 2) };if (0 < r) {var g = 0;for (var _e7 = 0; _e7 <= r; _e7++) {g += s[_e7].data[l];}var y = g - e,f = c * (g - t) / (i - t),u = c * (y - t) / (i - t);} else var g = e,f = c * (g - t) / (i - t),u = 0;var m = u;f *= h, m *= h, p.y = n.height - d(f) - n.area[2], p.y0 = n.height - d(m) - n.area[2], x.push(p);}}), x;}function getYAxisTextList(e, t, a, o) {var n,l = Math.min,r = Math.max,s = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : -1;n = \"stack\" == o ? dataCombineStack(e, t.categories.length) : dataCombine(e);var d = [];n = n.filter(function (e) {return \"object\" == typeof e && null !== e ? e.constructor == Array ? null !== e : null !== e.value : null !== e;}), n.map(function (e) {\"object\" == typeof e ? e.constructor == Array ? \"candle\" == t.type ? e.map(function (e) {d.push(e);}) : d.push(e[1]) : d.push(e.value) : d.push(e);});var h = 0,x = 0;if (0 < d.length && (h = l.apply(this, d), x = r.apply(this, d)), -1 < s ? (\"number\" == typeof t.yAxis.data[s].min && (h = l(t.yAxis.data[s].min, h)), \"number\" == typeof t.yAxis.data[s].max && (x = r(t.yAxis.data[s].max, x))) : (\"number\" == typeof t.yAxis.min && (h = l(t.yAxis.min, h)), \"number\" == typeof t.yAxis.max && (x = r(t.yAxis.max, x))), h === x) {var c = x || 10;x += c;}for (var p = getDataRange(h, x), g = p.minRange, y = p.maxRange, f = [], u = (y - g) / t.yAxis.splitNumber, m = 0; m <= t.yAxis.splitNumber; m++) {f.push(g + u * m);}return f.reverse();}function calYAxisData(e, t, a) {var o = Math.max,n = assign({}, { type: \"\" }, t.extra.column),l = t.yAxis.data.length,r = Array(l);if (0 < l) {for (var _t7 = 0; _t7 < l; _t7++) {r[_t7] = [];for (var _i7 = 0; _i7 < e.length; _i7++) {e[_i7].index == _t7 && r[_t7].push(e[_i7]);}}var s = Array(l),d = Array(l),h = Array(l);var _loop2 = function _loop2(x, _e9) {_e9 = t.yAxis.data[x], !0 == t.yAxis.disabled && (_e9.disabled = !0), s[x] = getYAxisTextList(r[x], t, a, n.type, x);var i = _e9.fontSize || a.fontSize;h[x] = { position: _e9.position ? _e9.position : \"left\", width: 0 }, d[x] = s[x].map(function (t) {_e8 = _e9;return t = util.toFixed(t, 6), t = _e9.format ? _e9.format(+t) : t, h[x].width = o(h[x].width, measureText(t, i) + 5), t;});var l = _e9.calibration ? 4 * t.pixelRatio : 0;h[x].width += l + 3 * t.pixelRatio, !0 === _e9.disabled && (h[x].width = 0);_e8 = _e9;};for (var _e8, x = 0; x < l; x++) {_loop2(x, _e8);}} else {var s = [,],d = [,],h = [,];s[0] = getYAxisTextList(e, t, a, n.type), h[0] = { position: \"left\", width: 0 };var i = t.yAxis.fontSize || a.fontSize;d[0] = s[0].map(function (e) {return e = util.toFixed(e, 6), e = t.yAxis.format ? t.yAxis.format(+e) : e, h[0].width = o(h[0].width, measureText(e, i) + 5), e;}), h[0].width += 3 * t.pixelRatio, !0 === t.yAxis.disabled ? (h[0] = { position: \"left\", width: 0 }, t.yAxis.data[0] = { disabled: !0 }) : t.yAxis.data[0] = { disabled: !1, position: \"left\", max: t.yAxis.max, min: t.yAxis.min, format: t.yAxis.format };}return { rangesFormat: d, ranges: s, yAxisWidth: h };}function calTooltipYAxisData(e, t, a) {var o = [].concat(a.chartData.yAxisData.ranges),n = a.height - a.area[0] - a.area[2],l = a.area[0],r = [];for (var s = 0; s < o.length; s++) {var _t8 = o[s].shift(),i = o[s].pop(),d = _t8 - (_t8 - i) * (e - l) / n;d = a.yAxis.data[s].format ? a.yAxis.data[s].format(+d) : d.toFixed(0), r.push(d + \"\");}return r;}function calMarkLineData(e, t) {var a,o,n = t.height - t.area[0] - t.area[2];for (var l = 0; l < e.length; l++) {e[l].yAxisIndex = e[l].yAxisIndex ? e[l].yAxisIndex : 0;var i = [].concat(t.chartData.yAxisData.ranges[e[l].yAxisIndex]);a = i.pop(), o = i.shift();var r = n * (e[l].value - a) / (o - a);e[l].y = t.height - Math.round(r) - t.area[2];}return e;}function contextRotate(e, t) {var i = Math.PI;!0 === t.rotateLock ? !0 !== t._rotate_ && (e.translate(t.height, 0), e.rotate(90 * i / 180), t._rotate_ = !0) : (e.translate(t.height, 0), e.rotate(90 * i / 180));}function drawPointShape(e, t, i, a, o) {a.beginPath(), \"hollow\" == o.dataPointShapeType ? (a.setStrokeStyle(t), a.setFillStyle(o.background), a.setLineWidth(2 * o.pixelRatio)) : (a.setStrokeStyle(\"#ffffff\"), a.setFillStyle(t), a.setLineWidth(1 * o.pixelRatio)), \"diamond\" === i ? e.forEach(function (e) {null !== e && (a.moveTo(e.x, e.y - 4.5), a.lineTo(e.x - 4.5, e.y), a.lineTo(e.x, e.y + 4.5), a.lineTo(e.x + 4.5, e.y), a.lineTo(e.x, e.y - 4.5));}) : \"circle\" === i ? e.forEach(function (e) {null !== e && (a.moveTo(e.x + 2.5 * o.pixelRatio, e.y), a.arc(e.x, e.y, 3 * o.pixelRatio, 0, 2 * Math.PI, !1));}) : \"rect\" === i ? e.forEach(function (e) {null !== e && (a.moveTo(e.x - 3.5, e.y - 3.5), a.rect(e.x - 3.5, e.y - 3.5, 7, 7));}) : \"triangle\" == i && e.forEach(function (e) {null !== e && (a.moveTo(e.x, e.y - 4.5), a.lineTo(e.x - 4.5, e.y + 4.5), a.lineTo(e.x + 4.5, e.y + 4.5), a.lineTo(e.x, e.y - 4.5));}), a.closePath(), a.fill(), a.stroke();}function drawRingTitle(e, t, i, a) {var o = e.title.fontSize || t.titleFontSize,n = e.subtitle.fontSize || t.subtitleFontSize,l = e.title.name || \"\",r = e.subtitle.name || \"\",s = e.title.color || t.titleColor,d = e.subtitle.color || t.subtitleColor,h = l ? o : 0,x = r ? n : 0,c = 5;if (r) {var p = measureText(r, n),g = a.x - p / 2 + (e.subtitle.offsetX || 0),y = a.y + n / 2 + (e.subtitle.offsetY || 0);l && (y += (h + c) / 2), i.beginPath(), i.setFontSize(n), i.setFillStyle(d), i.fillText(r, g, y), i.closePath(), i.stroke();}if (l) {var f = measureText(l, o),u = a.x - f / 2 + (e.title.offsetX || 0),m = a.y + o / 2 + (e.title.offsetY || 0);r && (m -= (x + c) / 2), i.beginPath(), i.setFontSize(o), i.setFillStyle(s), i.fillText(l, u, m), i.closePath(), i.stroke();}}function drawPointText(e, t, i, a) {var o = t.data;e.forEach(function (e, n) {if (null !== e) {a.beginPath(), a.setFontSize(t.textSize || i.fontSize), a.setFillStyle(t.textColor || \"#666666\");var l = o[n];\"object\" == typeof o[n] && null !== o[n] && (o[n].constructor == Array ? l = o[n][1] : l = o[n].value);var r = t.format ? t.format(l) : l;a.fillText(r + \"\", e.x - measureText(r, t.textSize || i.fontSize) / 2, e.y - 4), a.closePath(), a.stroke();}});}function drawGaugeLabel(e, t, i, a, o, n) {var l = Math.PI;t -= e.width / 2 + o.gaugeLabelTextMargin;var r = e.startAngle - e.endAngle + 1,s = r / e.splitLine.splitNumber,d = e.endNumber - e.startNumber,h = d / e.splitLine.splitNumber,x = e.startAngle,c = e.startNumber;for (var _r4 = 0; _r4 < e.splitLine.splitNumber + 1; _r4++) {var p = { x: t * Math.cos(x * l), y: t * Math.sin(x * l) },g = e.labelFormat ? e.labelFormat(c) : c;p.x += i.x - measureText(g) / 2, p.y += i.y;var y = p.x,f = p.y;n.beginPath(), n.setFontSize(o.fontSize), n.setFillStyle(e.labelColor || \"#666666\"), n.fillText(g, y, f + o.fontSize / 2), n.closePath(), n.stroke(), x += s, 2 <= x && (x %= 2), c += h;}}function drawRadarLabel(e, t, i, a, o, n) {var l = a.extra.radar || {};t += o.radarLabelTextMargin, e.forEach(function (e, r) {var s = { x: t * Math.cos(e), y: t * Math.sin(e) },d = convertCoordinateOrigin(s.x, s.y, i),h = d.x,x = d.y;util.approximatelyEqual(s.x, 0) ? h -= measureText(a.categories[r] || \"\") / 2 : 0 > s.x && (h -= measureText(a.categories[r] || \"\")), n.beginPath(), n.setFontSize(o.fontSize), n.setFillStyle(l.labelColor || \"#666666\"), n.fillText(a.categories[r] || \"\", h, x + o.fontSize / 2), n.closePath(), n.stroke();});}function drawPieText(e, t, a, o, i, n) {var l = Math.cos,r = Math.sin,s = Math.min,d = Math.max,h = Math.PI,x = a.pieChartLinePadding,c = [],p = null,g = e.map(function (e) {var t = e.format ? e.format(+e._proportion_.toFixed(2)) : util.toFixed(100 * e._proportion_.toFixed(4)) + \"%\";e._rose_proportion_ && (e._proportion_ = e._rose_proportion_);var i = 2 * h - (e._start_ + 2 * h * e._proportion_ / 2),a = e.color,o = e._radius_;return { arc: i, text: t, color: a, radius: o, textColor: e.textColor, textSize: e.textSize };});for (var _h = 0; _h < g.length; _h++) {var _e10 = g[_h],_t9 = l(_e10.arc) * (_e10.radius + x),_i8 = r(_e10.arc) * (_e10.radius + x),_o11 = l(_e10.arc) * _e10.radius,_n12 = r(_e10.arc) * _e10.radius,y = 0 <= _t9 ? _t9 + a.pieChartTextPadding : _t9 - a.pieChartTextPadding,f = _i8,u = measureText(_e10.text, _e10.textSize || a.fontSize),m = f;p && util.isSameXCoordinateArea(p.start, { x: y }) && (0 < y ? m = s(f, p.start.y) : 0 > _t9 ? m = d(f, p.start.y) : 0 < f ? m = d(f, p.start.y) : m = s(f, p.start.y)), 0 > y && (y -= u);var S = { lineStart: { x: _o11, y: _n12 }, lineEnd: { x: _t9, y: _i8 }, start: { x: y, y: m }, width: u, height: a.fontSize, text: _e10.text, color: _e10.color, textColor: _e10.textColor, textSize: _e10.textSize };p = avoidCollision(S, p), c.push(p);}for (var _l4 = 0; _l4 < c.length; _l4++) {var _e11 = c[_l4],_i9 = convertCoordinateOrigin(_e11.lineStart.x, _e11.lineStart.y, n),_r5 = convertCoordinateOrigin(_e11.lineEnd.x, _e11.lineEnd.y, n),_s2 = convertCoordinateOrigin(_e11.start.x, _e11.start.y, n);o.setLineWidth(1 * t.pixelRatio), o.setFontSize(a.fontSize), o.beginPath(), o.setStrokeStyle(_e11.color), o.setFillStyle(_e11.color), o.moveTo(_i9.x, _i9.y);var _d = 0 > _e11.start.x ? _s2.x + _e11.width : _s2.x,_x = 0 > _e11.start.x ? _s2.x - 5 : _s2.x + 5;o.quadraticCurveTo(_r5.x, _r5.y, _d, _s2.y), o.moveTo(_i9.x, _i9.y), o.stroke(), o.closePath(), o.beginPath(), o.moveTo(_s2.x + _e11.width, _s2.y), o.arc(_d, _s2.y, 2, 0, 2 * h), o.closePath(), o.fill(), o.beginPath(), o.setFontSize(_e11.textSize || a.fontSize), o.setFillStyle(_e11.textColor || \"#666666\"), o.fillText(_e11.text, _x, _s2.y + 3), o.closePath(), o.stroke(), o.closePath();}}function drawToolTipSplitLine(e, t, i, a) {var o = t.extra.tooltip || {};o.gridType = null == o.gridType ? \"solid\" : o.gridType, o.dashLength = null == o.dashLength ? 4 : o.dashLength;var n = t.area[0],l = t.height - t.area[2];if (\"dash\" == o.gridType && a.setLineDash([o.dashLength, o.dashLength]), a.setStrokeStyle(o.gridColor || \"#cccccc\"), a.setLineWidth(1 * t.pixelRatio), a.beginPath(), a.moveTo(e, n), a.lineTo(e, l), a.stroke(), a.setLineDash([]), o.xAxisLabel) {var _n13 = t.categories[t.tooltip.index];a.setFontSize(i.fontSize);var r = measureText(_n13, i.fontSize),s = e - .5 * r,d = l;a.beginPath(), a.setFillStyle(hexToRgb(o.labelBgColor || i.toolTipBackground, o.labelBgOpacity || i.toolTipOpacity)), a.setStrokeStyle(o.labelBgColor || i.toolTipBackground), a.setLineWidth(1 * t.pixelRatio), a.rect(s - i.toolTipPadding, d, r + 2 * i.toolTipPadding, i.fontSize + 2 * i.toolTipPadding), a.closePath(), a.stroke(), a.fill(), a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(o.labelFontColor || i.fontColor), a.fillText(_n13 + \"\", s, d + i.toolTipPadding + i.fontSize), a.closePath(), a.stroke();}}function drawMarkLine(e, t, a) {var o = assign({}, { type: \"solid\", dashLength: 4, data: [] }, e.extra.markLine),n = e.area[3],l = e.width - e.area[1],r = calMarkLineData(o.data, e);for (var s, d = 0; d < r.length; d++) {if (s = assign({}, { lineColor: \"#DE4A42\", showLabel: !1, labelFontColor: \"#666666\", labelBgColor: \"#DFE8FF\", labelBgOpacity: .8, yAxisIndex: 0 }, r[d]), \"dash\" == o.type && a.setLineDash([o.dashLength, o.dashLength]), a.setStrokeStyle(s.lineColor), a.setLineWidth(1 * e.pixelRatio), a.beginPath(), a.moveTo(n, s.y), a.lineTo(l, s.y), a.stroke(), a.setLineDash([]), s.showLabel) {var i = e.yAxis.format ? e.yAxis.format(+s.value) : s.value;a.setFontSize(t.fontSize);var _o12 = measureText(i, t.fontSize),_n14 = e.padding[3] + t.yAxisTitleWidth - t.toolTipPadding,_l5 = Math.max(e.area[3], _o12 + 2 * t.toolTipPadding),_r6 = _l5 - _n14,_d2 = s.y;a.setFillStyle(hexToRgb(s.labelBgColor, s.labelBgOpacity)), a.setStrokeStyle(s.labelBgColor), a.setLineWidth(1 * e.pixelRatio), a.beginPath(), a.rect(_n14, _d2 - .5 * t.fontSize - t.toolTipPadding, _r6, t.fontSize + 2 * t.toolTipPadding), a.closePath(), a.stroke(), a.fill(), a.beginPath(), a.setFontSize(t.fontSize), a.setFillStyle(s.labelFontColor), a.fillText(i + \"\", _n14 + (_r6 - _o12) / 2, _d2 + .5 * t.fontSize), a.stroke();}}}function drawToolTipHorizentalLine(e, t, a, i) {var o = Math.max,n = assign({}, { gridType: \"solid\", dashLength: 4 }, e.extra.tooltip),l = e.area[3],r = e.width - e.area[1];if (\"dash\" == n.gridType && a.setLineDash([n.dashLength, n.dashLength]), a.setStrokeStyle(n.gridColor || \"#cccccc\"), a.setLineWidth(1 * e.pixelRatio), a.beginPath(), a.moveTo(l, e.tooltip.offset.y), a.lineTo(r, e.tooltip.offset.y), a.stroke(), a.setLineDash([]), n.yAxisLabel) {var _l6 = calTooltipYAxisData(e.tooltip.offset.y, e.series, e, t, i),_r7 = e.chartData.yAxisData.yAxisWidth,s = e.area[3],d = e.width - e.area[1];for (var h = 0; h < _l6.length; h++) {a.setFontSize(t.fontSize);var _i10 = void 0,x = void 0,c = void 0,p = measureText(_l6[h], t.fontSize);\"left\" == _r7[h].position ? (_i10 = s - _r7[h].width, x = o(_i10, _i10 + p + 2 * t.toolTipPadding)) : (_i10 = d, x = o(_i10 + _r7[h].width, _i10 + p + 2 * t.toolTipPadding)), c = x - _i10;var g = _i10 + (c - p) / 2,y = e.tooltip.offset.y;a.beginPath(), a.setFillStyle(hexToRgb(n.labelBgColor || t.toolTipBackground, n.labelBgOpacity || t.toolTipOpacity)), a.setStrokeStyle(n.labelBgColor || t.toolTipBackground), a.setLineWidth(1 * e.pixelRatio), a.rect(_i10, y - .5 * t.fontSize - t.toolTipPadding, c, t.fontSize + 2 * t.toolTipPadding), a.closePath(), a.stroke(), a.fill(), a.beginPath(), a.setFontSize(t.fontSize), a.setFillStyle(n.labelFontColor || t.fontColor), a.fillText(_l6[h], g, y + .5 * t.fontSize), a.closePath(), a.stroke(), \"left\" == _r7[h].position ? s -= _r7[h].width + e.yAxis.padding : d += _r7[h].width + e.yAxis.padding;}}}function drawToolTipSplitArea(e, t, i, a, o) {var n = assign({}, { activeBgColor: \"#000000\", activeBgOpacity: .08 }, t.extra.tooltip),l = t.area[0],r = t.height - t.area[2];a.beginPath(), a.setFillStyle(hexToRgb(n.activeBgColor, n.activeBgOpacity)), a.rect(e - o / 2, l, o, r - l), a.closePath(), a.fill();}function drawToolTip(e, t, i, a, o) {var n = Math.round,l = assign({}, { showBox: !0, bgColor: \"#000000\", bgOpacity: .7, fontColor: \"#FFFFFF\" }, i.extra.tooltip),r = 4 * i.pixelRatio,s = 5 * i.pixelRatio,d = 8 * i.pixelRatio,h = !1;(\"line\" == i.type || \"area\" == i.type || \"candle\" == i.type || \"mix\" == i.type) && drawToolTipSplitLine(i.tooltip.offset.x, i, a, o), t = assign({ x: 0, y: 0 }, t), t.y -= 8 * i.pixelRatio;var x = e.map(function (e) {return measureText(e.text, a.fontSize);}),c = r + s + 4 * a.toolTipPadding + Math.max.apply(null, x),p = 2 * a.toolTipPadding + e.length * a.toolTipLineHeight;!1 == l.showBox || (t.x - Math.abs(i._scrollDistance_) + d + c > i.width && (h = !0), p + t.y > i.height && (t.y = i.height - p), o.beginPath(), o.setFillStyle(hexToRgb(l.bgColor || a.toolTipBackground, l.bgOpacity || a.toolTipOpacity)), h ? (o.moveTo(t.x, t.y + 10 * i.pixelRatio), o.lineTo(t.x - d, t.y + 10 * i.pixelRatio - 5 * i.pixelRatio), o.lineTo(t.x - d, t.y), o.lineTo(t.x - d - n(c), t.y), o.lineTo(t.x - d - n(c), t.y + p), o.lineTo(t.x - d, t.y + p), o.lineTo(t.x - d, t.y + 10 * i.pixelRatio + 5 * i.pixelRatio), o.lineTo(t.x, t.y + 10 * i.pixelRatio)) : (o.moveTo(t.x, t.y + 10 * i.pixelRatio), o.lineTo(t.x + d, t.y + 10 * i.pixelRatio - 5 * i.pixelRatio), o.lineTo(t.x + d, t.y), o.lineTo(t.x + d + n(c), t.y), o.lineTo(t.x + d + n(c), t.y + p), o.lineTo(t.x + d, t.y + p), o.lineTo(t.x + d, t.y + 10 * i.pixelRatio + 5 * i.pixelRatio), o.lineTo(t.x, t.y + 10 * i.pixelRatio)), o.closePath(), o.fill(), e.forEach(function (e, i) {if (null !== e.color) {o.beginPath(), o.setFillStyle(e.color);var n = t.x + d + 2 * a.toolTipPadding,l = t.y + (a.toolTipLineHeight - a.fontSize) / 2 + a.toolTipLineHeight * i + a.toolTipPadding + 1;h && (n = t.x - c - d + 2 * a.toolTipPadding), o.fillRect(n, l, r, a.fontSize), o.closePath();}}), e.forEach(function (e, i) {var n = t.x + d + 2 * a.toolTipPadding + r + s;h && (n = t.x - c - d + 2 * a.toolTipPadding + +r + s);var x = t.y + (a.toolTipLineHeight - a.fontSize) / 2 + a.toolTipLineHeight * i + a.toolTipPadding;o.beginPath(), o.setFontSize(a.fontSize), o.setFillStyle(l.fontColor), o.fillText(e.text, n, x + a.fontSize), o.closePath(), o.stroke();}));}function drawYAxisTitle(e, t, i, a) {var o = i.xAxisHeight + (t.height - i.xAxisHeight - measureText(e)) / 2;a.save(), a.beginPath(), a.setFontSize(i.fontSize), a.setFillStyle(t.yAxis.titleFontColor || \"#333333\"), a.translate(0, t.height), a.rotate(-90 * Math.PI / 180), a.fillText(e, o, t.padding[3] + .5 * i.fontSize), a.closePath(), a.stroke(), a.restore();}function drawColumnDataPoints(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,n = t.chartData.xAxisData,l = n.xAxisPoints,r = n.eachSpacing,s = assign({}, { type: \"group\", width: r / 2, meter: { border: 4, fillColor: \"#FFFFFF\" } }, t.extra.column),d = [];a.save();var h = -2,x = l.length + 2;return t._scrollDistance_ && 0 !== t._scrollDistance_ && !0 === t.enableScroll && (a.translate(t._scrollDistance_, 0), h = Math.floor(-t._scrollDistance_ / r) - 2, x = h + t.xAxis.itemCount + 4), t.tooltip && t.tooltip.textList && t.tooltip.textList.length && 1 === o && drawToolTipSplitArea(t.tooltip.offset.x, t, i, a, r), e.forEach(function (n, c) {var p, g, y;p = [].concat(t.chartData.yAxisData.ranges[n.index]), g = p.pop(), y = p.shift();var f = n.data;switch (s.type) {case \"group\":var u = getDataPoints(f, g, y, l, r, t, i, o),m = getStackDataPoints(f, g, y, l, r, t, i, c, e, o);d.push(m), u = fixColumeData(u, r, e.length, c, i, t);for (var _e12, _o13 = 0; _o13 < u.length; _o13++) {if (_e12 = u[_o13], null !== _e12 && _o13 > h && _o13 < x) {a.beginPath(), a.setStrokeStyle(_e12.color || n.color), a.setLineWidth(1), a.setFillStyle(_e12.color || n.color);var S = _e12.x - _e12.width / 2,T = t.height - _e12.y - t.area[2];a.moveTo(S - 1, _e12.y), a.lineTo(S + _e12.width - 2, _e12.y), a.lineTo(S + _e12.width - 2, t.height - t.area[2]), a.lineTo(S, t.height - t.area[2]), a.lineTo(S, _e12.y), a.closePath(), a.stroke(), a.fill();}};break;case \"stack\":var u = getStackDataPoints(f, g, y, l, r, t, i, c, e, o);d.push(u), u = fixColumeStackData(u, r, e.length, c, i, t, e);for (var _e13, _o14 = 0; _o14 < u.length; _o14++) {if (_e13 = u[_o14], null !== _e13 && _o14 > h && _o14 < x) {a.beginPath(), a.setFillStyle(_e13.color || n.color);var S = _e13.x - _e13.width / 2 + 1,T = t.height - _e13.y - t.area[2],A = t.height - _e13.y0 - t.area[2];0 < c && (T -= A), a.moveTo(S, _e13.y), a.fillRect(S, _e13.y, _e13.width - 2, T), a.closePath(), a.fill();}};break;case \"meter\":var u = getDataPoints(f, g, y, l, r, t, i, o);if (d.push(u), u = fixColumeMeterData(u, r, e.length, c, i, t, s.meter.border), 0 == c) {for (var _e14, _o15 = 0; _o15 < u.length; _o15++) {if (_e14 = u[_o15], null !== _e14 && _o15 > h && _o15 < x) {a.beginPath(), a.setFillStyle(s.meter.fillColor);var S = _e14.x - _e14.width / 2,T = t.height - _e14.y - t.area[2];a.moveTo(S, _e14.y), a.fillRect(S, _e14.y, _e14.width, T), a.closePath(), a.fill(), 0 < s.meter.border && (a.beginPath(), a.setStrokeStyle(n.color), a.setLineWidth(s.meter.border * t.pixelRatio), a.moveTo(S + .5 * s.meter.border, _e14.y + T), a.lineTo(S + .5 * s.meter.border, _e14.y + .5 * s.meter.border), a.lineTo(S + _e14.width - .5 * s.meter.border, _e14.y + .5 * s.meter.border), a.lineTo(S + _e14.width - .5 * s.meter.border, _e14.y + T), a.stroke());}}} else for (var _e15, _o16 = 0; _o16 < u.length; _o16++) {if (_e15 = u[_o16], null !== _e15 && _o16 > h && _o16 < x) {a.beginPath(), a.setFillStyle(_e15.color || n.color);var S = _e15.x - _e15.width / 2,T = t.height - _e15.y - t.area[2];a.moveTo(S, _e15.y), a.fillRect(S, _e15.y, _e15.width, T), a.closePath(), a.fill();}}}}), !1 !== t.dataLabel && 1 === o && e.forEach(function (n, d) {var h, x, c;h = [].concat(t.chartData.yAxisData.ranges[n.index]), x = h.pop(), c = h.shift();var p = n.data;switch (s.type) {case \"group\":var g = getDataPoints(p, x, c, l, r, t, i, o);g = fixColumeData(g, r, e.length, d, i, t), drawPointText(g, n, i, a);break;case \"stack\":var g = getStackDataPoints(p, x, c, l, r, t, i, d, e, o);drawPointText(g, n, i, a);break;case \"meter\":var g = getDataPoints(p, x, c, l, r, t, i, o);drawPointText(g, n, i, a);}}), a.restore(), { xAxisPoints: l, calPoints: d, eachSpacing: r };}function drawCandleDataPoints(e, t, a, i, o) {var n = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 1,l = assign({}, { color: {}, average: {} }, a.extra.candle);l.color = assign({}, { upLine: \"#f04864\", upFill: \"#f04864\", downLine: \"#2fc25b\", downFill: \"#2fc25b\" }, l.color), l.average = assign({}, { show: !1, name: [], day: [], color: i.colors }, l.average), a.extra.candle = l;var r = a.chartData.xAxisData,s = r.xAxisPoints,d = r.eachSpacing,h = [];o.save();var x = -2,c = s.length + 2,p = 0,g = a.width + d;return a._scrollDistance_ && 0 !== a._scrollDistance_ && !0 === a.enableScroll && (o.translate(a._scrollDistance_, 0), x = Math.floor(-a._scrollDistance_ / d) - 2, c = x + a.xAxis.itemCount + 4, p = -a._scrollDistance_ - d + a.area[3], g = p + (a.xAxis.itemCount + 4) * d), l.average.show && t.forEach(function (e) {var t, l, r;t = [].concat(a.chartData.yAxisData.ranges[e.index]), l = t.pop(), r = t.shift();var h = e.data,x = getDataPoints(h, l, r, s, d, a, i, n),c = splitPoints(x);for (var _t10, _a9 = 0; _a9 < c.length; _a9++) {if (_t10 = c[_a9], o.beginPath(), o.setStrokeStyle(e.color), o.setLineWidth(1), 1 === _t10.length) o.moveTo(_t10[0].x, _t10[0].y), o.arc(_t10[0].x, _t10[0].y, 1, 0, 2 * Math.PI);else {o.moveTo(_t10[0].x, _t10[0].y);var _e16 = 0;for (var _i11, _a10 = 0; _a10 < _t10.length; _a10++) {if (_i11 = _t10[_a10], 0 == _e16 && _i11.x > p && (o.moveTo(_i11.x, _i11.y), _e16 = 1), 0 < _a10 && _i11.x > p && _i11.x < g) {var y = createCurveControlPoints(_t10, _a10 - 1);o.bezierCurveTo(y.ctrA.x, y.ctrA.y, y.ctrB.x, y.ctrB.y, _i11.x, _i11.y);}}o.moveTo(_t10[0].x, _t10[0].y);}o.closePath(), o.stroke();}}), e.forEach(function (e) {var t, r, p;t = [].concat(a.chartData.yAxisData.ranges[e.index]), r = t.pop(), p = t.shift();var g = e.data,y = getCandleDataPoints(g, r, p, s, d, a, i, n);h.push(y);var f = splitPoints(y);for (var _t11 = 0; _t11 < f[0].length; _t11++) {if (_t11 > x && _t11 < c) {var _e17 = f[0][_t11];o.beginPath(), 0 < g[_t11][1] - g[_t11][0] ? (o.setStrokeStyle(l.color.upLine), o.setFillStyle(l.color.upFill), o.setLineWidth(1 * a.pixelRatio), o.moveTo(_e17[3].x, _e17[3].y), o.lineTo(_e17[1].x, _e17[1].y), o.lineTo(_e17[1].x - d / 4, _e17[1].y), o.lineTo(_e17[0].x - d / 4, _e17[0].y), o.lineTo(_e17[0].x, _e17[0].y), o.lineTo(_e17[2].x, _e17[2].y), o.lineTo(_e17[0].x, _e17[0].y), o.lineTo(_e17[0].x + d / 4, _e17[0].y), o.lineTo(_e17[1].x + d / 4, _e17[1].y), o.lineTo(_e17[1].x, _e17[1].y), o.moveTo(_e17[3].x, _e17[3].y)) : (o.setStrokeStyle(l.color.downLine), o.setFillStyle(l.color.downFill), o.setLineWidth(1 * a.pixelRatio), o.moveTo(_e17[3].x, _e17[3].y), o.lineTo(_e17[0].x, _e17[0].y), o.lineTo(_e17[0].x - d / 4, _e17[0].y), o.lineTo(_e17[1].x - d / 4, _e17[1].y), o.lineTo(_e17[1].x, _e17[1].y), o.lineTo(_e17[2].x, _e17[2].y), o.lineTo(_e17[1].x, _e17[1].y), o.lineTo(_e17[1].x + d / 4, _e17[1].y), o.lineTo(_e17[0].x + d / 4, _e17[0].y), o.lineTo(_e17[0].x, _e17[0].y), o.moveTo(_e17[3].x, _e17[3].y)), o.closePath(), o.fill(), o.stroke();}}}), o.restore(), { xAxisPoints: s, calPoints: h, eachSpacing: d };}function drawAreaDataPoints(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,n = assign({}, { type: \"straight\", opacity: .2, addLine: !1, width: 2, gradient: !1 }, t.extra.area);var l = t.chartData.xAxisData,r = l.xAxisPoints,s = l.eachSpacing,d = t.height - t.area[2],h = [];a.save();var x = 0,c = t.width + s;return t._scrollDistance_ && 0 !== t._scrollDistance_ && !0 === t.enableScroll && (a.translate(t._scrollDistance_, 0), x = -t._scrollDistance_ - s + t.area[3], c = x + (t.xAxis.itemCount + 4) * s), e.forEach(function (e) {var l, p, g;l = [].concat(t.chartData.yAxisData.ranges[e.index]), p = l.pop(), g = l.shift();var y = e.data,f = getDataPoints(y, p, g, r, s, t, i, o);h.push(f);var u = splitPoints(f);for (var _o17, _l7 = 0; _l7 < u.length; _l7++) {if (_o17 = u[_l7], a.beginPath(), a.setStrokeStyle(hexToRgb(e.color, n.opacity)), n.gradient) {var _i12 = a.createLinearGradient(0, t.area[0], 0, t.height - t.area[2]);_i12.addColorStop(\"0\", hexToRgb(e.color, n.opacity)), _i12.addColorStop(\"1.0\", hexToRgb(\"#FFFFFF\", .1)), a.setFillStyle(_i12);} else a.setFillStyle(hexToRgb(e.color, n.opacity));if (a.setLineWidth(n.width * t.pixelRatio), 1 < _o17.length) {var _e18 = _o17[0],_t12 = _o17[_o17.length - 1];a.moveTo(_e18.x, _e18.y);var _i13 = 0;if (\"curve\" === n.type) {for (var _e19, _t13 = 0; _t13 < _o17.length; _t13++) {if (_e19 = _o17[_t13], 0 == _i13 && _e19.x > x && (a.moveTo(_e19.x, _e19.y), _i13 = 1), 0 < _t13 && _e19.x > x && _e19.x < c) {var _i14 = createCurveControlPoints(_o17, _t13 - 1);a.bezierCurveTo(_i14.ctrA.x, _i14.ctrA.y, _i14.ctrB.x, _i14.ctrB.y, _e19.x, _e19.y);}}} else for (var _e20, _t14 = 0; _t14 < _o17.length; _t14++) {_e20 = _o17[_t14], 0 == _i13 && _e20.x > x && (a.moveTo(_e20.x, _e20.y), _i13 = 1), 0 < _t14 && _e20.x > x && _e20.x < c && a.lineTo(_e20.x, _e20.y);}a.lineTo(_t12.x, d), a.lineTo(_e18.x, d), a.lineTo(_e18.x, _e18.y);} else {var _e21 = _o17[0];a.moveTo(_e21.x - s / 2, _e21.y), a.lineTo(_e21.x + s / 2, _e21.y), a.lineTo(_e21.x + s / 2, d), a.lineTo(_e21.x - s / 2, d), a.moveTo(_e21.x - s / 2, _e21.y);}if (a.closePath(), a.fill(), n.addLine) {if (\"dash\" == e.lineType) {var _i15 = e.dashLength ? e.dashLength : 8;_i15 *= t.pixelRatio, a.setLineDash([_i15, _i15]);}if (a.beginPath(), a.setStrokeStyle(e.color), a.setLineWidth(n.width * t.pixelRatio), 1 === _o17.length) a.moveTo(_o17[0].x, _o17[0].y), a.arc(_o17[0].x, _o17[0].y, 1, 0, 2 * Math.PI);else {a.moveTo(_o17[0].x, _o17[0].y);var _e22 = 0;if (\"curve\" === n.type) {for (var _t15, _i16 = 0; _i16 < _o17.length; _i16++) {if (_t15 = _o17[_i16], 0 == _e22 && _t15.x > x && (a.moveTo(_t15.x, _t15.y), _e22 = 1), 0 < _i16 && _t15.x > x && _t15.x < c) {var _e23 = createCurveControlPoints(_o17, _i16 - 1);a.bezierCurveTo(_e23.ctrA.x, _e23.ctrA.y, _e23.ctrB.x, _e23.ctrB.y, _t15.x, _t15.y);}}} else for (var _t16, _i17 = 0; _i17 < _o17.length; _i17++) {_t16 = _o17[_i17], 0 == _e22 && _t16.x > x && (a.moveTo(_t16.x, _t16.y), _e22 = 1), 0 < _i17 && _t16.x > x && _t16.x < c && a.lineTo(_t16.x, _t16.y);}a.moveTo(_o17[0].x, _o17[0].y);}a.stroke(), a.setLineDash([]);}}!1 !== t.dataPointShape && drawPointShape(f, e.color, e.pointShape, a, t);}), !1 !== t.dataLabel && 1 === o && e.forEach(function (e) {var n, l, d;n = [].concat(t.chartData.yAxisData.ranges[e.index]), l = n.pop(), d = n.shift();var h = e.data,x = getDataPoints(h, l, d, r, s, t, i, o);drawPointText(x, e, i, a);}), a.restore(), { xAxisPoints: r, calPoints: h, eachSpacing: s };}function drawLineDataPoints(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,n = assign({}, { type: \"straight\", width: 2 }, t.extra.line);n.width *= t.pixelRatio;var l = t.chartData.xAxisData,r = l.xAxisPoints,s = l.eachSpacing;var d = [];a.save();var h = 0,x = t.width + s;return t._scrollDistance_ && 0 !== t._scrollDistance_ && !0 === t.enableScroll && (a.translate(t._scrollDistance_, 0), h = -t._scrollDistance_ - s + t.area[3], x = h + (t.xAxis.itemCount + 4) * s), e.forEach(function (e) {var l, c, p;l = [].concat(t.chartData.yAxisData.ranges[e.index]), c = l.pop(), p = l.shift();var g = e.data,y = getDataPoints(g, c, p, r, s, t, i, o);d.push(y);var f = splitPoints(y);if (\"dash\" == e.lineType) {var _i18 = e.dashLength ? e.dashLength : 8;_i18 *= t.pixelRatio, a.setLineDash([_i18, _i18]);}a.beginPath(), a.setStrokeStyle(e.color), a.setLineWidth(n.width), f.forEach(function (e) {if (1 === e.length) a.moveTo(e[0].x, e[0].y), a.arc(e[0].x, e[0].y, 1, 0, 2 * Math.PI);else {a.moveTo(e[0].x, e[0].y);var _i19 = 0;if (\"curve\" === n.type) {for (var _o18, _n15 = 0; _n15 < e.length; _n15++) {if (_o18 = e[_n15], 0 == _i19 && _o18.x > h && (a.moveTo(_o18.x, _o18.y), _i19 = 1), 0 < _n15 && _o18.x > h && _o18.x < x) {var t = createCurveControlPoints(e, _n15 - 1);a.bezierCurveTo(t.ctrA.x, t.ctrA.y, t.ctrB.x, t.ctrB.y, _o18.x, _o18.y);}}} else for (var _t17, _o19 = 0; _o19 < e.length; _o19++) {_t17 = e[_o19], 0 == _i19 && _t17.x > h && (a.moveTo(_t17.x, _t17.y), _i19 = 1), 0 < _o19 && _t17.x > h && _t17.x < x && a.lineTo(_t17.x, _t17.y);}a.moveTo(e[0].x, e[0].y);}}), a.stroke(), a.setLineDash([]), !1 !== t.dataPointShape && drawPointShape(y, e.color, e.pointShape, a, t);}), !1 !== t.dataLabel && 1 === o && e.forEach(function (e) {var n, l, d;n = [].concat(t.chartData.yAxisData.ranges[e.index]), l = n.pop(), d = n.shift();var h = e.data,x = getDataPoints(h, l, d, r, s, t, i, o);drawPointText(x, e, i, a);}), a.restore(), { xAxisPoints: r, calPoints: d, eachSpacing: s };}function drawMixDataPoints(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,n = t.chartData.xAxisData,l = n.xAxisPoints,r = n.eachSpacing,s = t.height - t.area[2],d = [];var h = 0,x = 0;e.forEach(function (e) {\"column\" == e.type && (x += 1);}), a.save();var c = -2,p = l.length + 2,g = 0,y = t.width + r;if (t._scrollDistance_ && 0 !== t._scrollDistance_ && !0 === t.enableScroll && (a.translate(t._scrollDistance_, 0), c = Math.floor(-t._scrollDistance_ / r) - 2, p = c + t.xAxis.itemCount + 4, g = -t._scrollDistance_ - r + t.area[3], y = g + (t.xAxis.itemCount + 4) * r), e.forEach(function (e) {var n, f, u;n = [].concat(t.chartData.yAxisData.ranges[e.index]), f = n.pop(), u = n.shift();var m = e.data,S = getDataPoints(m, f, u, l, r, t, i, o);if (d.push(S), \"column\" == e.type) {S = fixColumeData(S, r, x, h, i, t);for (var _o20, _n16 = 0; _n16 < S.length; _n16++) {if (_o20 = S[_n16], null !== _o20 && _n16 > c && _n16 < p) {a.beginPath(), a.setStrokeStyle(_o20.color || e.color), a.setLineWidth(1), a.setFillStyle(_o20.color || e.color);var T = _o20.x - _o20.width / 2,A = t.height - _o20.y - t.area[2];a.moveTo(T, _o20.y), a.moveTo(T - 1, _o20.y), a.lineTo(T + _o20.width - 2, _o20.y), a.lineTo(T + _o20.width - 2, t.height - t.area[2]), a.lineTo(T, t.height - t.area[2]), a.lineTo(T, _o20.y), a.closePath(), a.stroke(), a.fill(), a.closePath(), a.fill();}}h += 1;}if (\"area\" == e.type) {var _o21 = splitPoints(S);for (var _n17, _l8 = 0; _l8 < _o21.length; _l8++) {if (_n17 = _o21[_l8], a.beginPath(), a.setStrokeStyle(e.color), a.setFillStyle(hexToRgb(e.color, .2)), a.setLineWidth(2 * t.pixelRatio), 1 < _n17.length) {var b = _n17[0];var _t18 = _n17[_n17.length - 1];a.moveTo(b.x, b.y);var _i20 = 0;if (\"curve\" === e.style) {for (var _e24, _t19 = 0; _t19 < _n17.length; _t19++) {if (_e24 = _n17[_t19], 0 == _i20 && _e24.x > g && (a.moveTo(_e24.x, _e24.y), _i20 = 1), 0 < _t19 && _e24.x > g && _e24.x < y) {var P = createCurveControlPoints(_n17, _t19 - 1);a.bezierCurveTo(P.ctrA.x, P.ctrA.y, P.ctrB.x, P.ctrB.y, _e24.x, _e24.y);}}} else for (var _e25, _t20 = 0; _t20 < _n17.length; _t20++) {_e25 = _n17[_t20], 0 == _i20 && _e25.x > g && (a.moveTo(_e25.x, _e25.y), _i20 = 1), 0 < _t20 && _e25.x > g && _e25.x < y && a.lineTo(_e25.x, _e25.y);}a.lineTo(_t18.x, s), a.lineTo(b.x, s), a.lineTo(b.x, b.y);} else {var _e26 = _n17[0];a.moveTo(_e26.x - r / 2, _e26.y), a.lineTo(_e26.x + r / 2, _e26.y), a.lineTo(_e26.x + r / 2, s), a.lineTo(_e26.x - r / 2, s), a.moveTo(_e26.x - r / 2, _e26.y);}a.closePath(), a.fill();}}if (\"line\" == e.type) {var _ = splitPoints(S);_.forEach(function (i) {if (\"dash\" == e.lineType) {var _i21 = e.dashLength ? e.dashLength : 8;_i21 *= t.pixelRatio, a.setLineDash([_i21, _i21]);}if (a.beginPath(), a.setStrokeStyle(e.color), a.setLineWidth(2 * t.pixelRatio), 1 === i.length) a.moveTo(i[0].x, i[0].y), a.arc(i[0].x, i[0].y, 1, 0, 2 * Math.PI);else {a.moveTo(i[0].x, i[0].y);var _t21 = 0;if (\"curve\" == e.style) {for (var _e27, _n18 = 0; _n18 < i.length; _n18++) {if (_e27 = i[_n18], 0 == _t21 && _e27.x > g && (a.moveTo(_e27.x, _e27.y), _t21 = 1), 0 < _n18 && _e27.x > g && _e27.x < y) {var o = createCurveControlPoints(i, _n18 - 1);a.bezierCurveTo(o.ctrA.x, o.ctrA.y, o.ctrB.x, o.ctrB.y, _e27.x, _e27.y);}}} else for (var _e28, _o22 = 0; _o22 < i.length; _o22++) {_e28 = i[_o22], 0 == _t21 && _e28.x > g && (a.moveTo(_e28.x, _e28.y), _t21 = 1), 0 < _o22 && _e28.x > g && _e28.x < y && a.lineTo(_e28.x, _e28.y);}a.moveTo(i[0].x, i[0].y);}a.stroke(), a.setLineDash([]);});}\"point\" == e.type && (e.addPoint = !0), !0 == e.addPoint && \"column\" !== e.type && drawPointShape(S, e.color, e.pointShape, a, t);}), !1 !== t.dataLabel && 1 === o) {var h = 0;e.forEach(function (e) {var n, s, d;n = [].concat(t.chartData.yAxisData.ranges[e.index]), s = n.pop(), d = n.shift();var c = e.data,p = getDataPoints(c, s, d, l, r, t, i, o);\"column\" === e.type ? (p = fixColumeData(p, r, x, h, i, t), drawPointText(p, e, i, a), h += 1) : drawPointText(p, e, i, a);});}return a.restore(), { xAxisPoints: l, calPoints: d, eachSpacing: r };}function drawToolTipBridge(e, t, i, a, o, n) {var l = e.extra.tooltip || {};l.horizentalLine && e.tooltip && 1 === a && (\"line\" == e.type || \"area\" == e.type || \"column\" == e.type || \"candle\" == e.type || \"mix\" == e.type) && drawToolTipHorizentalLine(e, t, i, o, n), i.save(), e._scrollDistance_ && 0 !== e._scrollDistance_ && !0 === e.enableScroll && i.translate(e._scrollDistance_, 0), e.tooltip && e.tooltip.textList && e.tooltip.textList.length && 1 === a && drawToolTip(e.tooltip.textList, e.tooltip.offset, e, t, i, o, n), i.restore();}function drawXAxis(e, t, i, a) {var o = Math.ceil;var n = t.chartData.xAxisData,l = n.xAxisPoints,r = n.startX,s = n.endX,d = n.eachSpacing;var h = \"center\";(\"line\" == t.type || \"area\" == t.type) && (h = t.xAxis.boundaryGap);var x = t.height - t.area[2],c = t.area[0];if (t.enableScroll && t.xAxis.scrollShow) {var p = t.height - t.area[2] + i.xAxisHeight,g = s - r,y = d * (l.length - 1),f = 0;t._scrollDistance_ && (f = -t._scrollDistance_ * g / y), a.beginPath(), a.setLineCap(\"round\"), a.setLineWidth(6 * t.pixelRatio), a.setStrokeStyle(t.xAxis.scrollBackgroundColor || \"#EFEBEF\"), a.moveTo(r, p), a.lineTo(s, p), a.stroke(), a.closePath(), a.beginPath(), a.setLineCap(\"round\"), a.setLineWidth(6 * t.pixelRatio), a.setStrokeStyle(t.xAxis.scrollColor || \"#A6A6A6\"), a.moveTo(r + f, p), a.lineTo(r + f + g * g / y, p), a.stroke(), a.closePath(), a.setLineCap(\"butt\");}if (a.save(), t._scrollDistance_ && 0 !== t._scrollDistance_ && a.translate(t._scrollDistance_, 0), !0 === t.xAxis.calibration && (a.setStrokeStyle(t.xAxis.gridColor || \"#cccccc\"), a.setLineCap(\"butt\"), a.setLineWidth(1 * t.pixelRatio), l.forEach(function (e, i) {0 < i && (a.beginPath(), a.moveTo(e - d / 2, x), a.lineTo(e - d / 2, x + 3 * t.pixelRatio), a.closePath(), a.stroke());})), !0 !== t.xAxis.disableGrid && (a.setStrokeStyle(t.xAxis.gridColor || \"#cccccc\"), a.setLineCap(\"butt\"), a.setLineWidth(1 * t.pixelRatio), \"dash\" == t.xAxis.gridType && a.setLineDash([t.xAxis.dashLength, t.xAxis.dashLength]), t.xAxis.gridEval = t.xAxis.gridEval || 1, l.forEach(function (e, i) {0 == i % t.xAxis.gridEval && (a.beginPath(), a.moveTo(e, x), a.lineTo(e, c), a.stroke());}), a.setLineDash([])), !0 !== t.xAxis.disabled) {var _n19 = e.length;t.xAxis.labelCount && (_n19 = t.xAxis.itemCount ? o(e.length / t.xAxis.itemCount * t.xAxis.labelCount) : t.xAxis.labelCount, _n19 -= 1);var _r8 = o(e.length / _n19),_s3 = [],_c = e.length;for (var _t22 = 0; _t22 < _c; _t22++) {0 == _t22 % _r8 ? _s3.push(e[_t22]) : _s3.push(\"\");}_s3[_c - 1] = e[_c - 1];var u = t.xAxis.fontSize || i.fontSize;0 === i._xAxisTextAngle_ ? _s3.forEach(function (e, o) {var n = -measureText(e + \"\", u) / 2;\"center\" == h && (n += d / 2);var r = 0;t.xAxis.scrollShow && (r = 6 * t.pixelRatio), a.beginPath(), a.setFontSize(u), a.setFillStyle(t.xAxis.fontColor || \"#666666\"), a.fillText(e + \"\", l[o] + n, x + u + (i.xAxisHeight - r - u) / 2), a.closePath(), a.stroke();}) : _s3.forEach(function (e, o) {a.save(), a.beginPath(), a.setFontSize(u), a.setFillStyle(t.xAxis.fontColor || \"#666666\");var n = measureText(e + \"\", u),r = -n;\"center\" == h && (r += d / 2);var s = calRotateTranslate(l[o] + d / 2, x + u / 2 + 5, t.height),c = s.transX,p = s.transY;a.rotate(-1 * i._xAxisTextAngle_), a.translate(c, p), a.fillText(e + \"\", l[o] + r, x + u + 5), a.closePath(), a.stroke(), a.restore();});}a.restore(), t.xAxis.axisLine && (a.beginPath(), a.setStrokeStyle(t.xAxis.axisLineColor), a.setLineWidth(1 * t.pixelRatio), a.moveTo(r, t.height - t.area[2]), a.lineTo(s, t.height - t.area[2]), a.stroke());}function drawYAxisGrid(e, t, i, a) {if (!0 === t.yAxis.disableGrid) return;var o = t.height - t.area[0] - t.area[2],n = o / t.yAxis.splitNumber,l = t.area[3],r = t.chartData.xAxisData.xAxisPoints,s = t.chartData.xAxisData.eachSpacing,d = s * (r.length - 1),h = [];for (var _o23 = 0; _o23 < t.yAxis.splitNumber + 1; _o23++) {h.push(t.height - t.area[2] - n * _o23);}a.save(), t._scrollDistance_ && 0 !== t._scrollDistance_ && a.translate(t._scrollDistance_, 0), \"dash\" == t.yAxis.gridType && a.setLineDash([t.yAxis.dashLength, t.yAxis.dashLength]), a.setStrokeStyle(t.yAxis.gridColor), a.setLineWidth(1 * t.pixelRatio), h.forEach(function (e) {a.beginPath(), a.moveTo(l, e), a.lineTo(l + d, e), a.stroke();}), a.setLineDash([]), a.restore();}function drawYAxis(e, t, a, o) {if (!0 === t.yAxis.disabled) return;var i = t.height - t.area[0] - t.area[2],n = i / t.yAxis.splitNumber,l = t.area[3],r = t.width - t.area[1],s = t.height - t.area[2],d = s + a.xAxisHeight;t.xAxis.scrollShow && (d -= 3 * t.pixelRatio), t.xAxis.rotateLabel && (d = t.height - t.area[2] + 3), o.beginPath(), o.setFillStyle(t.background || \"#ffffff\"), 0 > t._scrollDistance_ && o.fillRect(0, 0, l, d), !0 == t.enableScroll && o.fillRect(r, 0, t.width, d), o.closePath(), o.stroke();var h = [];for (var _l9 = 0; _l9 <= t.yAxis.splitNumber; _l9++) {h.push(t.area[0] + n * _l9);}var x = t.area[3],c = t.width - t.area[1];var _loop3 = function _loop3(_n21, _l10) {if (_n21 = t.yAxis.data[_l10], !0 !== _n21.disabled) {var _e29 = t.chartData.yAxisData.rangesFormat[_l10],_i22 = _n21.fontSize || a.fontSize,_r9 = t.chartData.yAxisData.yAxisWidth[_l10];if (_e29.forEach(function (e, a) {var l = h[a] ? h[a] : s;o.beginPath(), o.setFontSize(_i22), o.setLineWidth(1 * t.pixelRatio), o.setStrokeStyle(_n21.axisLineColor || \"#cccccc\"), o.setFillStyle(_n21.fontColor || \"#666666\"), \"left\" == _r9.position ? (o.fillText(e + \"\", x - _r9.width, l + _i22 / 2), !0 == _n21.calibration && (o.moveTo(x, l), o.lineTo(x - 3 * t.pixelRatio, l))) : (o.fillText(e + \"\", c + 4 * t.pixelRatio, l + _i22 / 2), !0 == _n21.calibration && (o.moveTo(c, l), o.lineTo(c + 3 * t.pixelRatio, l))), o.closePath(), o.stroke();}), !1 !== _n21.axisLine && (o.beginPath(), o.setStrokeStyle(_n21.axisLineColor || \"#cccccc\"), o.setLineWidth(1 * t.pixelRatio), \"left\" == _r9.position ? (o.moveTo(x, t.height - t.area[2]), o.lineTo(x, t.area[0])) : (o.moveTo(c, t.height - t.area[2]), o.lineTo(c, t.area[0])), o.stroke()), t.yAxis.showTitle) {var _e30 = _n21.titleFontSize || a.fontSize,_i23 = _n21.title;o.beginPath(), o.setFontSize(_e30), o.setFillStyle(_n21.titleFontColor || \"#666666\"), \"left\" == _r9.position ? o.fillText(_i23, x - measureText(_i23, _e30) / 2, t.area[0] - 10 * t.pixelRatio) : o.fillText(_i23, c - measureText(_i23, _e30) / 2, t.area[0] - 10 * t.pixelRatio), o.closePath(), o.stroke();}\"left\" == _r9.position ? x -= _r9.width + t.yAxis.padding : c += _r9.width + t.yAxis.padding;}_n20 = _n21;};for (var _n20, _l10 = 0; _l10 < t.yAxis.data.length; _l10++) {_loop3(_n20, _l10);}}function drawLegend(e, t, i, a, o) {if (!1 === t.legend.show) return;var n = o.legendData,l = n.points,r = n.area,s = t.legend.padding,d = t.legend.fontSize,h = 15 * t.pixelRatio,x = 5 * t.pixelRatio,c = t.legend.itemGap,p = Math.max(t.legend.lineHeight * t.pixelRatio, d);a.beginPath(), a.setLineWidth(t.legend.borderWidth), a.setStrokeStyle(t.legend.borderColor), a.setFillStyle(t.legend.backgroundColor), a.moveTo(r.start.x, r.start.y), a.rect(r.start.x, r.start.y, r.width, r.height), a.closePath(), a.fill(), a.stroke(), l.forEach(function (e, o) {var l = 0,g = 0;l = n.widthArr[o], g = n.heightArr[o];var y = 0,f = 0;\"top\" == t.legend.position || \"bottom\" == t.legend.position ? (y = r.start.x + (r.width - l) / 2, f = r.start.y + s + o * p) : (l = 0 == o ? 0 : n.widthArr[o - 1], y = r.start.x + s + l, f = r.start.y + s + (r.height - g) / 2), a.setFontSize(i.fontSize);for (var _n22, _l11 = 0; _l11 < e.length; _l11++) {switch (_n22 = e[_l11], _n22.area = [0, 0, 0, 0], _n22.area[0] = y, _n22.area[1] = f, _n22.area[3] = f + p, a.beginPath(), a.setLineWidth(1 * t.pixelRatio), a.setStrokeStyle(_n22.show ? _n22.color : t.legend.hiddenColor), a.setFillStyle(_n22.show ? _n22.color : t.legend.hiddenColor), _n22.legendShape) {case \"line\":a.moveTo(y, f + .5 * p - 2 * t.pixelRatio), a.fillRect(y, f + .5 * p - 2 * t.pixelRatio, 15 * t.pixelRatio, 4 * t.pixelRatio);break;case \"triangle\":a.moveTo(y + 7.5 * t.pixelRatio, f + .5 * p - 5 * t.pixelRatio), a.lineTo(y + 2.5 * t.pixelRatio, f + .5 * p + 5 * t.pixelRatio), a.lineTo(y + 12.5 * t.pixelRatio, f + .5 * p + 5 * t.pixelRatio), a.lineTo(y + 7.5 * t.pixelRatio, f + .5 * p - 5 * t.pixelRatio);break;case \"diamond\":a.moveTo(y + 7.5 * t.pixelRatio, f + .5 * p - 5 * t.pixelRatio), a.lineTo(y + 2.5 * t.pixelRatio, f + .5 * p), a.lineTo(y + 7.5 * t.pixelRatio, f + .5 * p + 5 * t.pixelRatio), a.lineTo(y + 12.5 * t.pixelRatio, f + .5 * p), a.lineTo(y + 7.5 * t.pixelRatio, f + .5 * p - 5 * t.pixelRatio);break;case \"circle\":a.moveTo(y + 7.5 * t.pixelRatio, f + .5 * p), a.arc(y + 7.5 * t.pixelRatio, f + .5 * p, 5 * t.pixelRatio, 0, 2 * Math.PI);break;case \"rect\":a.moveTo(y, f + .5 * p - 5 * t.pixelRatio), a.fillRect(y, f + .5 * p - 5 * t.pixelRatio, 15 * t.pixelRatio, 10 * t.pixelRatio);break;default:a.moveTo(y, f + .5 * p - 5 * t.pixelRatio), a.fillRect(y, f + .5 * p - 5 * t.pixelRatio, 15 * t.pixelRatio, 10 * t.pixelRatio);}a.closePath(), a.fill(), a.stroke(), y += h + x;a.beginPath(), a.setFontSize(d), a.setFillStyle(_n22.show ? t.legend.fontColor : t.legend.hiddenColor), a.fillText(_n22.name, y, f + (.5 * p + .5 * d - 2)), a.closePath(), a.stroke(), \"top\" == t.legend.position || \"bottom\" == t.legend.position ? (y += measureText(_n22.name, d) + c, _n22.area[2] = y) : (_n22.area[2] = y + measureText(_n22.name, d) + c, y -= h + x, f += p);}});}function drawPieDataPoints(e, t, a, o) {var n = Math.PI,l = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,r = assign({}, { activeOpacity: .5, activeRadius: 10 * t.pixelRatio, offsetAngle: 0, labelWidth: 15 * t.pixelRatio, ringWidth: 0, border: !1, borderWidth: 2, borderColor: \"#FFFFFF\" }, t.extra.pie),s = { x: t.area[3] + (t.width - t.area[1] - t.area[3]) / 2, y: t.area[0] + (t.height - t.area[0] - t.area[2]) / 2 };0 == a.pieChartLinePadding && (a.pieChartLinePadding = r.activeRadius);var d = Math.min((t.width - t.area[1] - t.area[3]) / 2 - a.pieChartLinePadding - a.pieChartTextPadding - a._pieTextMaxLength_, (t.height - t.area[0] - t.area[2]) / 2 - a.pieChartLinePadding - a.pieChartTextPadding);e = getPieDataPoints(e, d, l);var h = r.activeRadius;if (e = e.map(function (e) {return e._start_ += r.offsetAngle * n / 180, e;}), e.forEach(function (e, i) {t.tooltip && t.tooltip.index == i && (o.beginPath(), o.setFillStyle(hexToRgb(e.color, t.extra.pie.activeOpacity || .5)), o.moveTo(s.x, s.y), o.arc(s.x, s.y, e._radius_ + h, e._start_, e._start_ + 2 * e._proportion_ * n), o.closePath(), o.fill()), o.beginPath(), o.setLineWidth(r.borderWidth * t.pixelRatio), o.lineJoin = \"round\", o.setStrokeStyle(r.borderColor), o.setFillStyle(e.color), o.moveTo(s.x, s.y), o.arc(s.x, s.y, e._radius_, e._start_, e._start_ + 2 * e._proportion_ * n), o.closePath(), o.fill(), !0 == r.border && o.stroke();}), \"ring\" === t.type) {var x = .6 * d;\"number\" == typeof t.extra.pie.ringWidth && 0 < t.extra.pie.ringWidth && (x = Math.max(0, d - t.extra.pie.ringWidth)), o.beginPath(), o.setFillStyle(t.background || \"#ffffff\"), o.moveTo(s.x, s.y), o.arc(s.x, s.y, x, 0, 2 * n), o.closePath(), o.fill();}if (!1 !== t.dataLabel && 1 === l) {for (var c = !1, p = 0, g = e.length; p < g; p++) {if (0 < e[p].data) {c = !0;break;}}c && drawPieText(e, t, a, o, d, s);}return 1 === l && \"ring\" === t.type && drawRingTitle(t, a, o, s), { center: s, radius: d, series: e };}function drawRoseDataPoints(e, t, a, o) {var n = Math.PI,l = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,r = assign({}, { type: \"area\", activeOpacity: .5, activeRadius: 10 * t.pixelRatio, offsetAngle: 0, labelWidth: 15 * t.pixelRatio, border: !1, borderWidth: 2, borderColor: \"#FFFFFF\" }, t.extra.rose);0 == a.pieChartLinePadding && (a.pieChartLinePadding = r.activeRadius);var s = { x: t.area[3] + (t.width - t.area[1] - t.area[3]) / 2, y: t.area[0] + (t.height - t.area[0] - t.area[2]) / 2 },d = Math.min((t.width - t.area[1] - t.area[3]) / 2 - a.pieChartLinePadding - a.pieChartTextPadding - a._pieTextMaxLength_, (t.height - t.area[0] - t.area[2]) / 2 - a.pieChartLinePadding - a.pieChartTextPadding),h = r.minRadius || .5 * d;e = getRoseDataPoints(e, r.type, h, d, l);var x = r.activeRadius;if (e = e.map(function (e) {return e._start_ += (r.offsetAngle || 0) * n / 180, e;}), e.forEach(function (e, i) {t.tooltip && t.tooltip.index == i && (o.beginPath(), o.setFillStyle(hexToRgb(e.color, r.activeOpacity || .5)), o.moveTo(s.x, s.y), o.arc(s.x, s.y, x + e._radius_, e._start_, e._start_ + 2 * e._rose_proportion_ * n), o.closePath(), o.fill()), o.beginPath(), o.setLineWidth(r.borderWidth * t.pixelRatio), o.lineJoin = \"round\", o.setStrokeStyle(r.borderColor), o.setFillStyle(e.color), o.moveTo(s.x, s.y), o.arc(s.x, s.y, e._radius_, e._start_, e._start_ + 2 * e._rose_proportion_ * n), o.closePath(), o.fill(), !0 == r.border && o.stroke();}), !1 !== t.dataLabel && 1 === l) {for (var c = !1, p = 0, g = e.length; p < g; p++) {if (0 < e[p].data) {c = !0;break;}}c && drawPieText(e, t, a, o, d, s);}return { center: s, radius: d, series: e };}function drawArcbarDataPoints(e, t, i, a) {var o = Math.PI,n = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,l = assign({}, { startAngle: .75, endAngle: .25, type: \"default\", width: 12 * t.pixelRatio, gap: 2 * t.pixelRatio }, t.extra.arcbar);e = getArcbarDataPoints(e, l, n);var r = l.center ? l.center : { x: t.width / 2, y: t.height / 2 };var s;l.radius ? s = l.radius : (s = Math.min(r.x, r.y), s -= 5 * t.pixelRatio, s -= l.width / 2);for (var _n23, d = 0; d < e.length; d++) {_n23 = e[d], a.setLineWidth(l.width), a.setStrokeStyle(l.backgroundColor || \"#E9E9E9\"), a.setLineCap(\"round\"), a.beginPath(), \"default\" == l.type ? a.arc(r.x, r.y, s - (l.width + l.gap) * d, l.startAngle * o, l.endAngle * o, !1) : a.arc(r.x, r.y, s - (l.width + l.gap) * d, 0, 2 * o, !1), a.stroke(), a.setLineWidth(l.width), a.setStrokeStyle(_n23.color), a.setLineCap(\"round\"), a.beginPath(), a.arc(r.x, r.y, s - (l.width + l.gap) * d, l.startAngle * o, _n23._proportion_ * o, !1), a.stroke();}return drawRingTitle(t, i, a, r), { center: r, radius: s, series: e };}function drawGaugeDataPoints(e, t, a, i, o) {var n = Math.PI,l = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 1,r = assign({}, { type: \"default\", startAngle: .75, endAngle: .25, width: 15, splitLine: { fixRadius: 0, splitNumber: 10, width: 15, color: \"#FFFFFF\", childNumber: 5, childWidth: 5 }, pointer: { width: 15, color: \"auto\" } }, a.extra.gauge);null == r.oldAngle && (r.oldAngle = r.startAngle), null == r.oldData && (r.oldData = 0), e = getGaugeAxisPoints(e, r.startAngle, r.endAngle);var s = { x: a.width / 2, y: a.height / 2 },d = Math.min(s.x, s.y);d -= 5 * a.pixelRatio, d -= r.width / 2;var h = d - r.width,x = 0;if (\"progress\" == r.type) {var c = d - 3 * r.width;o.beginPath();var _e31 = o.createLinearGradient(s.x, s.y - c, s.x, s.y + c);_e31.addColorStop(\"0\", hexToRgb(t[0].color, .3)), _e31.addColorStop(\"1.0\", hexToRgb(\"#FFFFFF\", .1)), o.setFillStyle(_e31), o.arc(s.x, s.y, c, 0, 2 * n, !1), o.fill(), o.setLineWidth(r.width), o.setStrokeStyle(hexToRgb(t[0].color, .3)), o.setLineCap(\"round\"), o.beginPath(), o.arc(s.x, s.y, h, r.startAngle * n, r.endAngle * n, !1), o.stroke(), x = r.startAngle - r.endAngle + 1;var _i24 = x / r.splitLine.splitNumber,p = x / r.splitLine.splitNumber / r.splitLine.childNumber,g = -d - .5 * r.width - r.splitLine.fixRadius,y = -d - r.width - r.splitLine.fixRadius + r.splitLine.width;o.save(), o.translate(s.x, s.y), o.rotate((r.startAngle - 1) * n);var f = r.splitLine.splitNumber * r.splitLine.childNumber + 1,u = t[0].data * l;for (var _e32 = 0; _e32 < f; _e32++) {o.beginPath(), u > _e32 / f ? o.setStrokeStyle(hexToRgb(t[0].color, 1)) : o.setStrokeStyle(hexToRgb(t[0].color, .3)), o.setLineWidth(3 * a.pixelRatio), o.moveTo(g, 0), o.lineTo(y, 0), o.stroke(), o.rotate(p * n);}o.restore(), t = getArcbarDataPoints(t, r, l), o.setLineWidth(r.width), o.setStrokeStyle(t[0].color), o.setLineCap(\"round\"), o.beginPath(), o.arc(s.x, s.y, h, r.startAngle * n, t[0]._proportion_ * n, !1), o.stroke();var m = d - 2.5 * r.width;o.save(), o.translate(s.x, s.y), o.rotate((t[0]._proportion_ - 1) * n), o.beginPath(), o.setLineWidth(r.width / 3);var S = o.createLinearGradient(0, .6 * -m, 0, .6 * m);S.addColorStop(\"0\", hexToRgb(\"#FFFFFF\", 0)), S.addColorStop(\"0.5\", hexToRgb(t[0].color, 1)), S.addColorStop(\"1.0\", hexToRgb(\"#FFFFFF\", 0)), o.setStrokeStyle(S), o.arc(0, 0, m, .85 * n, 1.15 * n, !1), o.stroke(), o.beginPath(), o.setLineWidth(1), o.setStrokeStyle(t[0].color), o.setFillStyle(t[0].color), o.moveTo(-m - r.width / 3 / 2, -4), o.lineTo(-m - r.width / 3 / 2 - 4, 0), o.lineTo(-m - r.width / 3 / 2, 4), o.lineTo(-m - r.width / 3 / 2, -4), o.stroke(), o.fill(), o.restore();} else {o.setLineWidth(r.width), o.setLineCap(\"butt\");for (var _t23, _a11 = 0; _a11 < e.length; _a11++) {_t23 = e[_a11], o.beginPath(), o.setStrokeStyle(_t23.color), o.arc(s.x, s.y, d, _t23._startAngle_ * n, _t23._endAngle_ * n, !1), o.stroke();}o.save(), x = r.startAngle - r.endAngle + 1;var _c2 = x / r.splitLine.splitNumber,_p2 = x / r.splitLine.splitNumber / r.splitLine.childNumber,_g2 = -d - .5 * r.width - r.splitLine.fixRadius,_y = -d - .5 * r.width - r.splitLine.fixRadius + r.splitLine.width,_f = -d - .5 * r.width - r.splitLine.fixRadius + r.splitLine.childWidth;o.translate(s.x, s.y), o.rotate((r.startAngle - 1) * n);for (var _e33 = 0; _e33 < r.splitLine.splitNumber + 1; _e33++) {o.beginPath(), o.setStrokeStyle(r.splitLine.color), o.setLineWidth(2 * a.pixelRatio), o.moveTo(_g2, 0), o.lineTo(_y, 0), o.stroke(), o.rotate(_c2 * n);}o.restore(), o.save(), o.translate(s.x, s.y), o.rotate((r.startAngle - 1) * n);for (var _e34 = 0; _e34 < r.splitLine.splitNumber * r.splitLine.childNumber + 1; _e34++) {o.beginPath(), o.setStrokeStyle(r.splitLine.color), o.setLineWidth(1 * a.pixelRatio), o.moveTo(_g2, 0), o.lineTo(_f, 0), o.stroke(), o.rotate(_p2 * n);}o.restore(), t = getGaugeDataPoints(t, e, r, l);for (var _e35, _a12 = 0; _a12 < t.length; _a12++) {_e35 = t[_a12], o.save(), o.translate(s.x, s.y), o.rotate((_e35._proportion_ - 1) * n), o.beginPath(), o.setFillStyle(_e35.color), o.moveTo(r.pointer.width, 0), o.lineTo(0, -r.pointer.width / 2), o.lineTo(-h, 0), o.lineTo(0, r.pointer.width / 2), o.lineTo(r.pointer.width, 0), o.closePath(), o.fill(), o.beginPath(), o.setFillStyle(\"#FFFFFF\"), o.arc(0, 0, r.pointer.width / 6, 0, 2 * n, !1), o.fill(), o.restore();}!1 !== a.dataLabel && drawGaugeLabel(r, d, s, a, i, o);}return drawRingTitle(a, i, o, s), 1 === l && \"gauge\" === a.type && (a.extra.gauge.oldAngle = t[0]._proportion_, a.extra.gauge.oldData = t[0].data), { center: s, radius: d, innerRadius: h, categories: e, totalAngle: x };}function drawRadarDataPoints(e, t, a, o) {var n = Math.cos,l = Math.sin,r = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,s = assign({}, { gridColor: \"#cccccc\", labelColor: \"#666666\", opacity: .2, gridCount: 3 }, t.extra.radar),d = getRadarCoordinateSeries(t.categories.length),h = { x: t.area[3] + (t.width - t.area[1] - t.area[3]) / 2, y: t.area[0] + (t.height - t.area[0] - t.area[2]) / 2 },x = Math.min(h.x - (getMaxTextListLength(t.categories) + a.radarLabelTextMargin), h.y - a.radarLabelTextMargin);x -= t.padding[1], o.beginPath(), o.setLineWidth(1 * t.pixelRatio), o.setStrokeStyle(s.gridColor), d.forEach(function (e) {var t = convertCoordinateOrigin(x * n(e), x * l(e), h);o.moveTo(h.x, h.y), o.lineTo(t.x, t.y);}), o.stroke(), o.closePath();for (var c = function c(e) {var i = {};o.beginPath(), o.setLineWidth(1 * t.pixelRatio), o.setStrokeStyle(s.gridColor), d.forEach(function (t, a) {var r = convertCoordinateOrigin(x / s.gridCount * e * n(t), x / s.gridCount * e * l(t), h);0 === a ? (i = r, o.moveTo(r.x, r.y)) : o.lineTo(r.x, r.y);}), o.lineTo(i.x, i.y), o.stroke(), o.closePath();}, p = 1; p <= s.gridCount; p++) {c(p);}var g = getRadarDataPoints(d, h, x, e, t, r);return g.forEach(function (e) {if (o.beginPath(), o.setFillStyle(hexToRgb(e.color, s.opacity)), e.data.forEach(function (e, t) {0 === t ? o.moveTo(e.position.x, e.position.y) : o.lineTo(e.position.x, e.position.y);}), o.closePath(), o.fill(), !1 !== t.dataPointShape) {var i = e.data.map(function (e) {return e.position;});drawPointShape(i, e.color, e.pointShape, o, t);}}), drawRadarLabel(d, x, h, t, a, o), { center: h, radius: x, angleList: d };}function normalInt(e, t, a) {a = 0 == a ? 1 : a;for (var o = [], n = 0; n < a; n++) {o[n] = Math.random();}return Math.floor(o.reduce(function (e, t) {return e + t;}) / a * (t - e)) + e;}function collisionNew(e, t, a, o) {var n = !1;for (var l = 0; l < t.length; l++) {if (t[l].area) if (!(e[3] < t[l].area[1] || e[0] > t[l].area[2] || e[1] > t[l].area[3] || e[2] < t[l].area[0])) {n = !0;break;} else if (0 > e[0] || 0 > e[1] || e[2] > a || e[3] > o) {n = !0;break;} else n = !1;}return n;}function getBoundingBox(e) {var t,a = {};a.xMin = 180, a.xMax = 0, a.yMin = 90, a.yMax = 0;for (var o, n = 0; n < e.length; n++) {o = e[n].geometry.coordinates;for (var l = 0; l < o.length; l++) {t = o[l], 1 == t.length && (t = t[0]);for (var r = 0; r < t.length; r++) {var s = t[r][0],d = t[r][1],h = { x: s, y: d };a.xMin = a.xMin < h.x ? a.xMin : h.x, a.xMax = a.xMax > h.x ? a.xMax : h.x, a.yMin = a.yMin < h.y ? a.yMin : h.y, a.yMax = a.yMax > h.y ? a.yMax : h.y;}}}return a;}function coordinateToPoint(e, t, i, a, o, n) {return { x: (t - i.xMin) * a + o, y: (i.yMax - e) * a + n };}function pointToCoordinate(e, t, i, a, o, n) {return { x: (t - o) / a + i.xMin, y: i.yMax - (e - n) / a };}function isRayIntersectsSegment(e, t, i) {if (t[1] == i[1]) return !1;if (t[1] > e[1] && i[1] > e[1]) return !1;if (t[1] < e[1] && i[1] < e[1]) return !1;if (t[1] == e[1] && i[1] > e[1]) return !1;if (i[1] == e[1] && t[1] > e[1]) return !1;if (t[0] < e[0] && i[1] < e[1]) return !1;var a = i[0] - (i[0] - t[0]) * (i[1] - e[1]) / (i[1] - t[1]);return !(a < e[0]);}function isPoiWithinPoly(e, t) {var i = 0;for (var a, o = 0; o < t.length; o++) {a = t[o][0], 1 == t.length && (a = t[o][0]);for (var _t24 = 0; _t24 < a.length - 1; _t24++) {var _o24 = a[_t24],n = a[_t24 + 1];isRayIntersectsSegment(e, _o24, n) && (i += 1);}}return !(1 != i % 2);}function drawMapDataPoints(e, t, a, o) {var n,l,r = Math.abs,s = assign({}, { border: !0, borderWidth: 1, borderColor: \"#666666\", fillOpacity: .6, activeBorderColor: \"#f04864\", activeFillColor: \"#facc14\", activeFillOpacity: 1 }, t.extra.map),d = e,h = getBoundingBox(d),x = t.width / r(h.xMax - h.xMin),c = t.height / r(h.yMax - h.yMin),p = x < c ? x : c,g = t.width / 2 - r(h.xMax - h.xMin) / 2 * p,y = t.height / 2 - r(h.yMax - h.yMin) / 2 * p;o.beginPath(), o.clearRect(0, 0, t.width, t.height), o.setFillStyle(t.background || \"#FFFFFF\"), o.rect(0, 0, t.width, t.height), o.fill();for (var f = 0; f < d.length; f++) {o.beginPath(), o.setLineWidth(s.borderWidth * t.pixelRatio), o.setStrokeStyle(s.borderColor), o.setFillStyle(hexToRgb(e[f].color, s.fillOpacity)), t.tooltip && t.tooltip.index == f && (o.setStrokeStyle(s.activeBorderColor), o.setFillStyle(hexToRgb(s.activeFillColor, s.activeFillOpacity)));for (var u = d[f].geometry.coordinates, m = 0; m < u.length; m++) {n = u[m], 1 == n.length && (n = n[0]);for (var S = 0; S < n.length; S++) {l = coordinateToPoint(n[S][1], n[S][0], h, p, g, y), 0 == S ? (o.beginPath(), o.moveTo(l.x, l.y)) : o.lineTo(l.x, l.y);}o.fill(), !0 == s.border && o.stroke();}if (!0 == t.dataLabel) {var T = d[f].properties.centroid;if (T) {l = coordinateToPoint(T[1], T[0], h, p, g, y);var _e36 = d[f].textSize || a.fontSize,_t25 = d[f].properties.name;o.beginPath(), o.setFontSize(_e36), o.setFillStyle(d[f].textColor || \"#666666\"), o.fillText(_t25, l.x - measureText(_t25, _e36) / 2, l.y + _e36 / 2), o.closePath(), o.stroke();}}}t.chartData.mapData = { bounds: h, scale: p, xoffset: g, yoffset: y }, drawToolTipBridge(t, a, o, 1), o.draw();}function getWordCloudPoint(e, t) {var a = e.series.sort(function (e, t) {return parseInt(t.textSize) - parseInt(e.textSize);});switch (t) {case \"normal\":for (var _t26 = 0; _t26 < a.length; _t26++) {var i = void 0,_o25 = void 0,n = void 0,l = a[_t26].name,r = a[_t26].textSize,s = measureText(l, r),d = 0;for (;;) {d++, i = normalInt(-e.width / 2, e.width / 2, 5) - s / 2, _o25 = normalInt(-e.height / 2, e.height / 2, 5) + r / 2, n = [i - 5 + e.width / 2, _o25 - 5 - r + e.height / 2, i + s + 5 + e.width / 2, _o25 + 5 + e.height / 2];var _t27 = collisionNew(n, a, e.width, e.height);if (!_t27) break;if (1e3 == d) {n = [-100, -100, -100, -100];break;}}a[_t26].area = n;}break;case \"vertical\":var o = function o() {return !!(.7 < Math.random());};;for (var _t28 = 0; _t28 < a.length; _t28++) {var _i25 = void 0,_n24 = void 0,_l12 = void 0,_r10 = void 0,_s4 = a[_t28].name,_d3 = a[_t28].textSize,h = measureText(_s4, _d3),x = o(),c = 0;for (;;) {c++;var _t29 = void 0;if (x ? (_i25 = normalInt(-e.width / 2, e.width / 2, 5) - h / 2, _n24 = normalInt(-e.height / 2, e.height / 2, 5) + _d3 / 2, _l12 = [_n24 - 5 - h + e.width / 2, -_i25 - 5 + e.height / 2, _n24 + 5 + e.width / 2, -_i25 + _d3 + 5 + e.height / 2], _r10 = [e.width - (e.width / 2 - e.height / 2) - (-_i25 + _d3 + 5 + e.height / 2) - 5, e.height / 2 - e.width / 2 + (_n24 - 5 - h + e.width / 2) - 5, e.width - (e.width / 2 - e.height / 2) - (-_i25 + _d3 + 5 + e.height / 2) + _d3, e.height / 2 - e.width / 2 + (_n24 - 5 - h + e.width / 2) + h + 5], _t29 = collisionNew(_r10, a, e.height, e.width)) : (_i25 = normalInt(-e.width / 2, e.width / 2, 5) - h / 2, _n24 = normalInt(-e.height / 2, e.height / 2, 5) + _d3 / 2, _l12 = [_i25 - 5 + e.width / 2, _n24 - 5 - _d3 + e.height / 2, _i25 + h + 5 + e.width / 2, _n24 + 5 + e.height / 2], _t29 = collisionNew(_l12, a, e.width, e.height)), !_t29) break;if (1e3 == c) {_l12 = [-1e3, -1e3, -1e3, -1e3];break;}}x ? (a[_t28].area = _r10, a[_t28].areav = _l12) : a[_t28].area = _l12, a[_t28].rotate = x;};}return a;}function drawWordCloudDataPoints(e, t, i, a) {var o = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 1,n = assign({}, { type: \"normal\", autoColors: !0 }, t.extra.word);a.beginPath(), a.setFillStyle(t.background || \"#FFFFFF\"), a.rect(0, 0, t.width, t.height), a.fill(), a.save();var l = t.chartData.wordCloudData;a.translate(t.width / 2, t.height / 2);for (var _n25 = 0; _n25 < l.length; _n25++) {a.save(), l[_n25].rotate && a.rotate(90 * Math.PI / 180);var _e37 = l[_n25].name,_i26 = l[_n25].textSize,r = measureText(_e37, _i26);a.beginPath(), a.setStrokeStyle(l[_n25].color), a.setFillStyle(l[_n25].color), a.setFontSize(_i26), l[_n25].rotate ? 0 < l[_n25].areav[0] && (t.tooltip ? t.tooltip.index == _n25 ? a.strokeText(_e37, (l[_n25].areav[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].areav[1] + 5 + _i26 - t.height / 2) * o) : a.fillText(_e37, (l[_n25].areav[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].areav[1] + 5 + _i26 - t.height / 2) * o) : a.fillText(_e37, (l[_n25].areav[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].areav[1] + 5 + _i26 - t.height / 2) * o)) : 0 < l[_n25].area[0] && (t.tooltip ? t.tooltip.index == _n25 ? a.strokeText(_e37, (l[_n25].area[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].area[1] + 5 + _i26 - t.height / 2) * o) : a.fillText(_e37, (l[_n25].area[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].area[1] + 5 + _i26 - t.height / 2) * o) : a.fillText(_e37, (l[_n25].area[0] + 5 - t.width / 2) * o - r * (1 - o) / 2, (l[_n25].area[1] + 5 + _i26 - t.height / 2) * o)), a.stroke(), a.restore();}a.restore();}function drawFunnelDataPoints(e, t, i, a) {var o = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 1,n = assign({}, { activeWidth: 10, activeOpacity: .3, border: !1, borderWidth: 2, borderColor: \"#FFFFFF\", fillOpacity: 1, labelAlign: \"right\" }, t.extra.funnel),l = (t.height - t.area[0] - t.area[2]) / e.length,r = { x: t.area[3] + (t.width - t.area[1] - t.area[3]) / 2, y: t.height - t.area[2] },s = n.activeWidth,d = Math.min((t.width - t.area[1] - t.area[3]) / 2 - s, (t.height - t.area[0] - t.area[2]) / 2 - s);e = getFunnelDataPoints(e, d, o), a.save(), a.translate(r.x, r.y);for (var _o26 = 0; _o26 < e.length; _o26++) {0 == _o26 ? (t.tooltip && t.tooltip.index == _o26 && (a.beginPath(), a.setFillStyle(hexToRgb(e[_o26].color, n.activeOpacity)), a.moveTo(-s, 0), a.lineTo(-e[_o26].radius - s, -l), a.lineTo(e[_o26].radius + s, -l), a.lineTo(s, 0), a.lineTo(-s, 0), a.closePath(), a.fill()), e[_o26].funnelArea = [r.x - e[_o26].radius, r.y - l, r.x + e[_o26].radius, r.y], a.beginPath(), a.setLineWidth(n.borderWidth * t.pixelRatio), a.setStrokeStyle(n.borderColor), a.setFillStyle(hexToRgb(e[_o26].color, n.fillOpacity)), a.moveTo(0, 0), a.lineTo(-e[_o26].radius, -l), a.lineTo(e[_o26].radius, -l), a.lineTo(0, 0), a.closePath(), a.fill(), !0 == n.border && a.stroke()) : (t.tooltip && t.tooltip.index == _o26 && (a.beginPath(), a.setFillStyle(hexToRgb(e[_o26].color, n.activeOpacity)), a.moveTo(0, 0), a.lineTo(-e[_o26 - 1].radius - s, 0), a.lineTo(-e[_o26].radius - s, -l), a.lineTo(e[_o26].radius + s, -l), a.lineTo(e[_o26 - 1].radius + s, 0), a.lineTo(0, 0), a.closePath(), a.fill()), e[_o26].funnelArea = [r.x - e[_o26].radius, r.y - l * (_o26 + 1), r.x + e[_o26].radius, r.y - l * _o26], a.beginPath(), a.setLineWidth(n.borderWidth * t.pixelRatio), a.setStrokeStyle(n.borderColor), a.setFillStyle(hexToRgb(e[_o26].color, n.fillOpacity)), a.moveTo(0, 0), a.lineTo(-e[_o26 - 1].radius, 0), a.lineTo(-e[_o26].radius, -l), a.lineTo(e[_o26].radius, -l), a.lineTo(e[_o26 - 1].radius, 0), a.lineTo(0, 0), a.closePath(), a.fill(), !0 == n.border && a.stroke()), a.translate(0, -l);}return a.restore(), !1 !== t.dataLabel && 1 === o && drawFunnelText(e, t, a, l, n.labelAlign, s, r), { center: r, radius: d, series: e };}function drawFunnelText(e, t, a, o, n, l, r) {var s = Math.PI;for (var d = 0; d < e.length; d++) {var i = void 0,h = void 0,x = void 0,c = void 0,p = e[d],g = p.format ? p.format(+p._proportion_.toFixed(2)) : util.toFixed(100 * p._proportion_) + \"%\";\"right\" == n ? (i = 0 == d ? (p.funnelArea[2] + r.x) / 2 : (p.funnelArea[2] + e[d - 1].funnelArea[2]) / 2, h = i + 2 * l, x = p.funnelArea[1] + o / 2, c = p.textSize || t.fontSize, a.setLineWidth(1 * t.pixelRatio), a.setStrokeStyle(p.color), a.setFillStyle(p.color), a.beginPath(), a.moveTo(i, x), a.lineTo(h, x), a.stroke(), a.closePath(), a.beginPath(), a.moveTo(h, x), a.arc(h, x, 2, 0, 2 * s), a.closePath(), a.fill(), a.beginPath(), a.setFontSize(c), a.setFillStyle(p.textColor || \"#666666\"), a.fillText(g, h + 5, x + c / 2 - 2), a.closePath(), a.stroke(), a.closePath()) : (i = 0 == d ? (p.funnelArea[0] + r.x) / 2 : (p.funnelArea[0] + e[d - 1].funnelArea[0]) / 2, h = i - 2 * l, x = p.funnelArea[1] + o / 2, c = p.textSize || t.fontSize, a.setLineWidth(1 * t.pixelRatio), a.setStrokeStyle(p.color), a.setFillStyle(p.color), a.beginPath(), a.moveTo(i, x), a.lineTo(h, x), a.stroke(), a.closePath(), a.beginPath(), a.moveTo(h, x), a.arc(h, x, 2, 0, 2 * s), a.closePath(), a.fill(), a.beginPath(), a.setFontSize(c), a.setFillStyle(p.textColor || \"#666666\"), a.fillText(g, h - 5 - measureText(g), x + c / 2 - 2), a.closePath(), a.stroke(), a.closePath());}}function drawCanvas(e, t) {t.draw();}var Timing = { easeIn: function easeIn(e) {return Math.pow(e, 3);}, easeOut: function easeOut(e) {return Math.pow(e - 1, 3) + 1;}, easeInOut: function easeInOut(e) {var t = Math.pow;return 1 > (e /= .5) ? .5 * t(e, 3) : .5 * (t(e - 2, 3) + 2);}, linear: function linear(e) {return e;} };function Animation(e) {this.isStop = !1, e.duration = \"undefined\" == typeof e.duration ? 1e3 : e.duration, e.timing = e.timing || \"linear\";var t = function () {return \"undefined\" == typeof setTimeout ? \"undefined\" == typeof requestAnimationFrame ? function (e) {e(null);} : requestAnimationFrame : function (e, t) {setTimeout(function () {var t = +new Date();e(t);}, t);};}(),i = null,_a13 = function a(o) {if (null === o || !0 === this.isStop) return e.onProcess && e.onProcess(1), void (e.onAnimationFinish && e.onAnimationFinish());if (null === i && (i = o), o - i < e.duration) {var n = (o - i) / e.duration,l = Timing[e.timing];n = l(n), e.onProcess && e.onProcess(n), t(_a13, 17);} else e.onProcess && e.onProcess(1), e.onAnimationFinish && e.onAnimationFinish();};_a13 = _a13.bind(this), t(_a13, 17);}Animation.prototype.stop = function () {this.isStop = !0;};function drawCharts(e, t, a, i) {var o = this,n = t.series,l = t.categories;n = fillSeries(n, t, a);var r = t.animation ? t.duration : 0;o.animationInstance && o.animationInstance.stop();var s = null;if (\"candle\" == e) {var _e38 = assign({}, t.extra.candle.average);_e38.show ? (s = calCandleMA(_e38.day, _e38.name, _e38.color, n[0].data), s = fillSeries(s, t, a), t.seriesMA = s) : t.seriesMA ? s = t.seriesMA = fillSeries(t.seriesMA, t, a) : s = n;} else s = n;t._series_ = n = filterSeries(n), t.area = [,,,,];for (var _o27 = 0; 4 > _o27; _o27++) {t.area[_o27] = t.padding[_o27];}var d = calLegendData(s, t, a, t.chartData),h = d.area.wholeHeight,x = d.area.wholeWidth;switch (t.legend.position) {case \"top\":t.area[0] += h;break;case \"bottom\":t.area[2] += h;break;case \"left\":t.area[3] += x;break;case \"right\":t.area[1] += x;}var c = {},p = 0;if (\"line\" === t.type || \"column\" === t.type || \"area\" === t.type || \"mix\" === t.type || \"candle\" === t.type) {if (c = calYAxisData(n, t, a), p = c.yAxisWidth, t.yAxis.showTitle) {var _e40 = 0;for (var _o29 = 0; _o29 < t.yAxis.data.length; _o29++) {_e40 = Math.max(_e40, t.yAxis.data[_o29].titleFontSize ? t.yAxis.data[_o29].titleFontSize : a.fontSize);}t.area[0] += (_e40 + 6) * t.pixelRatio;}var _e39 = 0,_o28 = 0;for (var _a14 = 0; _a14 < p.length; _a14++) {\"left\" == p[_a14].position ? (t.area[3] += 0 < _o28 ? p[_a14].width + t.yAxis.padding : p[_a14].width, _o28 += 1) : (t.area[1] += 0 < _e39 ? p[_a14].width + t.yAxis.padding : p[_a14].width, _e39 += 1);}} else a.yAxisWidth = p;if (t.chartData.yAxisData = c, t.categories && t.categories.length) {t.chartData.xAxisData = getXAxisPoints(t.categories, t, a);var _e41 = calCategoriesData(t.categories, t, a, t.chartData.xAxisData.eachSpacing),_i27 = _e41.xAxisHeight,_o30 = _e41.angle;a.xAxisHeight = _i27, a._xAxisTextAngle_ = _o30, t.area[2] += _i27, t.chartData.categoriesData = _e41;} else if (\"line\" === t.type || \"area\" === t.type || \"points\" === t.type) {t.chartData.xAxisData = calXAxisData(n, t, a), l = t.chartData.xAxisData.rangesFormat;var _e42 = calCategoriesData(l, t, a, t.chartData.xAxisData.eachSpacing),_i28 = _e42.xAxisHeight,_o31 = _e42.angle;a.xAxisHeight = _i28, a._xAxisTextAngle_ = _o31, t.area[2] += _i28, t.chartData.categoriesData = _e42;} else t.chartData.xAxisData = { xAxisPoints: [] };if (t.enableScroll && \"right\" == t.xAxis.scrollAlign && void 0 === t._scrollDistance_) {var _e43 = 0,_i29 = t.chartData.xAxisData.xAxisPoints,_a15 = t.chartData.xAxisData.startX,_n26 = t.chartData.xAxisData.endX,_l13 = t.chartData.xAxisData.eachSpacing,_r11 = _l13 * (_i29.length - 1);_e43 = _n26 - _a15 - _r11, o.scrollOption = { currentOffset: _e43, startTouchX: _e43, distance: 0, lastMoveTime: 0 }, t._scrollDistance_ = _e43;}switch ((\"pie\" === e || \"ring\" === e || \"rose\" === e) && (a._pieTextMaxLength_ = !1 === t.dataLabel ? 0 : getPieTextMaxLength(s)), e) {case \"word\":var _d4 = assign({}, { type: \"normal\", autoColors: !0 }, t.extra.word);(!0 == t.updateData || null == t.updateData) && (t.chartData.wordCloudData = getWordCloudPoint(t, _d4.type)), this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawWordCloudDataPoints(n, t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"map\":i.clearRect(0, 0, t.width, t.height), drawMapDataPoints(n, t, a, i);break;case \"funnel\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.funnelData = drawFunnelDataPoints(n, t, a, i, e), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"line\":this.animationInstance = new Animation({ timing: \"easeIn\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawYAxisGrid(l, t, a, i), drawXAxis(l, t, a, i);var o = drawLineDataPoints(n, t, a, i, e),r = o.xAxisPoints,s = o.calPoints,d = o.eachSpacing;t.chartData.xAxisPoints = r, t.chartData.calPoints = s, t.chartData.eachSpacing = d, drawYAxis(n, t, a, i), !1 !== t.enableMarkLine && 1 === e && drawMarkLine(t, a, i), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e, d, r), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"mix\":this.animationInstance = new Animation({ timing: \"easeIn\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawYAxisGrid(l, t, a, i), drawXAxis(l, t, a, i);var o = drawMixDataPoints(n, t, a, i, e),r = o.xAxisPoints,s = o.calPoints,d = o.eachSpacing;t.chartData.xAxisPoints = r, t.chartData.calPoints = s, t.chartData.eachSpacing = d, drawYAxis(n, t, a, i), !1 !== t.enableMarkLine && 1 === e && drawMarkLine(t, a, i), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e, d, r), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"column\":this.animationInstance = new Animation({ timing: \"easeIn\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawYAxisGrid(l, t, a, i), drawXAxis(l, t, a, i);var o = drawColumnDataPoints(n, t, a, i, e),r = o.xAxisPoints,s = o.calPoints,d = o.eachSpacing;t.chartData.xAxisPoints = r, t.chartData.calPoints = s, t.chartData.eachSpacing = d, drawYAxis(n, t, a, i), !1 !== t.enableMarkLine && 1 === e && drawMarkLine(t, a, i), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e, d, r), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"area\":this.animationInstance = new Animation({ timing: \"easeIn\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawYAxisGrid(l, t, a, i), drawXAxis(l, t, a, i);var o = drawAreaDataPoints(n, t, a, i, e),r = o.xAxisPoints,s = o.calPoints,d = o.eachSpacing;t.chartData.xAxisPoints = r, t.chartData.calPoints = s, t.chartData.eachSpacing = d, drawYAxis(n, t, a, i), !1 !== t.enableMarkLine && 1 === e && drawMarkLine(t, a, i), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e, d, r), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"ring\":case \"pie\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.pieData = drawPieDataPoints(n, t, a, i, e), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"rose\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.pieData = drawRoseDataPoints(n, t, a, i, e), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"radar\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.radarData = drawRadarDataPoints(n, t, a, i, e), drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"arcbar\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.arcbarData = drawArcbarDataPoints(n, t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"gauge\":this.animationInstance = new Animation({ timing: \"easeInOut\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), t.chartData.gaugeData = drawGaugeDataPoints(l, n, t, a, i, e), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });break;case \"candle\":this.animationInstance = new Animation({ timing: \"easeIn\", duration: r, onProcess: function onProcess(e) {i.clearRect(0, 0, t.width, t.height), t.rotate && contextRotate(i, t), drawYAxisGrid(l, t, a, i), drawXAxis(l, t, a, i);var o = drawCandleDataPoints(n, s, t, a, i, e),r = o.xAxisPoints,d = o.calPoints,h = o.eachSpacing;t.chartData.xAxisPoints = r, t.chartData.calPoints = d, t.chartData.eachSpacing = h, drawYAxis(n, t, a, i), !1 !== t.enableMarkLine && 1 === e && drawMarkLine(t, a, i), s ? drawLegend(s, t, a, i, t.chartData) : drawLegend(t.series, t, a, i, t.chartData), drawToolTipBridge(t, a, i, e, h, r), drawCanvas(t, i);}, onAnimationFinish: function onAnimationFinish() {o.event.trigger(\"renderComplete\");} });}}function Event() {this.events = {};}Event.prototype.addEventListener = function (e, t) {this.events[e] = this.events[e] || [], this.events[e].push(t);}, Event.prototype.trigger = function () {for (var e = arguments.length, t = Array(e), i = 0; i < e; i++) {t[i] = arguments[i];}var a = t[0],o = t.slice(1);!this.events[a] || this.events[a].forEach(function (e) {try {e.apply(null, o);} catch (t) {console.error(__f__(t, \" at components\\\\ks-components\\\\ucharts\\\\u-charts.min.js:1\"));}});};var Charts = function Charts(e) {e.pixelRatio = e.pixelRatio ? e.pixelRatio : 1, e.fontSize = e.fontSize ? e.fontSize * e.pixelRatio : 13 * e.pixelRatio, e.title = assign({}, e.title), e.subtitle = assign({}, e.subtitle), e.duration = e.duration ? e.duration : 1e3, e.yAxis = assign({}, { data: [], showTitle: !1, disabled: !1, disableGrid: !1, splitNumber: 5, gridType: \"solid\", dashLength: 4 * e.pixelRatio, gridColor: \"#cccccc\", padding: 10, fontColor: \"#666666\" }, e.yAxis), e.yAxis.dashLength *= e.pixelRatio, e.yAxis.padding *= e.pixelRatio, e.xAxis = assign({}, { rotateLabel: !1, type: \"calibration\", gridType: \"solid\", dashLength: 4, scrollAlign: \"left\", boundaryGap: \"center\", axisLine: !0, axisLineColor: \"#cccccc\" }, e.xAxis), e.xAxis.dashLength *= e.pixelRatio, e.legend = assign({}, { show: !0, position: \"bottom\", float: \"center\", backgroundColor: \"rgba(0,0,0,0)\", borderColor: \"rgba(0,0,0,0)\", borderWidth: 0, padding: 5, margin: 5, itemGap: 10, fontSize: e.fontSize, lineHeight: e.fontSize, fontColor: \"#333333\", format: {}, hiddenColor: \"#CECECE\" }, e.legend), e.legend.borderWidth *= e.pixelRatio, e.legend.itemGap *= e.pixelRatio, e.legend.padding *= e.pixelRatio, e.legend.margin *= e.pixelRatio, e.extra = assign({}, e.extra), e.rotate = !!e.rotate, e.animation = !!e.animation, e.rotate = !!e.rotate;var t = JSON.parse(JSON.stringify(config));if (t.colors = e.colors ? e.colors : t.colors, t.yAxisTitleWidth = !0 !== e.yAxis.disabled && e.yAxis.title ? t.yAxisTitleWidth : 0, (\"pie\" == e.type || \"ring\" == e.type) && (t.pieChartLinePadding = !1 === e.dataLabel ? 0 : e.extra.pie.labelWidth * e.pixelRatio || t.pieChartLinePadding * e.pixelRatio), \"rose\" == e.type && (t.pieChartLinePadding = !1 === e.dataLabel ? 0 : e.extra.rose.labelWidth * e.pixelRatio || t.pieChartLinePadding * e.pixelRatio), t.pieChartTextPadding = !1 === e.dataLabel ? 0 : t.pieChartTextPadding * e.pixelRatio, t.yAxisSplit = e.yAxis.splitNumber ? e.yAxis.splitNumber : config.yAxisSplit, t.rotate = e.rotate, e.rotate) {var _t30 = e.width,i = e.height;e.width = i, e.height = _t30;}e.padding = e.padding ? e.padding : t.padding;for (var _t31 = 0; 4 > _t31; _t31++) {e.padding[_t31] *= e.pixelRatio;}t.yAxisWidth = config.yAxisWidth * e.pixelRatio, t.xAxisHeight = config.xAxisHeight * e.pixelRatio, e.enableScroll && e.xAxis.scrollShow && (t.xAxisHeight += 6 * e.pixelRatio), t.xAxisLineHeight = config.xAxisLineHeight * e.pixelRatio, t.fontSize = e.fontSize, t.titleFontSize = config.titleFontSize * e.pixelRatio, t.subtitleFontSize = config.subtitleFontSize * e.pixelRatio, t.toolTipPadding = config.toolTipPadding * e.pixelRatio, t.toolTipLineHeight = config.toolTipLineHeight * e.pixelRatio, t.columePadding = config.columePadding * e.pixelRatio, e.$this = e.$this ? e.$this : this, this.context = uni.createCanvasContext(e.canvasId, e.$this), e.chartData = {}, this.event = new Event(), this.scrollOption = { currentOffset: 0, startTouchX: 0, distance: 0, lastMoveTime: 0 }, this.opts = e, this.config = t, drawCharts.call(this, e.type, e, t, this.context);};Charts.prototype.updateData = function () {var e = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};this.opts = assign({}, this.opts, e), this.opts.updateData = !0;var t = e.scrollPosition || \"current\";switch (t) {case \"current\":this.opts._scrollDistance_ = this.scrollOption.currentOffset;break;case \"left\":this.opts._scrollDistance_ = 0, this.scrollOption = { currentOffset: 0, startTouchX: 0, distance: 0, lastMoveTime: 0 };break;case \"right\":var _e44 = calYAxisData(this.opts.series, this.opts, this.config),i = _e44.yAxisWidth;this.config.yAxisWidth = i;var a = 0,o = getXAxisPoints(this.opts.categories, this.opts, this.config),n = o.xAxisPoints,l = o.startX,r = o.endX,s = o.eachSpacing,d = s * (n.length - 1);a = r - l - d, this.scrollOption = { currentOffset: a, startTouchX: a, distance: 0, lastMoveTime: 0 }, this.opts._scrollDistance_ = a;}drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);}, Charts.prototype.zoom = function () {var e = Math.round,t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this.opts.xAxis.itemCount;if (!0 !== this.opts.enableScroll) return void console.log(__f__(\"\\u8BF7\\u542F\\u7528\\u6EDA\\u52A8\\u6761\\u540E\\u4F7F\\u7528\\uFF01\", \" at components\\\\ks-components\\\\ucharts\\\\u-charts.min.js:1\"));var i = e(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + e(this.opts.xAxis.itemCount / 2);this.opts.animation = !1, this.opts.xAxis.itemCount = t.itemCount;var a = calYAxisData(this.opts.series, this.opts, this.config),o = a.yAxisWidth;this.config.yAxisWidth = o;var n = 0,l = getXAxisPoints(this.opts.categories, this.opts, this.config),r = l.xAxisPoints,s = l.startX,d = l.endX,h = l.eachSpacing,x = d - s,c = x - h * (r.length - 1);n = x / 2 - h * i, 0 < n && (n = 0), n < c && (n = c), this.scrollOption = { currentOffset: n, startTouchX: n, distance: 0, lastMoveTime: 0 }, this.opts._scrollDistance_ = n, drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);}, Charts.prototype.stopAnimation = function () {this.animationInstance && this.animationInstance.stop();}, Charts.prototype.addEventListener = function (e, t) {this.event.addEventListener(e, t);}, Charts.prototype.getCurrentDataIndex = function (t) {var e = null;if (e = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0], e) {var i = getTouches(e, this.opts, t);return \"pie\" === this.opts.type || \"ring\" === this.opts.type || \"rose\" === this.opts.type ? findPieChartCurrentIndex({ x: i.x, y: i.y }, this.opts.chartData.pieData) : \"radar\" === this.opts.type ? findRadarChartCurrentIndex({ x: i.x, y: i.y }, this.opts.chartData.radarData, this.opts.categories.length) : \"funnel\" === this.opts.type ? findFunnelChartCurrentIndex({ x: i.x, y: i.y }, this.opts.chartData.funnelData) : \"map\" === this.opts.type ? findMapChartCurrentIndex({ x: i.x, y: i.y }, this.opts) : \"word\" === this.opts.type ? findWordChartCurrentIndex({ x: i.x, y: i.y }, this.opts.chartData.wordCloudData) : findCurrentIndex({ x: i.x, y: i.y }, this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));}return -1;}, Charts.prototype.getLegendDataIndex = function (t) {var e = null;if (e = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0], e) {var i = getTouches(e, this.opts, t);return findLegendIndex({ x: i.x, y: i.y }, this.opts.chartData.legendData);}return -1;}, Charts.prototype.touchLegend = function (t) {var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},i = null;if (i = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0], i) {var a = getTouches(i, this.opts, t),o = this.getLegendDataIndex(t);0 <= o && (this.opts.series[o].show = !this.opts.series[o].show, this.opts.animation = !!e.animation, this.opts._scrollDistance_ = this.scrollOption.currentOffset, drawCharts.call(this, this.opts.type, this.opts, this.config, this.context));}}, Charts.prototype.showToolTip = function (t) {var e = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {},i = null;i = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0], i || console.log(__f__(\"touchError\", \" at components\\\\ks-components\\\\ucharts\\\\u-charts.min.js:1\"));var a = getTouches(i, this.opts, t),o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 });if (\"line\" === this.opts.type || \"area\" === this.opts.type || \"column\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var r = getSeriesDataItem(this.opts.series, l);if (0 !== r.length) {var s = getToolTipData(r, this.opts.chartData.calPoints, l, this.opts.categories, e),d = s.textList,h = s.offset;h.y = a.y, n.tooltip = { textList: d, offset: h, option: e, index: l };}}drawCharts.call(this, n.type, n, this.config, this.context);}if (\"mix\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 }),r = getSeriesDataItem(this.opts.series, l);if (0 !== r.length) {var x = getMixToolTipData(r, this.opts.chartData.calPoints, l, this.opts.categories, e),d = x.textList,h = x.offset;h.y = a.y, n.tooltip = { textList: d, offset: h, option: e, index: l };}}drawCharts.call(this, n.type, n, this.config, this.context);}if (\"candle\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 }),r = getSeriesDataItem(this.opts.series, l);if (0 !== r.length) {var s = getCandleToolTipData(this.opts.series[0].data, r, this.opts.chartData.calPoints, l, this.opts.categories, this.opts.extra.candle, e),d = s.textList,h = s.offset;h.y = a.y, n.tooltip = { textList: d, offset: h, option: e, index: l };}}drawCharts.call(this, n.type, n, this.config, this.context);}if (\"pie\" === this.opts.type || \"ring\" === this.opts.type || \"rose\" === this.opts.type || \"funnel\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 }),r = this.opts._series_[l],d = [{ text: e.format ? e.format(r) : r.name + \": \" + r.data, color: r.color }],h = { x: a.x, y: a.y };n.tooltip = { textList: d, offset: h, option: e, index: l };}drawCharts.call(this, n.type, n, this.config, this.context);}if (\"map\" === this.opts.type || \"word\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 }),r = this.opts._series_[l],d = [{ text: e.format ? e.format(r) : r.properties.name, color: r.color }],h = { x: a.x, y: a.y };n.tooltip = { textList: d, offset: h, option: e, index: l };}n.updateData = !1, drawCharts.call(this, n.type, n, this.config, this.context);}if (\"radar\" === this.opts.type) {var l = this.getCurrentDataIndex(t);if (-1 < l) {var o = this.scrollOption.currentOffset,n = assign({}, this.opts, { _scrollDistance_: o, animation: !1 }),r = getSeriesDataItem(this.opts.series, l);if (0 !== r.length) {var d = r.map(function (t) {return { text: e.format ? e.format(t) : t.name + \": \" + t.data, color: t.color };}),h = { x: a.x, y: a.y };n.tooltip = { textList: d, offset: h, option: e, index: l };}}drawCharts.call(this, n.type, n, this.config, this.context);}}, Charts.prototype.translate = function (e) {this.scrollOption = { currentOffset: e, startTouchX: e, distance: 0, lastMoveTime: 0 };var t = assign({}, this.opts, { _scrollDistance_: e, animation: !1 });drawCharts.call(this, this.opts.type, t, this.config, this.context);}, Charts.prototype.scrollStart = function (t) {var e = null;e = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0];var i = getTouches(e, this.opts, t);e && !0 === this.opts.enableScroll && (this.scrollOption.startTouchX = i.x);}, Charts.prototype.scroll = function (t) {0 === this.scrollOption.lastMoveTime && (this.scrollOption.lastMoveTime = Date.now());var e = this.opts.extra.touchMoveLimit || 20,i = Date.now(),a = i - this.scrollOption.lastMoveTime;if (!(a < Math.floor(1e3 / e))) {this.scrollOption.lastMoveTime = i;var o = null;if (o = t.changedTouches ? t.changedTouches[0] : t.mp.changedTouches[0], o && !0 === this.opts.enableScroll) {var n,l = getTouches(o, this.opts, t);n = l.x - this.scrollOption.startTouchX;var r = this.scrollOption.currentOffset,s = calValidDistance(this, r + n, this.opts.chartData, this.config, this.opts);this.scrollOption.distance = n = s - r;var d = assign({}, this.opts, { _scrollDistance_: r + n, animation: !1 });return drawCharts.call(this, d.type, d, this.config, this.context), r + n;}}}, Charts.prototype.scrollEnd = function () {if (!0 === this.opts.enableScroll) {var e = this.scrollOption,t = e.currentOffset,i = e.distance;this.scrollOption.currentOffset = t + i, this.scrollOption.distance = 0;}},  true && \"object\" == typeof module.exports && (module.exports = Charts);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9rcy1jb21wb25lbnRzL3VjaGFydHMvdS1jaGFydHMubWluLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInlBeGlzV2lkdGgiLCJ5QXhpc1NwbGl0IiwieEF4aXNIZWlnaHQiLCJ4QXhpc0xpbmVIZWlnaHQiLCJsZWdlbmRIZWlnaHQiLCJ5QXhpc1RpdGxlV2lkdGgiLCJwYWRkaW5nIiwicGl4ZWxSYXRpbyIsInJvdGF0ZSIsImNvbHVtZVBhZGRpbmciLCJmb250U2l6ZSIsImRhdGFQb2ludFNoYXBlIiwiY29sb3JzIiwicGllQ2hhcnRMaW5lUGFkZGluZyIsInBpZUNoYXJ0VGV4dFBhZGRpbmciLCJ4QXhpc1RleHRQYWRkaW5nIiwidGl0bGVDb2xvciIsInRpdGxlRm9udFNpemUiLCJzdWJ0aXRsZUNvbG9yIiwic3VidGl0bGVGb250U2l6ZSIsInRvb2xUaXBQYWRkaW5nIiwidG9vbFRpcEJhY2tncm91bmQiLCJ0b29sVGlwT3BhY2l0eSIsInRvb2xUaXBMaW5lSGVpZ2h0IiwicmFkYXJMYWJlbFRleHRNYXJnaW4iLCJnYXVnZUxhYmVsVGV4dE1hcmdpbiIsImFzc2lnbiIsImUiLCJ0IiwiaSIsImEiLCJ0b1N0cmluZyIsIlR5cGVFcnJvciIsImxlbmd0aCIsImZvckVhY2giLCJ1dGlsIiwidG9GaXhlZCIsImlzRmxvYXQiLCJhcHByb3hpbWF0ZWx5RXF1YWwiLCJNYXRoIiwiYWJzIiwiaXNTYW1lU2lnbiIsImlzU2FtZVhDb29yZGluYXRlQXJlYSIsIngiLCJpc0NvbGxpc2lvbiIsImVuZCIsInN0YXJ0Iiwid2lkdGgiLCJ5IiwiaGVpZ2h0IiwiZ2V0SDVPZmZzZXQiLCJtcCIsImNoYW5nZWRUb3VjaGVzIiwicHVzaCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaGV4VG9SZ2IiLCJyZXBsYWNlIiwibyIsImV4ZWMiLCJuIiwicGFyc2VJbnQiLCJsIiwiciIsImZpbmRSYW5nZSIsImlzTmFOIiwiRXJyb3IiLCJjZWlsIiwiZmxvb3IiLCJjYWxDYW5kbGVNQSIsImRhdGEiLCJuYW1lIiwiY29sb3IiLCJjYWxWYWxpZERpc3RhbmNlIiwiYXJlYSIsImVhY2hTcGFjaW5nIiwiY2hhcnREYXRhIiwieEF4aXNEYXRhIiwieEF4aXNQb2ludHMiLCJldmVudCIsInRyaWdnZXIiLCJpc0luQW5nbGVSYW5nZSIsIlBJIiwiY2FsUm90YXRlVHJhbnNsYXRlIiwidHJhbnNYIiwidHJhbnNZIiwiY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzIiwibWluIiwibWF4IiwicyIsImQiLCJoIiwiY3RyQSIsImN0ckIiLCJjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbiIsImF2b2lkQ29sbGlzaW9uIiwiZmlsbFNlcmllcyIsIm1hcCIsImluZGV4IiwidHlwZSIsInNob3ciLCJwb2ludFNoYXBlIiwibGVnZW5kU2hhcGUiLCJnZXREYXRhUmFuZ2UiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwibWVhc3VyZVRleHQiLCJhcmd1bWVudHMiLCJzcGxpdCIsInRlc3QiLCJkYXRhQ29tYmluZSIsInJlZHVjZSIsImNvbmNhdCIsImRhdGFDb21iaW5lU3RhY2siLCJBcnJheSIsImdldFRvdWNoZXMiLCJjbGllbnRYIiwicGFnZVkiLCJjdXJyZW50VGFyZ2V0Iiwib2Zmc2V0VG9wIiwiZ2V0U2VyaWVzRGF0YUl0ZW0iLCJzdHlsZSIsImRpc2FibGVMZWdlbmQiLCJmb3JtYXQiLCJnZXRNYXhUZXh0TGlzdExlbmd0aCIsImFwcGx5IiwiZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzIiwiZ2V0VG9vbFRpcERhdGEiLCJ0ZXh0Iiwicm91bmQiLCJ0ZXh0TGlzdCIsIm9mZnNldCIsImdldE1peFRvb2xUaXBEYXRhIiwiZmlsdGVyIiwiZ2V0Q2FuZGxlVG9vbFRpcERhdGEiLCJ1cEZpbGwiLCJkb3duRmlsbCIsImMiLCJmaWx0ZXJTZXJpZXMiLCJmaW5kQ3VycmVudEluZGV4IiwieEF4aXMiLCJib3VuZGFyeUdhcCIsImNhdGVnb3JpZXMiLCJpc0luRXhhY3RDaGFydEFyZWEiLCJmaW5kTGVnZW5kSW5kZXgiLCJpc0luRXhhY3RMZWdlbmRBcmVhIiwicG9pbnRzIiwiZmluZFJhZGFyQ2hhcnRDdXJyZW50SW5kZXgiLCJpc0luRXhhY3RQaWVDaGFydEFyZWEiLCJjZW50ZXIiLCJyYWRpdXMiLCJhdGFuMiIsImFuZ2xlTGlzdCIsImZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleCIsInNlcmllcyIsImZ1bm5lbEFyZWEiLCJmaW5kV29yZENoYXJ0Q3VycmVudEluZGV4IiwiZmluZE1hcENoYXJ0Q3VycmVudEluZGV4IiwibWFwRGF0YSIsInBvaW50VG9Db29yZGluYXRlIiwiYm91bmRzIiwic2NhbGUiLCJ4b2Zmc2V0IiwieW9mZnNldCIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJpc1BvaVdpdGhpblBvbHkiLCJmaW5kUGllQ2hhcnRDdXJyZW50SW5kZXgiLCJfc3RhcnRfIiwiX3Byb3BvcnRpb25fIiwicG93Iiwic3BsaXRQb2ludHMiLCJjYWxMZWdlbmREYXRhIiwid2hvbGVXaWR0aCIsIndob2xlSGVpZ2h0Iiwid2lkdGhBcnIiLCJoZWlnaHRBcnIiLCJsZWdlbmQiLCJsZWdlbmREYXRhIiwibWFyZ2luIiwibGluZUhlaWdodCIsInBvc2l0aW9uIiwicCIsImciLCJpdGVtR2FwIiwiZmxvYXQiLCJzbGljZSIsImNhbENhdGVnb3JpZXNEYXRhIiwiYW5nbGUiLCJyb3RhdGVMYWJlbCIsInNpbiIsImdldFhBeGlzVGV4dExpc3QiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwic3BsaXROdW1iZXIiLCJmIiwiY2FsWEF4aXNEYXRhIiwicmFuZ2VzIiwicmFuZ2VzRm9ybWF0IiwiT2JqZWN0IiwiZ2V0WEF4aXNQb2ludHMiLCJkaXNhYmxlZCIsImdldFJhZGFyRGF0YVBvaW50cyIsImV4dHJhIiwicmFkYXIiLCJwcm9wb3J0aW9uIiwiY29zIiwiZ2V0UGllRGF0YVBvaW50cyIsIl9yYWRpdXNfIiwiZ2V0RnVubmVsRGF0YVBvaW50cyIsInNvcnQiLCJyZXZlcnNlIiwiZ2V0Um9zZURhdGFQb2ludHMiLCJfcm9zZV9wcm9wb3J0aW9uXyIsImdldEFyY2JhckRhdGFQb2ludHMiLCJlbmRBbmdsZSIsInN0YXJ0QW5nbGUiLCJnZXRHYXVnZUF4aXNQb2ludHMiLCJfc3RhcnRBbmdsZV8iLCJfZW5kQW5nbGVfIiwiZ2V0R2F1Z2VEYXRhUG9pbnRzIiwicG9pbnRlciIsIl9vbGRBbmdsZV8iLCJvbGRBbmdsZSIsIm9sZERhdGEiLCJnZXRQaWVUZXh0TWF4TGVuZ3RoIiwiZml4Q29sdW1lRGF0YSIsImNvbHVtbiIsImZpeENvbHVtZU1ldGVyRGF0YSIsImZpeENvbHVtZVN0YWNrRGF0YSIsImVuYWJsZVNjcm9sbCIsIml0ZW1Db3VudCIsInN0YXJ0WCIsImVuZFgiLCJnZXRDYW5kbGVEYXRhUG9pbnRzIiwiZ2V0RGF0YVBvaW50cyIsInNoaWZ0IiwicG9wIiwiZ2V0U3RhY2tEYXRhUG9pbnRzIiwidSIsIm0iLCJ5MCIsImdldFlBeGlzVGV4dExpc3QiLCJ5QXhpcyIsImNhbFlBeGlzRGF0YSIsImNhbGlicmF0aW9uIiwiY2FsVG9vbHRpcFlBeGlzRGF0YSIsInlBeGlzRGF0YSIsImNhbE1hcmtMaW5lRGF0YSIsInlBeGlzSW5kZXgiLCJjb250ZXh0Um90YXRlIiwicm90YXRlTG9jayIsIl9yb3RhdGVfIiwidHJhbnNsYXRlIiwiZHJhd1BvaW50U2hhcGUiLCJiZWdpblBhdGgiLCJkYXRhUG9pbnRTaGFwZVR5cGUiLCJzZXRTdHJva2VTdHlsZSIsInNldEZpbGxTdHlsZSIsImJhY2tncm91bmQiLCJzZXRMaW5lV2lkdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJhcmMiLCJyZWN0IiwiY2xvc2VQYXRoIiwiZmlsbCIsInN0cm9rZSIsImRyYXdSaW5nVGl0bGUiLCJ0aXRsZSIsInN1YnRpdGxlIiwic2V0Rm9udFNpemUiLCJmaWxsVGV4dCIsImRyYXdQb2ludFRleHQiLCJ0ZXh0U2l6ZSIsInRleHRDb2xvciIsImRyYXdHYXVnZUxhYmVsIiwic3BsaXRMaW5lIiwiZW5kTnVtYmVyIiwic3RhcnROdW1iZXIiLCJsYWJlbEZvcm1hdCIsImxhYmVsQ29sb3IiLCJkcmF3UmFkYXJMYWJlbCIsImRyYXdQaWVUZXh0IiwiUyIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiZHJhd1Rvb2xUaXBTcGxpdExpbmUiLCJ0b29sdGlwIiwiZ3JpZFR5cGUiLCJkYXNoTGVuZ3RoIiwic2V0TGluZURhc2giLCJncmlkQ29sb3IiLCJ4QXhpc0xhYmVsIiwibGFiZWxCZ0NvbG9yIiwibGFiZWxCZ09wYWNpdHkiLCJsYWJlbEZvbnRDb2xvciIsImZvbnRDb2xvciIsImRyYXdNYXJrTGluZSIsIm1hcmtMaW5lIiwibGluZUNvbG9yIiwic2hvd0xhYmVsIiwiZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZSIsInlBeGlzTGFiZWwiLCJkcmF3VG9vbFRpcFNwbGl0QXJlYSIsImFjdGl2ZUJnQ29sb3IiLCJhY3RpdmVCZ09wYWNpdHkiLCJkcmF3VG9vbFRpcCIsInNob3dCb3giLCJiZ0NvbG9yIiwiYmdPcGFjaXR5IiwiX3Njcm9sbERpc3RhbmNlXyIsImZpbGxSZWN0IiwiZHJhd1lBeGlzVGl0bGUiLCJzYXZlIiwidGl0bGVGb250Q29sb3IiLCJyZXN0b3JlIiwiZHJhd0NvbHVtbkRhdGFQb2ludHMiLCJtZXRlciIsImJvcmRlciIsImZpbGxDb2xvciIsIlQiLCJBIiwiZGF0YUxhYmVsIiwiY2FsUG9pbnRzIiwiZHJhd0NhbmRsZURhdGFQb2ludHMiLCJhdmVyYWdlIiwiY2FuZGxlIiwidXBMaW5lIiwiZG93bkxpbmUiLCJkYXkiLCJiZXppZXJDdXJ2ZVRvIiwiZHJhd0FyZWFEYXRhUG9pbnRzIiwib3BhY2l0eSIsImFkZExpbmUiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwibGluZVR5cGUiLCJkcmF3TGluZURhdGFQb2ludHMiLCJsaW5lIiwiZHJhd01peERhdGFQb2ludHMiLCJiIiwiUCIsIl8iLCJhZGRQb2ludCIsImRyYXdUb29sVGlwQnJpZGdlIiwiaG9yaXplbnRhbExpbmUiLCJkcmF3WEF4aXMiLCJzY3JvbGxTaG93Iiwic2V0TGluZUNhcCIsInNjcm9sbEJhY2tncm91bmRDb2xvciIsInNjcm9sbENvbG9yIiwiZGlzYWJsZUdyaWQiLCJncmlkRXZhbCIsImxhYmVsQ291bnQiLCJfeEF4aXNUZXh0QW5nbGVfIiwiYXhpc0xpbmUiLCJheGlzTGluZUNvbG9yIiwiZHJhd1lBeGlzR3JpZCIsImRyYXdZQXhpcyIsInNob3dUaXRsZSIsImRyYXdMZWdlbmQiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiaGlkZGVuQ29sb3IiLCJkcmF3UGllRGF0YVBvaW50cyIsImFjdGl2ZU9wYWNpdHkiLCJhY3RpdmVSYWRpdXMiLCJvZmZzZXRBbmdsZSIsImxhYmVsV2lkdGgiLCJyaW5nV2lkdGgiLCJwaWUiLCJfcGllVGV4dE1heExlbmd0aF8iLCJsaW5lSm9pbiIsImRyYXdSb3NlRGF0YVBvaW50cyIsInJvc2UiLCJtaW5SYWRpdXMiLCJkcmF3QXJjYmFyRGF0YVBvaW50cyIsImdhcCIsImFyY2JhciIsImRyYXdHYXVnZURhdGFQb2ludHMiLCJmaXhSYWRpdXMiLCJjaGlsZE51bWJlciIsImNoaWxkV2lkdGgiLCJnYXVnZSIsImlubmVyUmFkaXVzIiwidG90YWxBbmdsZSIsImRyYXdSYWRhckRhdGFQb2ludHMiLCJncmlkQ291bnQiLCJub3JtYWxJbnQiLCJyYW5kb20iLCJjb2xsaXNpb25OZXciLCJnZXRCb3VuZGluZ0JveCIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJjb29yZGluYXRlVG9Qb2ludCIsImlzUmF5SW50ZXJzZWN0c1NlZ21lbnQiLCJkcmF3TWFwRGF0YVBvaW50cyIsImZpbGxPcGFjaXR5IiwiYWN0aXZlQm9yZGVyQ29sb3IiLCJhY3RpdmVGaWxsQ29sb3IiLCJhY3RpdmVGaWxsT3BhY2l0eSIsImNsZWFyUmVjdCIsInByb3BlcnRpZXMiLCJjZW50cm9pZCIsImRyYXciLCJnZXRXb3JkQ2xvdWRQb2ludCIsImFyZWF2IiwiZHJhd1dvcmRDbG91ZERhdGFQb2ludHMiLCJhdXRvQ29sb3JzIiwid29yZCIsIndvcmRDbG91ZERhdGEiLCJzdHJva2VUZXh0IiwiZHJhd0Z1bm5lbERhdGFQb2ludHMiLCJhY3RpdmVXaWR0aCIsImxhYmVsQWxpZ24iLCJmdW5uZWwiLCJkcmF3RnVubmVsVGV4dCIsImRyYXdDYW52YXMiLCJUaW1pbmciLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwibGluZWFyIiwiQW5pbWF0aW9uIiwiaXNTdG9wIiwiZHVyYXRpb24iLCJ0aW1pbmciLCJzZXRUaW1lb3V0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGF0ZSIsIm9uUHJvY2VzcyIsIm9uQW5pbWF0aW9uRmluaXNoIiwiYmluZCIsInByb3RvdHlwZSIsInN0b3AiLCJkcmF3Q2hhcnRzIiwiYW5pbWF0aW9uIiwiYW5pbWF0aW9uSW5zdGFuY2UiLCJzZXJpZXNNQSIsIl9zZXJpZXNfIiwiY2F0ZWdvcmllc0RhdGEiLCJzY3JvbGxBbGlnbiIsInNjcm9sbE9wdGlvbiIsImN1cnJlbnRPZmZzZXQiLCJzdGFydFRvdWNoWCIsImRpc3RhbmNlIiwibGFzdE1vdmVUaW1lIiwidXBkYXRlRGF0YSIsImZ1bm5lbERhdGEiLCJlbmFibGVNYXJrTGluZSIsInBpZURhdGEiLCJyYWRhckRhdGEiLCJhcmNiYXJEYXRhIiwiZ2F1Z2VEYXRhIiwiRXZlbnQiLCJldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiY29uc29sZSIsImVycm9yIiwiQ2hhcnRzIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiJHRoaXMiLCJjb250ZXh0IiwidW5pIiwiY3JlYXRlQ2FudmFzQ29udGV4dCIsImNhbnZhc0lkIiwib3B0cyIsImNhbGwiLCJzY3JvbGxQb3NpdGlvbiIsInpvb20iLCJsb2ciLCJzdG9wQW5pbWF0aW9uIiwiZ2V0Q3VycmVudERhdGFJbmRleCIsImdldExlZ2VuZERhdGFJbmRleCIsInRvdWNoTGVnZW5kIiwic2hvd1Rvb2xUaXAiLCJvcHRpb24iLCJzY3JvbGxTdGFydCIsInNjcm9sbCIsIm5vdyIsInRvdWNoTW92ZUxpbWl0Iiwic2Nyb2xsRW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWEsSUFBSUEsTUFBTSxHQUFDLEVBQUNDLFVBQVUsRUFBQyxFQUFaLEVBQWVDLFVBQVUsRUFBQyxDQUExQixFQUE0QkMsV0FBVyxFQUFDLEVBQXhDLEVBQTJDQyxlQUFlLEVBQUMsRUFBM0QsRUFBOERDLFlBQVksRUFBQyxFQUEzRSxFQUE4RUMsZUFBZSxFQUFDLEVBQTlGLEVBQWlHQyxPQUFPLEVBQUMsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLENBQXpHLEVBQXVIQyxVQUFVLEVBQUMsQ0FBbEksRUFBb0lDLE1BQU0sRUFBQyxDQUFDLENBQTVJLEVBQThJQyxhQUFhLEVBQUMsQ0FBNUosRUFBOEpDLFFBQVEsRUFBQyxFQUF2SyxFQUEwS0MsY0FBYyxFQUFDLENBQUMsUUFBRCxFQUFVLFFBQVYsRUFBbUIsUUFBbkIsRUFBNEIsUUFBNUIsQ0FBekwsRUFBK05DLE1BQU0sRUFBQyxDQUFDLFNBQUQsRUFBVyxTQUFYLEVBQXFCLFNBQXJCLEVBQStCLFNBQS9CLEVBQXlDLFNBQXpDLEVBQW1ELFNBQW5ELENBQXRPLEVBQW9TQyxtQkFBbUIsRUFBQyxFQUF4VCxFQUEyVEMsbUJBQW1CLEVBQUMsQ0FBL1UsRUFBaVZDLGdCQUFnQixFQUFDLENBQWxXLEVBQW9XQyxVQUFVLEVBQUMsU0FBL1csRUFBeVhDLGFBQWEsRUFBQyxFQUF2WSxFQUEwWUMsYUFBYSxFQUFDLFNBQXhaLEVBQWthQyxnQkFBZ0IsRUFBQyxFQUFuYixFQUFzYkMsY0FBYyxFQUFDLENBQXJjLEVBQXVjQyxpQkFBaUIsRUFBQyxTQUF6ZCxFQUFtZUMsY0FBYyxFQUFDLEVBQWxmLEVBQXFmQyxpQkFBaUIsRUFBQyxFQUF2Z0IsRUFBMGdCQyxvQkFBb0IsRUFBQyxFQUEvaEIsRUFBa2lCQyxvQkFBb0IsRUFB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QzFCLENBQS9CLENBQWlDLElBQUkyQixDQUFDLEdBQUNoRSxNQUFNLENBQUMsRUFBRCxFQUFJLEtBQUtnYyxJQUFULEVBQWMsRUFBQ2xLLGdCQUFnQixFQUFDelAsQ0FBQyxHQUFDSCxDQUFwQixFQUFzQjhYLFNBQVMsRUFBQyxDQUFDLENBQWpDLEVBQWQsQ0FBWixDQUErRCxPQUFPRCxVQUFVLENBQUNrQyxJQUFYLENBQWdCLElBQWhCLEVBQXFCalksQ0FBQyxDQUFDUyxJQUF2QixFQUE0QlQsQ0FBNUIsRUFBOEIsS0FBSzNGLE1BQW5DLEVBQTBDLEtBQUt1ZCxPQUEvQyxHQUF3RHZaLENBQUMsR0FBQ0gsQ0FBakUsQ0FBbUUsQ0FBQyxDQUFDLENBQXo2TyxFQUEwNk9xWixNQUFNLENBQUMxQixTQUFQLENBQWlCa0QsU0FBakIsR0FBMkIsWUFBVSxDQUFDLElBQUcsQ0FBQyxDQUFELEtBQUssS0FBS2YsSUFBTCxDQUFVcFAsWUFBbEIsRUFBK0IsQ0FBQyxJQUFJM00sQ0FBQyxHQUFDLEtBQUtxYSxZQUFYLENBQXdCcGEsQ0FBQyxHQUFDRCxDQUFDLENBQUNzYSxhQUE1QixDQUEwQ3BhLENBQUMsR0FBQ0YsQ0FBQyxDQUFDd2EsUUFBOUMsQ0FBdUQsS0FBS0gsWUFBTCxDQUFrQkMsYUFBbEIsR0FBZ0NyYSxDQUFDLEdBQUNDLENBQWxDLEVBQW9DLEtBQUttYSxZQUFMLENBQWtCRyxRQUFsQixHQUEyQixDQUEvRCxDQUFpRSxDQUFDLENBQXptUCxFQUEwbVAsU0FBeUIsWUFBVSxPQUFPdUMsTUFBTSxDQUFDQyxPQUFqRCxLQUEyREQsTUFBTSxDQUFDQyxPQUFQLEdBQWUxQixNQUExRSxDQUExbVAsQyIsImZpbGUiOiI4MzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7dmFyIGNvbmZpZz17eUF4aXNXaWR0aDoxNSx5QXhpc1NwbGl0OjUseEF4aXNIZWlnaHQ6MTUseEF4aXNMaW5lSGVpZ2h0OjE1LGxlZ2VuZEhlaWdodDoxNSx5QXhpc1RpdGxlV2lkdGg6MTUscGFkZGluZzpbMTAsMTAsMTAsMTBdLHBpeGVsUmF0aW86MSxyb3RhdGU6ITEsY29sdW1lUGFkZGluZzozLGZvbnRTaXplOjEzLGRhdGFQb2ludFNoYXBlOltcImNpcmNsZVwiLFwiY2lyY2xlXCIsXCJjaXJjbGVcIixcImNpcmNsZVwiXSxjb2xvcnM6W1wiIzE4OTBmZlwiLFwiIzJmYzI1YlwiLFwiI2ZhY2MxNFwiLFwiI2YwNDg2NFwiLFwiIzg1NDNlMFwiLFwiIzkwZWQ3ZFwiXSxwaWVDaGFydExpbmVQYWRkaW5nOjE1LHBpZUNoYXJ0VGV4dFBhZGRpbmc6NSx4QXhpc1RleHRQYWRkaW5nOjMsdGl0bGVDb2xvcjpcIiMzMzMzMzNcIix0aXRsZUZvbnRTaXplOjIwLHN1YnRpdGxlQ29sb3I6XCIjOTk5OTk5XCIsc3VidGl0bGVGb250U2l6ZToxNSx0b29sVGlwUGFkZGluZzozLHRvb2xUaXBCYWNrZ3JvdW5kOlwiIzAwMDAwMFwiLHRvb2xUaXBPcGFjaXR5Oi43LHRvb2xUaXBMaW5lSGVpZ2h0OjIwLHJhZGFyTGFiZWxUZXh0TWFyZ2luOjE1LGdhdWdlTGFiZWxUZXh0TWFyZ2luOjE1fTtsZXQgYXNzaWduPWZ1bmN0aW9uKGUsLi4udCl7ZnVuY3Rpb24gaShlLHQpe2ZvcihsZXQgYSBpbiB0KWVbYV09ZVthXSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PWVbYV0udG9TdHJpbmcoKT9pKGVbYV0sdFthXSk6ZVthXT10W2FdO3JldHVybiBlfWlmKG51bGw9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtyZXR1cm4hdHx8MD49dC5sZW5ndGg/ZToodC5mb3JFYWNoKHQ9PntlPWkoZSx0KX0pLGUpfTt2YXIgdXRpbD17dG9GaXhlZDpmdW5jdGlvbihlLHQpe3JldHVybiB0PXR8fDIsdGhpcy5pc0Zsb2F0KGUpJiYoZT1lLnRvRml4ZWQodCkpLGV9LGlzRmxvYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIDAhPWUlMX0sYXBwcm94aW1hdGVseUVxdWFsOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIDFlLTEwPk1hdGguYWJzKGUtdCl9LGlzU2FtZVNpZ246ZnVuY3Rpb24oZSx0KXt2YXIgaT1NYXRoLmFicztyZXR1cm4gaShlKT09PWUmJmkodCk9PT10fHxpKGUpIT09ZSYmaSh0KSE9PXR9LGlzU2FtZVhDb29yZGluYXRlQXJlYTpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmlzU2FtZVNpZ24oZS54LHQueCl9LGlzQ29sbGlzaW9uOmZ1bmN0aW9uKGUsdCl7ZS5lbmQ9e30sZS5lbmQueD1lLnN0YXJ0LngrZS53aWR0aCxlLmVuZC55PWUuc3RhcnQueS1lLmhlaWdodCx0LmVuZD17fSx0LmVuZC54PXQuc3RhcnQueCt0LndpZHRoLHQuZW5kLnk9dC5zdGFydC55LXQuaGVpZ2h0O3ZhciBpPXQuc3RhcnQueD5lLmVuZC54fHx0LmVuZC54PGUuc3RhcnQueHx8dC5lbmQueT5lLnN0YXJ0Lnl8fHQuc3RhcnQueTxlLmVuZC55O3JldHVybiFpfX07ZnVuY3Rpb24gZ2V0SDVPZmZzZXQodCl7cmV0dXJuIHQubXA9e2NoYW5nZWRUb3VjaGVzOltdfSx0Lm1wLmNoYW5nZWRUb3VjaGVzLnB1c2goe3g6dC5vZmZzZXRYLHk6dC5vZmZzZXRZfSksdH1mdW5jdGlvbiBoZXhUb1JnYihlLHQpe3ZhciBpPS9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2ksYT1lLnJlcGxhY2UoaSxmdW5jdGlvbihlLHQsaSxhKXtyZXR1cm4gdCt0K2kraSthK2F9KSxvPS9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhhKSxuPXBhcnNlSW50KG9bMV0sMTYpLGw9cGFyc2VJbnQob1syXSwxNikscj1wYXJzZUludChvWzNdLDE2KTtyZXR1cm5cInJnYmEoXCIrbitcIixcIitsK1wiLFwiK3IrXCIsXCIrdCtcIilcIn1mdW5jdGlvbiBmaW5kUmFuZ2UoZSx0LGkpe2lmKGlzTmFOKGUpKXRocm93IG5ldyBFcnJvcihcIlt1Q2hhcnRzXSB1bnZhbGlkIHNlcmllcyBkYXRhIVwiKTtpPWl8fDEwLHQ9dD90OlwidXBwZXJcIjtmb3IodmFyIGE9MTsxPmk7KWkqPTEwLGEqPTEwO2ZvcihlPVwidXBwZXJcIj09PXQ/TWF0aC5jZWlsKGUqYSk6TWF0aC5mbG9vcihlKmEpOzAhPWUlaTspXCJ1cHBlclwiPT09dD9lKys6ZS0tO3JldHVybiBlL2F9ZnVuY3Rpb24gY2FsQ2FuZGxlTUEoZSx0LGksYSl7bGV0IG89W107Zm9yKGxldCBuLGw9MDtsPGUubGVuZ3RoO2wrKyl7bj17ZGF0YTpbXSxuYW1lOnRbbF0sY29sb3I6aVtsXX07Zm9yKGxldCB0PTAsaT1hLmxlbmd0aDt0PGk7dCsrKXtpZih0PGVbbF0pe24uZGF0YS5wdXNoKG51bGwpO2NvbnRpbnVlfWxldCBpPTA7Zm9yKGxldCBvPTA7bzxlW2xdO28rKylpKz1hW3Qtb11bMV07bi5kYXRhLnB1c2goKyhpL2VbbF0pLnRvRml4ZWQoMykpfW8ucHVzaChuKX1yZXR1cm4gb31mdW5jdGlvbiBjYWxWYWxpZERpc3RhbmNlKGUsdCxpLGEsbyl7dmFyIG49by53aWR0aC1vLmFyZWFbMV0tby5hcmVhWzNdLGw9aS5lYWNoU3BhY2luZyooby5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLmxlbmd0aC0xKSxyPXQ7cmV0dXJuIDA8PXQ/KHI9MCxlLmV2ZW50LnRyaWdnZXIoXCJzY3JvbGxMZWZ0XCIpKTpNYXRoLmFicyh0KT49bC1uJiYocj1uLWwsZS5ldmVudC50cmlnZ2VyKFwic2Nyb2xsUmlnaHRcIikpLHJ9ZnVuY3Rpb24gaXNJbkFuZ2xlUmFuZ2UoZSx0LGkpe2Z1bmN0aW9uIGEoZSl7Zm9yKDswPmU7KWUrPTIqbztmb3IoO2U+MipvOyllLT0yKm87cmV0dXJuIGV9dmFyIG89TWF0aC5QSTtyZXR1cm4gZT1hKGUpLHQ9YSh0KSxpPWEoaSksdD5pJiYoaSs9MipvLGU8dCYmKGUrPTIqbykpLGU+PXQmJmU8PWl9ZnVuY3Rpb24gY2FsUm90YXRlVHJhbnNsYXRlKGUsdCxpKXt2YXIgYT1lLG89aS10LG49YSsoaS1vLWEpLzEuNDE0MjEzNTYyMzczMDk1MTtuKj0tMTtyZXR1cm57dHJhbnNYOm4sdHJhbnNZOihpLW8pKigxLjQxNDIxMzU2MjM3MzA5NTEtMSktKGktby1hKS8xLjQxNDIxMzU2MjM3MzA5NTF9fWZ1bmN0aW9uIGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhlLHQpe2Z1bmN0aW9uIGkoZSx0KXtyZXR1cm4hIShlW3QtMV0mJmVbdCsxXSkmJihlW3RdLnk+PW4oZVt0LTFdLnksZVt0KzFdLnkpfHxlW3RdLnk8PW8oZVt0LTFdLnksZVt0KzFdLnkpKX12YXIgbz1NYXRoLm1pbixuPU1hdGgubWF4LGw9LjIsYT0uMixyPW51bGwscz1udWxsLGQ9bnVsbCxoPW51bGw7aWYoMT50PyhyPWVbMF0ueCsoZVsxXS54LWVbMF0ueCkqbCxzPWVbMF0ueSsoZVsxXS55LWVbMF0ueSkqbCk6KHI9ZVt0XS54KyhlW3QrMV0ueC1lW3QtMV0ueCkqbCxzPWVbdF0ueSsoZVt0KzFdLnktZVt0LTFdLnkpKmwpLHQ+ZS5sZW5ndGgtMyl7dmFyIHg9ZS5sZW5ndGgtMTtkPWVbeF0ueC0oZVt4XS54LWVbeC0xXS54KSphLGg9ZVt4XS55LShlW3hdLnktZVt4LTFdLnkpKmF9ZWxzZSBkPWVbdCsxXS54LShlW3QrMl0ueC1lW3RdLngpKmEsaD1lW3QrMV0ueS0oZVt0KzJdLnktZVt0XS55KSphO3JldHVybiBpKGUsdCsxKSYmKGg9ZVt0KzFdLnkpLGkoZSx0KSYmKHM9ZVt0XS55KSwocz49bihlW3RdLnksZVt0KzFdLnkpfHxzPD1vKGVbdF0ueSxlW3QrMV0ueSkpJiYocz1lW3RdLnkpLChoPj1uKGVbdF0ueSxlW3QrMV0ueSl8fGg8PW8oZVt0XS55LGVbdCsxXS55KSkmJihoPWVbdCsxXS55KSx7Y3RyQTp7eDpyLHk6c30sY3RyQjp7eDpkLHk6aH19fWZ1bmN0aW9uIGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKGUsdCxpKXtyZXR1cm57eDppLngrZSx5OmkueS10fX1mdW5jdGlvbiBhdm9pZENvbGxpc2lvbihlLHQpe2lmKHQpZm9yKDt1dGlsLmlzQ29sbGlzaW9uKGUsdCk7KTA8ZS5zdGFydC54P2Uuc3RhcnQueS0tOjA+ZS5zdGFydC54P2Uuc3RhcnQueSsrOjA8ZS5zdGFydC55P2Uuc3RhcnQueSsrOmUuc3RhcnQueS0tO3JldHVybiBlfWZ1bmN0aW9uIGZpbGxTZXJpZXMoZSx0LGkpe3ZhciBhPTA7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe2lmKGUuY29sb3J8fChlLmNvbG9yPWkuY29sb3JzW2FdLGE9KGErMSklaS5jb2xvcnMubGVuZ3RoKSxlLmluZGV4fHwoZS5pbmRleD0wKSxlLnR5cGV8fChlLnR5cGU9dC50eXBlKSxcInVuZGVmaW5lZFwiPT10eXBlb2YgZS5zaG93JiYoZS5zaG93PSEwKSxlLnR5cGV8fChlLnR5cGU9dC50eXBlKSxlLnBvaW50U2hhcGV8fChlLnBvaW50U2hhcGU9XCJjaXJjbGVcIiksIWUubGVnZW5kU2hhcGUpc3dpdGNoKGUudHlwZSl7Y2FzZVwibGluZVwiOmUubGVnZW5kU2hhcGU9XCJsaW5lXCI7YnJlYWs7Y2FzZVwiY29sdW1uXCI6ZS5sZWdlbmRTaGFwZT1cInJlY3RcIjticmVhaztjYXNlXCJhcmVhXCI6ZS5sZWdlbmRTaGFwZT1cInRyaWFuZ2xlXCI7YnJlYWs7ZGVmYXVsdDplLmxlZ2VuZFNoYXBlPVwiY2lyY2xlXCI7fXJldHVybiBlfSl9ZnVuY3Rpb24gZ2V0RGF0YVJhbmdlKGUsdCl7dmFyIGk9MCxhPXQtZTtyZXR1cm4gaT0xZTQ8PWE/MWUzOjFlMzw9YT8xMDA6MTAwPD1hPzEwOjEwPD1hPzU6MTw9YT8xOi4xPD1hPy4xOi4wMTw9YT8uMDE6LjAwMTw9YT8uMDAxOjFlLTQ8PWE/MWUtNDoxZS01PD1hPzFlLTU6MWUtNix7bWluUmFuZ2U6ZmluZFJhbmdlKGUsXCJsb3dlclwiLGkpLG1heFJhbmdlOmZpbmRSYW5nZSh0LFwidXBwZXJcIixpKX19ZnVuY3Rpb24gbWVhc3VyZVRleHQoZSl7dmFyIHQ9MTxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOmNvbmZpZy5mb250U2l6ZTtlPWUrXCJcIjt2YXIgZT1lLnNwbGl0KFwiXCIpLGE9MDtmb3IobGV0IHQsbz0wO288ZS5sZW5ndGg7bysrKXQ9ZVtvXSxhKz0vW2EtekEtWl0vLnRlc3QodCk/NzovWzAtOV0vLnRlc3QodCk/NS41Oi9cXC4vLnRlc3QodCk/Mi43Oi8tLy50ZXN0KHQpPzMuMjU6L1tcXHU0ZTAwLVxcdTlmYTVdLy50ZXN0KHQpPzEwOi9cXCh8XFwpLy50ZXN0KHQpPzMuNzM6L1xccy8udGVzdCh0KT8yLjU6LyUvLnRlc3QodCk/ODoxMDtyZXR1cm4gYSp0LzEwfWZ1bmN0aW9uIGRhdGFDb21iaW5lKGUpe3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybihlLmRhdGE/ZS5kYXRhOmUpLmNvbmNhdCh0LmRhdGEpfSxbXSl9ZnVuY3Rpb24gZGF0YUNvbWJpbmVTdGFjayhlLHQpe2Zvcih2YXIgbz1BcnJheSh0KSxhPTA7YTxvLmxlbmd0aDthKyspb1thXT0wO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKWZvcih2YXIgYT0wO2E8by5sZW5ndGg7YSsrKW9bYV0rPWVbbl0uZGF0YVthXTtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5kYXRhP2UuZGF0YTplKS5jb25jYXQodC5kYXRhKS5jb25jYXQobyl9LFtdKX1mdW5jdGlvbiBnZXRUb3VjaGVzKHQsaSxhKXtsZXQgZSxvO3JldHVybiB0LmNsaWVudFg/aS5yb3RhdGU/KG89aS5oZWlnaHQtdC5jbGllbnRYKmkucGl4ZWxSYXRpbyxlPSh0LnBhZ2VZLWEuY3VycmVudFRhcmdldC5vZmZzZXRUb3AtaS5oZWlnaHQvaS5waXhlbFJhdGlvLzIqKGkucGl4ZWxSYXRpby0xKSkqaS5waXhlbFJhdGlvKTooZT10LmNsaWVudFgqaS5waXhlbFJhdGlvLG89KHQucGFnZVktYS5jdXJyZW50VGFyZ2V0Lm9mZnNldFRvcC1pLmhlaWdodC9pLnBpeGVsUmF0aW8vMiooaS5waXhlbFJhdGlvLTEpKSppLnBpeGVsUmF0aW8pOmkucm90YXRlPyhvPWkuaGVpZ2h0LXQueCppLnBpeGVsUmF0aW8sZT10LnkqaS5waXhlbFJhdGlvKTooZT10LngqaS5waXhlbFJhdGlvLG89dC55KmkucGl4ZWxSYXRpbykse3g6ZSx5Om99fWZ1bmN0aW9uIGdldFNlcmllc0RhdGFJdGVtKGUsdCl7dmFyIGk9W107Zm9yKGxldCBhLG89MDtvPGUubGVuZ3RoO28rKylpZihhPWVbb10sbnVsbCE9PWEuZGF0YVt0XSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZGF0YVt0XSYmYS5zaG93KXtsZXQgZT17fTtlLmNvbG9yPWEuY29sb3IsZS50eXBlPWEudHlwZSxlLnN0eWxlPWEuc3R5bGUsZS5wb2ludFNoYXBlPWEucG9pbnRTaGFwZSxlLmRpc2FibGVMZWdlbmQ9YS5kaXNhYmxlTGVnZW5kLGUubmFtZT1hLm5hbWUsZS5zaG93PWEuc2hvdyxlLmRhdGE9YS5mb3JtYXQ/YS5mb3JtYXQoYS5kYXRhW3RdKTphLmRhdGFbdF0saS5wdXNoKGUpfXJldHVybiBpfWZ1bmN0aW9uIGdldE1heFRleHRMaXN0TGVuZ3RoKGUpe3ZhciB0PWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBtZWFzdXJlVGV4dChlKX0pO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLHQpfWZ1bmN0aW9uIGdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyhlKXtmb3IodmFyIHQ9TWF0aC5QSSxhPVtdLG89MDtvPGU7bysrKWEucHVzaCgyKnQvZSpvKTtyZXR1cm4gYS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuLTEqZSt0LzJ9KX1mdW5jdGlvbiBnZXRUb29sVGlwRGF0YShlLHQsYSxpKXt2YXIgbz00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06e30sbj1lLm1hcChmdW5jdGlvbihlKXtsZXQgdD1bXTtyZXR1cm4gdD1pP2k6ZS5kYXRhLHt0ZXh0Om8uZm9ybWF0P28uZm9ybWF0KGUsdFthXSk6ZS5uYW1lK1wiOiBcIitlLmRhdGEsY29sb3I6ZS5jb2xvcn19KSxsPVtdLHI9e3g6MCx5OjB9O2ZvcihsZXQgbyxuPTA7bjx0Lmxlbmd0aDtuKyspbz10W25dLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBvW2FdJiZudWxsIT09b1thXSYmbC5wdXNoKG9bYV0pO2ZvcihsZXQgbyxuPTA7bjxsLmxlbmd0aDtuKyspbz1sW25dLHIueD1NYXRoLnJvdW5kKG8ueCksci55Kz1vLnk7cmV0dXJuIHIueS89bC5sZW5ndGgse3RleHRMaXN0Om4sb2Zmc2V0OnJ9fWZ1bmN0aW9uIGdldE1peFRvb2xUaXBEYXRhKGUsdCxhLGkpe3ZhciBvPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTp7fSxuPWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybnt0ZXh0Om8uZm9ybWF0P28uZm9ybWF0KGUsaVthXSk6ZS5uYW1lK1wiOiBcIitlLmRhdGEsY29sb3I6ZS5jb2xvcixkaXNhYmxlTGVnZW5kOiEhZS5kaXNhYmxlTGVnZW5kfX0pO249bi5maWx0ZXIoZnVuY3Rpb24oZSl7aWYoITAhPT1lLmRpc2FibGVMZWdlbmQpcmV0dXJuIGV9KTt2YXIgbD1bXSxyPXt4OjAseTowfTtmb3IobGV0IG8sbj0wO248dC5sZW5ndGg7bisrKW89dFtuXSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygb1thXSYmbnVsbCE9PW9bYV0mJmwucHVzaChvW2FdKTtmb3IobGV0IG8sbj0wO248bC5sZW5ndGg7bisrKW89bFtuXSxyLng9TWF0aC5yb3VuZChvLngpLHIueSs9by55O3JldHVybiByLnkvPWwubGVuZ3RoLHt0ZXh0TGlzdDpuLG9mZnNldDpyfX1mdW5jdGlvbiBnZXRDYW5kbGVUb29sVGlwRGF0YShlLHQsYSxvLGksbil7Njxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNl0/YXJndW1lbnRzWzZdOnt9O2xldCBsPW4uY29sb3IudXBGaWxsLHI9bi5jb2xvci5kb3duRmlsbCxzPVtsLGwscixsXTt2YXIgZD1bXTtsZXQgaD17dGV4dDppW29dLGNvbG9yOm51bGx9O2QucHVzaChoKSx0Lm1hcChmdW5jdGlvbih0KXswPT1vJiYwPnQuZGF0YVsxXS10LmRhdGFbMF0/c1sxXT1yOih0LmRhdGFbMF08ZVtvLTFdWzFdJiYoc1swXT1yKSx0LmRhdGFbMV08dC5kYXRhWzBdJiYoc1sxXT1yKSx0LmRhdGFbMl0+ZVtvLTFdWzFdJiYoc1syXT1sKSx0LmRhdGFbM108ZVtvLTFdWzFdJiYoc1szXT1yKSk7bGV0IGk9e3RleHQ6XCJcXHU1RjAwXFx1NzZEOFxcdUZGMUFcIit0LmRhdGFbMF0sY29sb3I6c1swXX0sYT17dGV4dDpcIlxcdTY1MzZcXHU3NkQ4XFx1RkYxQVwiK3QuZGF0YVsxXSxjb2xvcjpzWzFdfSxuPXt0ZXh0OlwiXFx1NjcwMFxcdTRGNEVcXHVGRjFBXCIrdC5kYXRhWzJdLGNvbG9yOnNbMl19LGg9e3RleHQ6XCJcXHU2NzAwXFx1OUFEOFxcdUZGMUFcIit0LmRhdGFbM10sY29sb3I6c1szXX07ZC5wdXNoKGksYSxuLGgpfSk7dmFyIHg9W10sYz17eDowLHk6MH07Zm9yKGxldCBsLHI9MDtyPGEubGVuZ3RoO3IrKylsPWFbcl0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGxbb10mJm51bGwhPT1sW29dJiZ4LnB1c2gobFtvXSk7cmV0dXJuIGMueD1NYXRoLnJvdW5kKHhbMF1bMF0ueCkse3RleHRMaXN0OmQsb2Zmc2V0OmN9fWZ1bmN0aW9uIGZpbHRlclNlcmllcyhlKXtsZXQgdD1bXTtmb3IobGV0IGE9MDthPGUubGVuZ3RoO2ErKykhMD09ZVthXS5zaG93JiZ0LnB1c2goZVthXSk7cmV0dXJuIHR9ZnVuY3Rpb24gZmluZEN1cnJlbnRJbmRleChlLHQsaSxhKXt2YXIgbz00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxuPS0xLGw9MDtsZXQgcj1bXTtmb3IobGV0IG89MDtvPHRbMF0ubGVuZ3RoO28rKylyLnB1c2godFswXVtvXS54KTtyZXR1cm4oXCJsaW5lXCI9PWkudHlwZXx8XCJhcmVhXCI9PWkudHlwZSkmJlwianVzdGlmeVwiPT1pLnhBeGlzLmJvdW5kYXJ5R2FwJiYobD1pLmNoYXJ0RGF0YS5lYWNoU3BhY2luZy8yKSxpLmNhdGVnb3JpZXN8fChsPTApLGlzSW5FeGFjdENoYXJ0QXJlYShlLGksYSkmJnIuZm9yRWFjaChmdW5jdGlvbih0LGkpe2UueCtvK2w+dCYmKG49aSl9KSxufWZ1bmN0aW9uIGZpbmRMZWdlbmRJbmRleChlLHQpe2xldCBpPS0xO2lmKGlzSW5FeGFjdExlZ2VuZEFyZWEoZSx0LmFyZWEpKXtsZXQgYT10LnBvaW50cyxvPS0xO2ZvcihsZXQgdCxuPTAsbD1hLmxlbmd0aDtuPGw7bisrKXt0PWFbbl07Zm9yKGxldCBhPTA7YTx0Lmxlbmd0aDthKyspe28rPTE7bGV0IG49dFthXS5hcmVhO2lmKGUueD5uWzBdJiZlLng8blsyXSYmZS55Pm5bMV0mJmUueTxuWzNdKXtpPW87YnJlYWt9fX1yZXR1cm4gaX1yZXR1cm4gaX1mdW5jdGlvbiBpc0luRXhhY3RMZWdlbmRBcmVhKGUsdCl7cmV0dXJuIGUueD50LnN0YXJ0LngmJmUueDx0LmVuZC54JiZlLnk+dC5zdGFydC55JiZlLnk8dC5lbmQueX1mdW5jdGlvbiBpc0luRXhhY3RDaGFydEFyZWEoZSx0KXtyZXR1cm4gZS54PD10LndpZHRoLXQuYXJlYVsxXSsxMCYmZS54Pj10LmFyZWFbM10tMTAmJmUueT49dC5hcmVhWzBdJiZlLnk8PXQuaGVpZ2h0LXQuYXJlYVsyXX1mdW5jdGlvbiBmaW5kUmFkYXJDaGFydEN1cnJlbnRJbmRleChlLHQsaSl7dmFyIGE9TWF0aC5QSSxvPTIqYS9pLG49LTE7aWYoaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGUsdC5jZW50ZXIsdC5yYWRpdXMpKXt2YXIgbD1mdW5jdGlvbihlKXtyZXR1cm4gMD5lJiYoZSs9MiphKSxlPjIqYSYmKGUtPTIqYSksZX0scj1NYXRoLmF0YW4yKHQuY2VudGVyLnktZS55LGUueC10LmNlbnRlci54KTtyPS0xKnIsMD5yJiYocis9MiphKTt2YXIgcz10LmFuZ2xlTGlzdC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGU9bCgtMSplKSxlfSk7cy5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIGk9bChlLW8vMikscz1sKGUrby8yKTtzPGkmJihzKz0yKmEpLChyPj1pJiZyPD1zfHxyKzIqYT49aSYmcisyKmE8PXMpJiYobj10KX0pfXJldHVybiBufWZ1bmN0aW9uIGZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleChlLHQpe2Zvcih2YXIgYSxvPS0xLG49MCxsPXQuc2VyaWVzLmxlbmd0aDtuPGw7bisrKWlmKGE9dC5zZXJpZXNbbl0sZS54PmEuZnVubmVsQXJlYVswXSYmZS54PGEuZnVubmVsQXJlYVsyXSYmZS55PmEuZnVubmVsQXJlYVsxXSYmZS55PGEuZnVubmVsQXJlYVszXSl7bz1uO2JyZWFrfXJldHVybiBvfWZ1bmN0aW9uIGZpbmRXb3JkQ2hhcnRDdXJyZW50SW5kZXgoZSx0KXtmb3IodmFyIGEsbz0tMSxuPTAsbD10Lmxlbmd0aDtuPGw7bisrKWlmKGE9dFtuXSxlLng+YS5hcmVhWzBdJiZlLng8YS5hcmVhWzJdJiZlLnk+YS5hcmVhWzFdJiZlLnk8YS5hcmVhWzNdKXtvPW47YnJlYWt9cmV0dXJuIG99ZnVuY3Rpb24gZmluZE1hcENoYXJ0Q3VycmVudEluZGV4KGUsdCl7Zm9yKHZhciBhLG89LTEsbj10LmNoYXJ0RGF0YS5tYXBEYXRhLGw9dC5zZXJpZXMscj1wb2ludFRvQ29vcmRpbmF0ZShlLnksZS54LG4uYm91bmRzLG4uc2NhbGUsbi54b2Zmc2V0LG4ueW9mZnNldCkscz1bci54LHIueV0sZD0wLGg9bC5sZW5ndGg7ZDxoO2QrKylpZihhPWxbZF0uZ2VvbWV0cnkuY29vcmRpbmF0ZXMsaXNQb2lXaXRoaW5Qb2x5KHMsYSkpe289ZDticmVha31yZXR1cm4gb31mdW5jdGlvbiBmaW5kUGllQ2hhcnRDdXJyZW50SW5kZXgoZSx0KXt2YXIgYT0tMTtpZihpc0luRXhhY3RQaWVDaGFydEFyZWEoZSx0LmNlbnRlcix0LnJhZGl1cykpe3ZhciBvPU1hdGguYXRhbjIodC5jZW50ZXIueS1lLnksZS54LXQuY2VudGVyLngpO289LW87Zm9yKHZhciBuLGw9MCxyPXQuc2VyaWVzLmxlbmd0aDtsPHI7bCsrKWlmKG49dC5zZXJpZXNbbF0saXNJbkFuZ2xlUmFuZ2UobyxuLl9zdGFydF8sbi5fc3RhcnRfKzIqbi5fcHJvcG9ydGlvbl8qTWF0aC5QSSkpe2E9bDticmVha319cmV0dXJuIGF9ZnVuY3Rpb24gaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGUsdCxpKXt2YXIgYT1NYXRoLnBvdztyZXR1cm4gYShlLngtdC54LDIpK2EoZS55LXQueSwyKTw9YShpLDIpfWZ1bmN0aW9uIHNwbGl0UG9pbnRzKGUpe3ZhciB0PVtdLGk9W107cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtudWxsPT09ZT8oaS5sZW5ndGgmJnQucHVzaChpKSxpPVtdKTppLnB1c2goZSl9KSxpLmxlbmd0aCYmdC5wdXNoKGkpLHR9ZnVuY3Rpb24gY2FsTGVnZW5kRGF0YShlLHQsaSxhKXt2YXIgbz1NYXRoLm1heCxuPU1hdGguZmxvb3I7bGV0IGw9e2FyZWE6e3N0YXJ0Ont4OjAseTowfSxlbmQ6e3g6MCx5OjB9LHdpZHRoOjAsaGVpZ2h0OjAsd2hvbGVXaWR0aDowLHdob2xlSGVpZ2h0OjB9LHBvaW50czpbXSx3aWR0aEFycjpbXSxoZWlnaHRBcnI6W119O2lmKCExPT09dC5sZWdlbmQuc2hvdylyZXR1cm4gYS5sZWdlbmREYXRhPWwsbDtsZXQgcj10LmxlZ2VuZC5wYWRkaW5nLHM9dC5sZWdlbmQubWFyZ2luLGQ9dC5sZWdlbmQuZm9udFNpemUsaD0xNSp0LnBpeGVsUmF0aW8seD01KnQucGl4ZWxSYXRpbyxjPW8odC5sZWdlbmQubGluZUhlaWdodCp0LnBpeGVsUmF0aW8sZCk7aWYoXCJ0b3BcIj09dC5sZWdlbmQucG9zaXRpb258fFwiYm90dG9tXCI9PXQubGVnZW5kLnBvc2l0aW9uKXtsZXQgYT1bXSxuPTAscD1bXSxnPVtdO2ZvcihsZXQgbz0wO288ZS5sZW5ndGg7bysrKXtsZXQgaT1lW29dLGw9aCt4K21lYXN1cmVUZXh0KGkubmFtZXx8XCJ1bmRlZmluZWRcIixkKSt0LmxlZ2VuZC5pdGVtR2FwO24rbD50LndpZHRoLXQucGFkZGluZ1sxXS10LnBhZGRpbmdbM10/KGEucHVzaChnKSxwLnB1c2gobi10LmxlZ2VuZC5pdGVtR2FwKSxuPWwsZz1baV0pOihuKz1sLGcucHVzaChpKSl9aWYoZy5sZW5ndGgpe2EucHVzaChnKSxwLnB1c2gobi10LmxlZ2VuZC5pdGVtR2FwKSxsLndpZHRoQXJyPXA7bGV0IGU9by5hcHBseShudWxsLHApO3N3aXRjaCh0LmxlZ2VuZC5mbG9hdCl7Y2FzZVwibGVmdFwiOmwuYXJlYS5zdGFydC54PXQucGFkZGluZ1szXSxsLmFyZWEuZW5kLng9dC5wYWRkaW5nWzNdKzIqcjticmVhaztjYXNlXCJyaWdodFwiOmwuYXJlYS5zdGFydC54PXQud2lkdGgtdC5wYWRkaW5nWzFdLWUtMipyLGwuYXJlYS5lbmQueD10LndpZHRoLXQucGFkZGluZ1sxXTticmVhaztkZWZhdWx0OmwuYXJlYS5zdGFydC54PSh0LndpZHRoLWUpLzItcixsLmFyZWEuZW5kLng9KHQud2lkdGgrZSkvMityO31sLmFyZWEud2lkdGg9ZSsyKnIsbC5hcmVhLndob2xlV2lkdGg9ZSsyKnIsbC5hcmVhLmhlaWdodD1hLmxlbmd0aCpjKzIqcixsLmFyZWEud2hvbGVIZWlnaHQ9YS5sZW5ndGgqYysyKnIrMipzLGwucG9pbnRzPWF9fWVsc2V7bGV0IGk9ZS5sZW5ndGgsYT10LmhlaWdodC10LnBhZGRpbmdbMF0tdC5wYWRkaW5nWzJdLTIqcy0yKnIsbz1NYXRoLm1pbihuKGEvYyksaSk7c3dpdGNoKGwuYXJlYS5oZWlnaHQ9bypjKzIqcixsLmFyZWEud2hvbGVIZWlnaHQ9bypjKzIqcix0LmxlZ2VuZC5mbG9hdCl7Y2FzZVwidG9wXCI6bC5hcmVhLnN0YXJ0Lnk9dC5wYWRkaW5nWzBdK3MsbC5hcmVhLmVuZC55PXQucGFkZGluZ1swXStzK2wuYXJlYS5oZWlnaHQ7YnJlYWs7Y2FzZVwiYm90dG9tXCI6bC5hcmVhLnN0YXJ0Lnk9dC5oZWlnaHQtdC5wYWRkaW5nWzJdLXMtbC5hcmVhLmhlaWdodCxsLmFyZWEuZW5kLnk9dC5oZWlnaHQtdC5wYWRkaW5nWzJdLXM7YnJlYWs7ZGVmYXVsdDpsLmFyZWEuc3RhcnQueT0odC5oZWlnaHQtbC5hcmVhLmhlaWdodCkvMixsLmFyZWEuZW5kLnk9KHQuaGVpZ2h0K2wuYXJlYS5oZWlnaHQpLzI7fWxldCBwPTA9PWklbz9pL286bihpL28rMSksZz1bXTtmb3IobGV0IHQsYT0wO2E8cDthKyspdD1lLnNsaWNlKGEqbyxhKm8rbyksZy5wdXNoKHQpO2lmKGwucG9pbnRzPWcsZy5sZW5ndGgpe2ZvcihsZXQgZT0wO2U8Zy5sZW5ndGg7ZSsrKXtsZXQgaT1nW2VdLGE9MDtmb3IobGV0IGUsbz0wO288aS5sZW5ndGg7bysrKWU9aCt4K21lYXN1cmVUZXh0KGlbb10ubmFtZXx8XCJ1bmRlZmluZWRcIixkKSt0LmxlZ2VuZC5pdGVtR2FwLGU+YSYmKGE9ZSk7bC53aWR0aEFyci5wdXNoKGEpLGwuaGVpZ2h0QXJyLnB1c2goaS5sZW5ndGgqYysyKnIpfWxldCBlPTA7Zm9yKGxldCB0PTA7dDxsLndpZHRoQXJyLmxlbmd0aDt0KyspZSs9bC53aWR0aEFyclt0XTtsLmFyZWEud2lkdGg9ZS10LmxlZ2VuZC5pdGVtR2FwKzIqcixsLmFyZWEud2hvbGVXaWR0aD1sLmFyZWEud2lkdGgrcn19c3dpdGNoKHQubGVnZW5kLnBvc2l0aW9uKXtjYXNlXCJ0b3BcIjpsLmFyZWEuc3RhcnQueT10LnBhZGRpbmdbMF0rcyxsLmFyZWEuZW5kLnk9dC5wYWRkaW5nWzBdK3MrbC5hcmVhLmhlaWdodDticmVhaztjYXNlXCJib3R0b21cIjpsLmFyZWEuc3RhcnQueT10LmhlaWdodC10LnBhZGRpbmdbMl0tbC5hcmVhLmhlaWdodC1zLGwuYXJlYS5lbmQueT10LmhlaWdodC10LnBhZGRpbmdbMl0tczticmVhaztjYXNlXCJsZWZ0XCI6bC5hcmVhLnN0YXJ0Lng9dC5wYWRkaW5nWzNdLGwuYXJlYS5lbmQueD10LnBhZGRpbmdbM10rbC5hcmVhLndpZHRoO2JyZWFrO2Nhc2VcInJpZ2h0XCI6bC5hcmVhLnN0YXJ0Lng9dC53aWR0aC10LnBhZGRpbmdbMV0tbC5hcmVhLndpZHRoLGwuYXJlYS5lbmQueD10LndpZHRoLXQucGFkZGluZ1sxXTt9cmV0dXJuIGEubGVnZW5kRGF0YT1sLGx9ZnVuY3Rpb24gY2FsQ2F0ZWdvcmllc0RhdGEoZSx0LGksYSl7dmFyIG89e2FuZ2xlOjAseEF4aXNIZWlnaHQ6aS54QXhpc0hlaWdodH0sbj1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbWVhc3VyZVRleHQoZSx0LnhBeGlzLmZvbnRTaXplfHxpLmZvbnRTaXplKX0pLGw9TWF0aC5tYXguYXBwbHkodGhpcyxuKTtyZXR1cm4hMD09dC54QXhpcy5yb3RhdGVMYWJlbCYmbCsyKmkueEF4aXNUZXh0UGFkZGluZz5hJiYoby5hbmdsZT00NSpNYXRoLlBJLzE4MCxvLnhBeGlzSGVpZ2h0PTIqaS54QXhpc1RleHRQYWRkaW5nK2wqTWF0aC5zaW4oby5hbmdsZSkpLG99ZnVuY3Rpb24gZ2V0WEF4aXNUZXh0TGlzdChlLHQpe3ZhciBhPU1hdGgubWluLG89TWF0aC5tYXgsbj00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06LTEsbD1kYXRhQ29tYmluZShlKSxyPVtdO2w9bC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lP2UuY29uc3RydWN0b3I9PUFycmF5P251bGwhPT1lOm51bGwhPT1lLnZhbHVlOm51bGwhPT1lfSksbC5tYXAoZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIGU/ZS5jb25zdHJ1Y3Rvcj09QXJyYXk/XCJjYW5kbGVcIj09dC50eXBlP2UubWFwKGZ1bmN0aW9uKGUpe3IucHVzaChlKX0pOnIucHVzaChlWzBdKTpyLnB1c2goZS52YWx1ZSk6ci5wdXNoKGUpfSk7dmFyIHM9MCxkPTA7aWYoMDxyLmxlbmd0aCYmKHM9YS5hcHBseSh0aGlzLHIpLGQ9by5hcHBseSh0aGlzLHIpKSwtMTxuPyhcIm51bWJlclwiPT10eXBlb2YgdC54QXhpcy5kYXRhW25dLm1pbiYmKHM9YSh0LnhBeGlzLmRhdGFbbl0ubWluLHMpKSxcIm51bWJlclwiPT10eXBlb2YgdC54QXhpcy5kYXRhW25dLm1heCYmKGQ9byh0LnhBeGlzLmRhdGFbbl0ubWF4LGQpKSk6KFwibnVtYmVyXCI9PXR5cGVvZiB0LnhBeGlzLm1pbiYmKHM9YSh0LnhBeGlzLm1pbixzKSksXCJudW1iZXJcIj09dHlwZW9mIHQueEF4aXMubWF4JiYoZD1vKHQueEF4aXMubWF4LGQpKSkscz09PWQpe3ZhciBoPWR8fDEwO2QrPWh9Zm9yKHZhciB4PWdldERhdGFSYW5nZShzLGQpLGM9eC5taW5SYW5nZSxwPXgubWF4UmFuZ2UsZz1bXSx5PShwLWMpL3QueEF4aXMuc3BsaXROdW1iZXIsZj0wO2Y8PXQueEF4aXMuc3BsaXROdW1iZXI7ZisrKWcucHVzaChjK3kqZik7cmV0dXJuIGd9ZnVuY3Rpb24gY2FsWEF4aXNEYXRhKGUsdCxpKXt2YXIgYT17YW5nbGU6MCx4QXhpc0hlaWdodDppLnhBeGlzSGVpZ2h0fTthLnJhbmdlcz1nZXRYQXhpc1RleHRMaXN0KGUsdCxpKSxhLnJhbmdlc0Zvcm1hdD1hLnJhbmdlcy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGU9dC54QXhpcy5mb3JtYXQ/dC54QXhpcy5mb3JtYXQoZSk6dXRpbC50b0ZpeGVkKGUsMiksZX0pO3ZhciBvPWEucmFuZ2VzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZT11dGlsLnRvRml4ZWQoZSwyKSxlPXQueEF4aXMuZm9ybWF0P3QueEF4aXMuZm9ybWF0KCtlKTplLGV9KTthPU9iamVjdC5hc3NpZ24oYSxnZXRYQXhpc1BvaW50cyhvLHQsaSkpO3ZhciBuPWEuZWFjaFNwYWNpbmcsbD1vLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbWVhc3VyZVRleHQoZSl9KSxyPU1hdGgubWF4LmFwcGx5KHRoaXMsbCk7cmV0dXJuIHIrMippLnhBeGlzVGV4dFBhZGRpbmc+biYmKGEuYW5nbGU9NDUqTWF0aC5QSS8xODAsYS54QXhpc0hlaWdodD0yKmkueEF4aXNUZXh0UGFkZGluZytyKk1hdGguc2luKGEuYW5nbGUpKSwhMD09PXQueEF4aXMuZGlzYWJsZWQmJihhLnhBeGlzSGVpZ2h0PTApLGF9ZnVuY3Rpb24gZ2V0UmFkYXJEYXRhUG9pbnRzKGUsdCxpLGEsbyl7dmFyIG49TWF0aC5tYXgsbD01PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06MSxyPW8uZXh0cmEucmFkYXJ8fHt9O3IubWF4PXIubWF4fHwwO3ZhciBzPW4oci5tYXgsbi5hcHBseShudWxsLGRhdGFDb21iaW5lKGEpKSksZD1bXTtmb3IobGV0IG49MDtuPGEubGVuZ3RoO24rKyl7bGV0IG89YVtuXSxyPXt9O3IuY29sb3I9by5jb2xvcixyLmxlZ2VuZFNoYXBlPW8ubGVnZW5kU2hhcGUsci5wb2ludFNoYXBlPW8ucG9pbnRTaGFwZSxyLmRhdGE9W10sby5kYXRhLmZvckVhY2goZnVuY3Rpb24oYSxvKXtsZXQgbj17fTtuLmFuZ2xlPWVbb10sbi5wcm9wb3J0aW9uPWEvcyxuLnBvc2l0aW9uPWNvbnZlcnRDb29yZGluYXRlT3JpZ2luKGkqbi5wcm9wb3J0aW9uKmwqTWF0aC5jb3Mobi5hbmdsZSksaSpuLnByb3BvcnRpb24qbCpNYXRoLnNpbihuLmFuZ2xlKSx0KSxyLmRhdGEucHVzaChuKX0pLGQucHVzaChyKX1yZXR1cm4gZH1mdW5jdGlvbiBnZXRQaWVEYXRhUG9pbnRzKGUsdCl7dmFyIGE9Mjxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOjEsbz0wLG49MDtmb3IobGV0IGEsbj0wO248ZS5sZW5ndGg7bisrKWE9ZVtuXSxhLmRhdGE9bnVsbD09PWEuZGF0YT8wOmEuZGF0YSxvKz1hLmRhdGE7Zm9yKGxldCBuLGw9MDtsPGUubGVuZ3RoO2wrKyluPWVbbF0sbi5kYXRhPW51bGw9PT1uLmRhdGE/MDpuLmRhdGEsbi5fcHJvcG9ydGlvbl89MD09PW8/MS9lLmxlbmd0aCphOm4uZGF0YS9vKmEsbi5fcmFkaXVzXz10O2ZvcihsZXQgYSxvPTA7bzxlLmxlbmd0aDtvKyspYT1lW29dLGEuX3N0YXJ0Xz1uLG4rPTIqYS5fcHJvcG9ydGlvbl8qTWF0aC5QSTtyZXR1cm4gZX1mdW5jdGlvbiBnZXRGdW5uZWxEYXRhUG9pbnRzKGUsdCl7dmFyIGE9Mjxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOjE7ZT1lLnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gcGFyc2VJbnQodC5kYXRhKS1wYXJzZUludChlLmRhdGEpfSk7Zm9yKGxldCBvPTA7bzxlLmxlbmd0aDtvKyspZVtvXS5yYWRpdXM9ZVtvXS5kYXRhL2VbMF0uZGF0YSp0KmEsZVtvXS5fcHJvcG9ydGlvbl89ZVtvXS5kYXRhL2VbMF0uZGF0YTtyZXR1cm4gZS5yZXZlcnNlKCl9ZnVuY3Rpb24gZ2V0Um9zZURhdGFQb2ludHMoZSx0LGEsbyl7dmFyIG49NDxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbNF0hPT12b2lkIDA/YXJndW1lbnRzWzRdOjEsbD0wLHI9MCxzPVtdO2ZvcihsZXQgbixyPTA7cjxlLmxlbmd0aDtyKyspbj1lW3JdLG4uZGF0YT1udWxsPT09bi5kYXRhPzA6bi5kYXRhLGwrPW4uZGF0YSxzLnB1c2gobi5kYXRhKTt2YXIgZD1NYXRoLm1pbi5hcHBseShudWxsLHMpLGg9TWF0aC5tYXguYXBwbHkobnVsbCxzKTtmb3IobGV0IHIscz0wO3M8ZS5sZW5ndGg7cysrKXI9ZVtzXSxyLmRhdGE9bnVsbD09PXIuZGF0YT8wOnIuZGF0YSwwPT09bHx8XCJhcmVhXCI9PXQ/KHIuX3Byb3BvcnRpb25fPXIuZGF0YS9sKm4sci5fcm9zZV9wcm9wb3J0aW9uXz0xL2UubGVuZ3RoKm4pOihyLl9wcm9wb3J0aW9uXz1yLmRhdGEvbCpuLHIuX3Jvc2VfcHJvcG9ydGlvbl89ci5kYXRhL2wqbiksci5fcmFkaXVzXz1hKyhvLWEpKigoci5kYXRhLWQpLyhoLWQpKTtmb3IobGV0IG4sbD0wO2w8ZS5sZW5ndGg7bCsrKW49ZVtsXSxuLl9zdGFydF89cixyKz0yKm4uX3Jvc2VfcHJvcG9ydGlvbl8qTWF0aC5QSTtyZXR1cm4gZX1mdW5jdGlvbiBnZXRBcmNiYXJEYXRhUG9pbnRzKGUsdCl7dmFyIGE9Mjxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOjE7MT09YSYmKGE9Ljk5OTk5OSk7Zm9yKGxldCBvLG49MDtuPGUubGVuZ3RoO24rKyl7bz1lW25dLG8uZGF0YT1udWxsPT09by5kYXRhPzA6by5kYXRhO2xldCBpO2k9XCJjaXJjbGVcIj09dC50eXBlPzI6dC5lbmRBbmdsZTx0LnN0YXJ0QW5nbGU/Mit0LmVuZEFuZ2xlLXQuc3RhcnRBbmdsZTp0LnN0YXJ0QW5nbGUtdC5lbmRBbmdsZSxvLl9wcm9wb3J0aW9uXz1pKm8uZGF0YSphK3Quc3RhcnRBbmdsZSwyPD1vLl9wcm9wb3J0aW9uXyYmKG8uX3Byb3BvcnRpb25fJT0yKX1yZXR1cm4gZX1mdW5jdGlvbiBnZXRHYXVnZUF4aXNQb2ludHMoZSx0LGEpe2xldCBvPXQ7Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspZVtuXS52YWx1ZT1udWxsPT09ZVtuXS52YWx1ZT8wOmVbbl0udmFsdWUsZVtuXS5fc3RhcnRBbmdsZV89byxlW25dLl9lbmRBbmdsZV89KHQtYSsxKSplW25dLnZhbHVlK3QsMjw9ZVtuXS5fZW5kQW5nbGVfJiYoZVtuXS5fZW5kQW5nbGVfJT0yKSxvPWVbbl0uX2VuZEFuZ2xlXztyZXR1cm4gZX1mdW5jdGlvbiBnZXRHYXVnZURhdGFQb2ludHMoZSx0LGEpe2xldCBvPTM8YXJndW1lbnRzLmxlbmd0aCYmYXJndW1lbnRzWzNdIT09dm9pZCAwP2FyZ3VtZW50c1szXToxO2ZvcihsZXQgbixsPTA7bDxlLmxlbmd0aDtsKyspe2lmKG49ZVtsXSxuLmRhdGE9bnVsbD09PW4uZGF0YT8wOm4uZGF0YSxcImF1dG9cIj09YS5wb2ludGVyLmNvbG9yKXtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKylpZihuLmRhdGE8PXRbZV0udmFsdWUpe24uY29sb3I9dFtlXS5jb2xvcjticmVha319ZWxzZSBuLmNvbG9yPWEucG9pbnRlci5jb2xvcjtsZXQgaT1hLnN0YXJ0QW5nbGUtYS5lbmRBbmdsZSsxO24uX2VuZEFuZ2xlXz1pKm4uZGF0YSthLnN0YXJ0QW5nbGUsbi5fb2xkQW5nbGVfPWEub2xkQW5nbGUsYS5vbGRBbmdsZTxhLmVuZEFuZ2xlJiYobi5fb2xkQW5nbGVfKz0yKSxuLl9wcm9wb3J0aW9uXz1uLmRhdGE+PWEub2xkRGF0YT8obi5fZW5kQW5nbGVfLW4uX29sZEFuZ2xlXykqbythLm9sZEFuZ2xlOm4uX29sZEFuZ2xlXy0obi5fb2xkQW5nbGVfLW4uX2VuZEFuZ2xlXykqbywyPD1uLl9wcm9wb3J0aW9uXyYmKG4uX3Byb3BvcnRpb25fJT0yKX1yZXR1cm4gZX1mdW5jdGlvbiBnZXRQaWVUZXh0TWF4TGVuZ3RoKGUpe2U9Z2V0UGllRGF0YVBvaW50cyhlKTtsZXQgdD0wO2ZvcihsZXQgYT0wO2E8ZS5sZW5ndGg7YSsrKXtsZXQgaT1lW2FdLG89aS5mb3JtYXQ/aS5mb3JtYXQoK2kuX3Byb3BvcnRpb25fLnRvRml4ZWQoMikpOnV0aWwudG9GaXhlZCgxMDAqaS5fcHJvcG9ydGlvbl8pK1wiJVwiO3Q9TWF0aC5tYXgodCxtZWFzdXJlVGV4dChvKSl9cmV0dXJuIHR9ZnVuY3Rpb24gZml4Q29sdW1lRGF0YShlLHQsaSxhLG8sbil7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZT9udWxsOihlLndpZHRoPU1hdGguY2VpbCgodC0yKm8uY29sdW1lUGFkZGluZykvaSksbi5leHRyYS5jb2x1bW4mJm4uZXh0cmEuY29sdW1uLndpZHRoJiYwPCtuLmV4dHJhLmNvbHVtbi53aWR0aCYmKGUud2lkdGg9TWF0aC5taW4oZS53aWR0aCwrbi5leHRyYS5jb2x1bW4ud2lkdGgpKSwwPj1lLndpZHRoJiYoZS53aWR0aD0xKSxlLngrPShhKy41LWkvMikqZS53aWR0aCxlKX0pfWZ1bmN0aW9uIGZpeENvbHVtZU1ldGVyRGF0YShlLHQsaSxhLG8sbixsKXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lP251bGw6KGUud2lkdGg9TWF0aC5jZWlsKCh0LTIqby5jb2x1bWVQYWRkaW5nKS8yKSxuLmV4dHJhLmNvbHVtbiYmbi5leHRyYS5jb2x1bW4ud2lkdGgmJjA8K24uZXh0cmEuY29sdW1uLndpZHRoJiYoZS53aWR0aD1NYXRoLm1pbihlLndpZHRoLCtuLmV4dHJhLmNvbHVtbi53aWR0aCkpLDA8YSYmKGUud2lkdGgtPTIqbCksZSl9KX1mdW5jdGlvbiBmaXhDb2x1bWVTdGFja0RhdGEoZSx0LGksYSxvLG4pe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWU/bnVsbDooZS53aWR0aD1NYXRoLmNlaWwoKHQtMipvLmNvbHVtZVBhZGRpbmcpLzIpLG4uZXh0cmEuY29sdW1uJiZuLmV4dHJhLmNvbHVtbi53aWR0aCYmMDwrbi5leHRyYS5jb2x1bW4ud2lkdGgmJihlLndpZHRoPU1hdGgubWluKGUud2lkdGgsK24uZXh0cmEuY29sdW1uLndpZHRoKSksZSl9KX1mdW5jdGlvbiBnZXRYQXhpc1BvaW50cyhlLHQpe3ZhciBpPXQud2lkdGgtdC5hcmVhWzFdLXQuYXJlYVszXSxhPXQuZW5hYmxlU2Nyb2xsP01hdGgubWluKHQueEF4aXMuaXRlbUNvdW50LGUubGVuZ3RoKTplLmxlbmd0aDsoXCJsaW5lXCI9PXQudHlwZXx8XCJhcmVhXCI9PXQudHlwZSkmJjE8YSYmXCJqdXN0aWZ5XCI9PXQueEF4aXMuYm91bmRhcnlHYXAmJihhLT0xKTt2YXIgbz1pL2Esbj1bXSxsPXQuYXJlYVszXSxyPXQud2lkdGgtdC5hcmVhWzFdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtuLnB1c2gobCt0Km8pfSksXCJqdXN0aWZ5XCIhPT10LnhBeGlzLmJvdW5kYXJ5R2FwJiYoITA9PT10LmVuYWJsZVNjcm9sbD9uLnB1c2gobCtlLmxlbmd0aCpvKTpuLnB1c2gocikpLHt4QXhpc1BvaW50czpuLHN0YXJ0WDpsLGVuZFg6cixlYWNoU3BhY2luZzpvfX1mdW5jdGlvbiBnZXRDYW5kbGVEYXRhUG9pbnRzKGUsdCxpLGEsbyxuKXt2YXIgbD1NYXRoLnJvdW5kLHI9Nzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbN10/YXJndW1lbnRzWzddOjEscz1bXSxkPW4uaGVpZ2h0LW4uYXJlYVswXS1uLmFyZWFbMl07cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlLGgpe2lmKG51bGw9PT1lKXMucHVzaChudWxsKTtlbHNle3ZhciB4PVtdO2UuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcz17eDphW2hdK2woby8yKX0sYz1lLnZhbHVlfHxlLHA9ZCooYy10KS8oaS10KTtwKj1yLHMueT1uLmhlaWdodC1sKHApLW4uYXJlYVsyXSx4LnB1c2gocyl9KSxzLnB1c2goeCl9fSksc31mdW5jdGlvbiBnZXREYXRhUG9pbnRzKGUsdCxpLGEsbyxuKXt2YXIgbD1NYXRoLnJvdW5kLHI9Nzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbN10/YXJndW1lbnRzWzddOjEscz1cImNlbnRlclwiOyhcImxpbmVcIj09bi50eXBlfHxcImFyZWFcIj09bi50eXBlKSYmKHM9bi54QXhpcy5ib3VuZGFyeUdhcCk7dmFyIGQ9W10saD1uLmhlaWdodC1uLmFyZWFbMF0tbi5hcmVhWzJdLHg9bi53aWR0aC1uLmFyZWFbMV0tbi5hcmVhWzNdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSxjKXtpZihudWxsPT09ZSlkLnB1c2gobnVsbCk7ZWxzZXt2YXIgcD17Y29sb3I6ZS5jb2xvcix4OmFbY119LGc9ZTtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUpaWYoZS5jb25zdHJ1Y3Rvcj09QXJyYXkpe2xldCB0LGksYTt0PVtdLmNvbmNhdChuLmNoYXJ0RGF0YS54QXhpc0RhdGEucmFuZ2VzKSxpPXQuc2hpZnQoKSxhPXQucG9wKCksZz1lWzFdLHAueD1uLmFyZWFbM10reCooZVswXS1pKS8oYS1pKX1lbHNlIGc9ZS52YWx1ZTtcImNlbnRlclwiPT1zJiYocC54Kz1sKG8vMikpO3ZhciB5PWgqKGctdCkvKGktdCk7eSo9cixwLnk9bi5oZWlnaHQtbCh5KS1uLmFyZWFbMl0sZC5wdXNoKHApfX0pLGR9ZnVuY3Rpb24gZ2V0U3RhY2tEYXRhUG9pbnRzKGUsdCxpLGEsbyxuLGwscixzKXt2YXIgZD1NYXRoLnJvdW5kLGg9OTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbOV0/YXJndW1lbnRzWzldOjEseD1bXSxjPW4uaGVpZ2h0LW4uYXJlYVswXS1uLmFyZWFbMl07cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlLGwpe2lmKG51bGw9PT1lKXgucHVzaChudWxsKTtlbHNle3ZhciBwPXtjb2xvcjplLmNvbG9yLHg6YVtsXStkKG8vMil9O2lmKDA8cil7dmFyIGc9MDtmb3IobGV0IGU9MDtlPD1yO2UrKylnKz1zW2VdLmRhdGFbbF07dmFyIHk9Zy1lLGY9YyooZy10KS8oaS10KSx1PWMqKHktdCkvKGktdCl9ZWxzZSB2YXIgZz1lLGY9YyooZy10KS8oaS10KSx1PTA7dmFyIG09dTtmKj1oLG0qPWgscC55PW4uaGVpZ2h0LWQoZiktbi5hcmVhWzJdLHAueTA9bi5oZWlnaHQtZChtKS1uLmFyZWFbMl0seC5wdXNoKHApfX0pLHh9ZnVuY3Rpb24gZ2V0WUF4aXNUZXh0TGlzdChlLHQsYSxvKXt2YXIgbixsPU1hdGgubWluLHI9TWF0aC5tYXgscz00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06LTE7bj1cInN0YWNrXCI9PW8/ZGF0YUNvbWJpbmVTdGFjayhlLHQuY2F0ZWdvcmllcy5sZW5ndGgpOmRhdGFDb21iaW5lKGUpO3ZhciBkPVtdO249bi5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lP2UuY29uc3RydWN0b3I9PUFycmF5P251bGwhPT1lOm51bGwhPT1lLnZhbHVlOm51bGwhPT1lfSksbi5tYXAoZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIGU/ZS5jb25zdHJ1Y3Rvcj09QXJyYXk/XCJjYW5kbGVcIj09dC50eXBlP2UubWFwKGZ1bmN0aW9uKGUpe2QucHVzaChlKX0pOmQucHVzaChlWzFdKTpkLnB1c2goZS52YWx1ZSk6ZC5wdXNoKGUpfSk7dmFyIGg9MCx4PTA7aWYoMDxkLmxlbmd0aCYmKGg9bC5hcHBseSh0aGlzLGQpLHg9ci5hcHBseSh0aGlzLGQpKSwtMTxzPyhcIm51bWJlclwiPT10eXBlb2YgdC55QXhpcy5kYXRhW3NdLm1pbiYmKGg9bCh0LnlBeGlzLmRhdGFbc10ubWluLGgpKSxcIm51bWJlclwiPT10eXBlb2YgdC55QXhpcy5kYXRhW3NdLm1heCYmKHg9cih0LnlBeGlzLmRhdGFbc10ubWF4LHgpKSk6KFwibnVtYmVyXCI9PXR5cGVvZiB0LnlBeGlzLm1pbiYmKGg9bCh0LnlBeGlzLm1pbixoKSksXCJudW1iZXJcIj09dHlwZW9mIHQueUF4aXMubWF4JiYoeD1yKHQueUF4aXMubWF4LHgpKSksaD09PXgpe3ZhciBjPXh8fDEwO3grPWN9Zm9yKHZhciBwPWdldERhdGFSYW5nZShoLHgpLGc9cC5taW5SYW5nZSx5PXAubWF4UmFuZ2UsZj1bXSx1PSh5LWcpL3QueUF4aXMuc3BsaXROdW1iZXIsbT0wO208PXQueUF4aXMuc3BsaXROdW1iZXI7bSsrKWYucHVzaChnK3UqbSk7cmV0dXJuIGYucmV2ZXJzZSgpfWZ1bmN0aW9uIGNhbFlBeGlzRGF0YShlLHQsYSl7dmFyIG89TWF0aC5tYXgsbj1hc3NpZ24oe30se3R5cGU6XCJcIn0sdC5leHRyYS5jb2x1bW4pLGw9dC55QXhpcy5kYXRhLmxlbmd0aCxyPUFycmF5KGwpO2lmKDA8bCl7Zm9yKGxldCB0PTA7dDxsO3QrKyl7clt0XT1bXTtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKyllW2ldLmluZGV4PT10JiZyW3RdLnB1c2goZVtpXSl9dmFyIHM9QXJyYXkobCksZD1BcnJheShsKSxoPUFycmF5KGwpO2ZvcihsZXQgZSx4PTA7eDxsO3grKyl7ZT10LnlBeGlzLmRhdGFbeF0sITA9PXQueUF4aXMuZGlzYWJsZWQmJihlLmRpc2FibGVkPSEwKSxzW3hdPWdldFlBeGlzVGV4dExpc3Qoclt4XSx0LGEsbi50eXBlLHgpO2xldCBpPWUuZm9udFNpemV8fGEuZm9udFNpemU7aFt4XT17cG9zaXRpb246ZS5wb3NpdGlvbj9lLnBvc2l0aW9uOlwibGVmdFwiLHdpZHRoOjB9LGRbeF09c1t4XS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQ9dXRpbC50b0ZpeGVkKHQsNiksdD1lLmZvcm1hdD9lLmZvcm1hdCgrdCk6dCxoW3hdLndpZHRoPW8oaFt4XS53aWR0aCxtZWFzdXJlVGV4dCh0LGkpKzUpLHR9KTtsZXQgbD1lLmNhbGlicmF0aW9uPzQqdC5waXhlbFJhdGlvOjA7aFt4XS53aWR0aCs9bCszKnQucGl4ZWxSYXRpbywhMD09PWUuZGlzYWJsZWQmJihoW3hdLndpZHRoPTApfX1lbHNle3ZhciBzPVssXSxkPVssXSxoPVssXTtzWzBdPWdldFlBeGlzVGV4dExpc3QoZSx0LGEsbi50eXBlKSxoWzBdPXtwb3NpdGlvbjpcImxlZnRcIix3aWR0aDowfTt2YXIgaT10LnlBeGlzLmZvbnRTaXplfHxhLmZvbnRTaXplO2RbMF09c1swXS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGU9dXRpbC50b0ZpeGVkKGUsNiksZT10LnlBeGlzLmZvcm1hdD90LnlBeGlzLmZvcm1hdCgrZSk6ZSxoWzBdLndpZHRoPW8oaFswXS53aWR0aCxtZWFzdXJlVGV4dChlLGkpKzUpLGV9KSxoWzBdLndpZHRoKz0zKnQucGl4ZWxSYXRpbywhMD09PXQueUF4aXMuZGlzYWJsZWQ/KGhbMF09e3Bvc2l0aW9uOlwibGVmdFwiLHdpZHRoOjB9LHQueUF4aXMuZGF0YVswXT17ZGlzYWJsZWQ6ITB9KTp0LnlBeGlzLmRhdGFbMF09e2Rpc2FibGVkOiExLHBvc2l0aW9uOlwibGVmdFwiLG1heDp0LnlBeGlzLm1heCxtaW46dC55QXhpcy5taW4sZm9ybWF0OnQueUF4aXMuZm9ybWF0fX1yZXR1cm57cmFuZ2VzRm9ybWF0OmQscmFuZ2VzOnMseUF4aXNXaWR0aDpofX1mdW5jdGlvbiBjYWxUb29sdGlwWUF4aXNEYXRhKGUsdCxhKXtsZXQgbz1bXS5jb25jYXQoYS5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlcyksbj1hLmhlaWdodC1hLmFyZWFbMF0tYS5hcmVhWzJdLGw9YS5hcmVhWzBdLHI9W107Zm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspe2xldCB0PW9bc10uc2hpZnQoKSxpPW9bc10ucG9wKCksZD10LSh0LWkpKihlLWwpL247ZD1hLnlBeGlzLmRhdGFbc10uZm9ybWF0P2EueUF4aXMuZGF0YVtzXS5mb3JtYXQoK2QpOmQudG9GaXhlZCgwKSxyLnB1c2goZCtcIlwiKX1yZXR1cm4gcn1mdW5jdGlvbiBjYWxNYXJrTGluZURhdGEoZSx0KXtsZXQgYSxvLG49dC5oZWlnaHQtdC5hcmVhWzBdLXQuYXJlYVsyXTtmb3IobGV0IGw9MDtsPGUubGVuZ3RoO2wrKyl7ZVtsXS55QXhpc0luZGV4PWVbbF0ueUF4aXNJbmRleD9lW2xdLnlBeGlzSW5kZXg6MDtsZXQgaT1bXS5jb25jYXQodC5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlW2xdLnlBeGlzSW5kZXhdKTthPWkucG9wKCksbz1pLnNoaWZ0KCk7bGV0IHI9biooZVtsXS52YWx1ZS1hKS8oby1hKTtlW2xdLnk9dC5oZWlnaHQtTWF0aC5yb3VuZChyKS10LmFyZWFbMl19cmV0dXJuIGV9ZnVuY3Rpb24gY29udGV4dFJvdGF0ZShlLHQpe3ZhciBpPU1hdGguUEk7ITA9PT10LnJvdGF0ZUxvY2s/ITAhPT10Ll9yb3RhdGVfJiYoZS50cmFuc2xhdGUodC5oZWlnaHQsMCksZS5yb3RhdGUoOTAqaS8xODApLHQuX3JvdGF0ZV89ITApOihlLnRyYW5zbGF0ZSh0LmhlaWdodCwwKSxlLnJvdGF0ZSg5MCppLzE4MCkpfWZ1bmN0aW9uIGRyYXdQb2ludFNoYXBlKGUsdCxpLGEsbyl7YS5iZWdpblBhdGgoKSxcImhvbGxvd1wiPT1vLmRhdGFQb2ludFNoYXBlVHlwZT8oYS5zZXRTdHJva2VTdHlsZSh0KSxhLnNldEZpbGxTdHlsZShvLmJhY2tncm91bmQpLGEuc2V0TGluZVdpZHRoKDIqby5waXhlbFJhdGlvKSk6KGEuc2V0U3Ryb2tlU3R5bGUoXCIjZmZmZmZmXCIpLGEuc2V0RmlsbFN0eWxlKHQpLGEuc2V0TGluZVdpZHRoKDEqby5waXhlbFJhdGlvKSksXCJkaWFtb25kXCI9PT1pP2UuZm9yRWFjaChmdW5jdGlvbihlKXtudWxsIT09ZSYmKGEubW92ZVRvKGUueCxlLnktNC41KSxhLmxpbmVUbyhlLngtNC41LGUueSksYS5saW5lVG8oZS54LGUueSs0LjUpLGEubGluZVRvKGUueCs0LjUsZS55KSxhLmxpbmVUbyhlLngsZS55LTQuNSkpfSk6XCJjaXJjbGVcIj09PWk/ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe251bGwhPT1lJiYoYS5tb3ZlVG8oZS54KzIuNSpvLnBpeGVsUmF0aW8sZS55KSxhLmFyYyhlLngsZS55LDMqby5waXhlbFJhdGlvLDAsMipNYXRoLlBJLCExKSl9KTpcInJlY3RcIj09PWk/ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe251bGwhPT1lJiYoYS5tb3ZlVG8oZS54LTMuNSxlLnktMy41KSxhLnJlY3QoZS54LTMuNSxlLnktMy41LDcsNykpfSk6XCJ0cmlhbmdsZVwiPT1pJiZlLmZvckVhY2goZnVuY3Rpb24oZSl7bnVsbCE9PWUmJihhLm1vdmVUbyhlLngsZS55LTQuNSksYS5saW5lVG8oZS54LTQuNSxlLnkrNC41KSxhLmxpbmVUbyhlLngrNC41LGUueSs0LjUpLGEubGluZVRvKGUueCxlLnktNC41KSl9KSxhLmNsb3NlUGF0aCgpLGEuZmlsbCgpLGEuc3Ryb2tlKCl9ZnVuY3Rpb24gZHJhd1JpbmdUaXRsZShlLHQsaSxhKXt2YXIgbz1lLnRpdGxlLmZvbnRTaXplfHx0LnRpdGxlRm9udFNpemUsbj1lLnN1YnRpdGxlLmZvbnRTaXplfHx0LnN1YnRpdGxlRm9udFNpemUsbD1lLnRpdGxlLm5hbWV8fFwiXCIscj1lLnN1YnRpdGxlLm5hbWV8fFwiXCIscz1lLnRpdGxlLmNvbG9yfHx0LnRpdGxlQ29sb3IsZD1lLnN1YnRpdGxlLmNvbG9yfHx0LnN1YnRpdGxlQ29sb3IsaD1sP286MCx4PXI/bjowLGM9NTtpZihyKXt2YXIgcD1tZWFzdXJlVGV4dChyLG4pLGc9YS54LXAvMisoZS5zdWJ0aXRsZS5vZmZzZXRYfHwwKSx5PWEueStuLzIrKGUuc3VidGl0bGUub2Zmc2V0WXx8MCk7bCYmKHkrPShoK2MpLzIpLGkuYmVnaW5QYXRoKCksaS5zZXRGb250U2l6ZShuKSxpLnNldEZpbGxTdHlsZShkKSxpLmZpbGxUZXh0KHIsZyx5KSxpLmNsb3NlUGF0aCgpLGkuc3Ryb2tlKCl9aWYobCl7dmFyIGY9bWVhc3VyZVRleHQobCxvKSx1PWEueC1mLzIrKGUudGl0bGUub2Zmc2V0WHx8MCksbT1hLnkrby8yKyhlLnRpdGxlLm9mZnNldFl8fDApO3ImJihtLT0oeCtjKS8yKSxpLmJlZ2luUGF0aCgpLGkuc2V0Rm9udFNpemUobyksaS5zZXRGaWxsU3R5bGUocyksaS5maWxsVGV4dChsLHUsbSksaS5jbG9zZVBhdGgoKSxpLnN0cm9rZSgpfX1mdW5jdGlvbiBkcmF3UG9pbnRUZXh0KGUsdCxpLGEpe3ZhciBvPXQuZGF0YTtlLmZvckVhY2goZnVuY3Rpb24oZSxuKXtpZihudWxsIT09ZSl7YS5iZWdpblBhdGgoKSxhLnNldEZvbnRTaXplKHQudGV4dFNpemV8fGkuZm9udFNpemUpLGEuc2V0RmlsbFN0eWxlKHQudGV4dENvbG9yfHxcIiM2NjY2NjZcIik7dmFyIGw9b1tuXTtcIm9iamVjdFwiPT10eXBlb2Ygb1tuXSYmbnVsbCE9PW9bbl0mJihvW25dLmNvbnN0cnVjdG9yPT1BcnJheT9sPW9bbl1bMV06bD1vW25dLnZhbHVlKTt2YXIgcj10LmZvcm1hdD90LmZvcm1hdChsKTpsO2EuZmlsbFRleHQocitcIlwiLGUueC1tZWFzdXJlVGV4dChyLHQudGV4dFNpemV8fGkuZm9udFNpemUpLzIsZS55LTQpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKX19KX1mdW5jdGlvbiBkcmF3R2F1Z2VMYWJlbChlLHQsaSxhLG8sbil7dmFyIGw9TWF0aC5QSTt0LT1lLndpZHRoLzIrby5nYXVnZUxhYmVsVGV4dE1hcmdpbjtsZXQgcj1lLnN0YXJ0QW5nbGUtZS5lbmRBbmdsZSsxLHM9ci9lLnNwbGl0TGluZS5zcGxpdE51bWJlcixkPWUuZW5kTnVtYmVyLWUuc3RhcnROdW1iZXIsaD1kL2Uuc3BsaXRMaW5lLnNwbGl0TnVtYmVyLHg9ZS5zdGFydEFuZ2xlLGM9ZS5zdGFydE51bWJlcjtmb3IobGV0IHI9MDtyPGUuc3BsaXRMaW5lLnNwbGl0TnVtYmVyKzE7cisrKXt2YXIgcD17eDp0Kk1hdGguY29zKHgqbCkseTp0Kk1hdGguc2luKHgqbCl9LGc9ZS5sYWJlbEZvcm1hdD9lLmxhYmVsRm9ybWF0KGMpOmM7cC54Kz1pLngtbWVhc3VyZVRleHQoZykvMixwLnkrPWkueTt2YXIgeT1wLngsZj1wLnk7bi5iZWdpblBhdGgoKSxuLnNldEZvbnRTaXplKG8uZm9udFNpemUpLG4uc2V0RmlsbFN0eWxlKGUubGFiZWxDb2xvcnx8XCIjNjY2NjY2XCIpLG4uZmlsbFRleHQoZyx5LGYrby5mb250U2l6ZS8yKSxuLmNsb3NlUGF0aCgpLG4uc3Ryb2tlKCkseCs9cywyPD14JiYoeCU9MiksYys9aH19ZnVuY3Rpb24gZHJhd1JhZGFyTGFiZWwoZSx0LGksYSxvLG4pe3ZhciBsPWEuZXh0cmEucmFkYXJ8fHt9O3QrPW8ucmFkYXJMYWJlbFRleHRNYXJnaW4sZS5mb3JFYWNoKGZ1bmN0aW9uKGUscil7dmFyIHM9e3g6dCpNYXRoLmNvcyhlKSx5OnQqTWF0aC5zaW4oZSl9LGQ9Y29udmVydENvb3JkaW5hdGVPcmlnaW4ocy54LHMueSxpKSxoPWQueCx4PWQueTt1dGlsLmFwcHJveGltYXRlbHlFcXVhbChzLngsMCk/aC09bWVhc3VyZVRleHQoYS5jYXRlZ29yaWVzW3JdfHxcIlwiKS8yOjA+cy54JiYoaC09bWVhc3VyZVRleHQoYS5jYXRlZ29yaWVzW3JdfHxcIlwiKSksbi5iZWdpblBhdGgoKSxuLnNldEZvbnRTaXplKG8uZm9udFNpemUpLG4uc2V0RmlsbFN0eWxlKGwubGFiZWxDb2xvcnx8XCIjNjY2NjY2XCIpLG4uZmlsbFRleHQoYS5jYXRlZ29yaWVzW3JdfHxcIlwiLGgseCtvLmZvbnRTaXplLzIpLG4uY2xvc2VQYXRoKCksbi5zdHJva2UoKX0pfWZ1bmN0aW9uIGRyYXdQaWVUZXh0KGUsdCxhLG8saSxuKXt2YXIgbD1NYXRoLmNvcyxyPU1hdGguc2luLHM9TWF0aC5taW4sZD1NYXRoLm1heCxoPU1hdGguUEkseD1hLnBpZUNoYXJ0TGluZVBhZGRpbmcsYz1bXSxwPW51bGwsZz1lLm1hcChmdW5jdGlvbihlKXt2YXIgdD1lLmZvcm1hdD9lLmZvcm1hdCgrZS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSk6dXRpbC50b0ZpeGVkKDEwMCplLl9wcm9wb3J0aW9uXy50b0ZpeGVkKDQpKStcIiVcIjtlLl9yb3NlX3Byb3BvcnRpb25fJiYoZS5fcHJvcG9ydGlvbl89ZS5fcm9zZV9wcm9wb3J0aW9uXyk7dmFyIGk9MipoLShlLl9zdGFydF8rMipoKmUuX3Byb3BvcnRpb25fLzIpLGE9ZS5jb2xvcixvPWUuX3JhZGl1c187cmV0dXJue2FyYzppLHRleHQ6dCxjb2xvcjphLHJhZGl1czpvLHRleHRDb2xvcjplLnRleHRDb2xvcix0ZXh0U2l6ZTplLnRleHRTaXplfX0pO2ZvcihsZXQgaD0wO2g8Zy5sZW5ndGg7aCsrKXtsZXQgZT1nW2hdLHQ9bChlLmFyYykqKGUucmFkaXVzK3gpLGk9cihlLmFyYykqKGUucmFkaXVzK3gpLG89bChlLmFyYykqZS5yYWRpdXMsbj1yKGUuYXJjKSplLnJhZGl1cyx5PTA8PXQ/dCthLnBpZUNoYXJ0VGV4dFBhZGRpbmc6dC1hLnBpZUNoYXJ0VGV4dFBhZGRpbmcsZj1pLHU9bWVhc3VyZVRleHQoZS50ZXh0LGUudGV4dFNpemV8fGEuZm9udFNpemUpLG09ZjtwJiZ1dGlsLmlzU2FtZVhDb29yZGluYXRlQXJlYShwLnN0YXJ0LHt4Onl9KSYmKDA8eT9tPXMoZixwLnN0YXJ0LnkpOjA+dD9tPWQoZixwLnN0YXJ0LnkpOjA8Zj9tPWQoZixwLnN0YXJ0LnkpOm09cyhmLHAuc3RhcnQueSkpLDA+eSYmKHktPXUpO2xldCBTPXtsaW5lU3RhcnQ6e3g6byx5Om59LGxpbmVFbmQ6e3g6dCx5Oml9LHN0YXJ0Ont4OnkseTptfSx3aWR0aDp1LGhlaWdodDphLmZvbnRTaXplLHRleHQ6ZS50ZXh0LGNvbG9yOmUuY29sb3IsdGV4dENvbG9yOmUudGV4dENvbG9yLHRleHRTaXplOmUudGV4dFNpemV9O3A9YXZvaWRDb2xsaXNpb24oUyxwKSxjLnB1c2gocCl9Zm9yKGxldCBsPTA7bDxjLmxlbmd0aDtsKyspe2xldCBlPWNbbF0saT1jb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihlLmxpbmVTdGFydC54LGUubGluZVN0YXJ0Lnksbikscj1jb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihlLmxpbmVFbmQueCxlLmxpbmVFbmQueSxuKSxzPWNvbnZlcnRDb29yZGluYXRlT3JpZ2luKGUuc3RhcnQueCxlLnN0YXJ0Lnksbik7by5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLG8uc2V0Rm9udFNpemUoYS5mb250U2l6ZSksby5iZWdpblBhdGgoKSxvLnNldFN0cm9rZVN0eWxlKGUuY29sb3IpLG8uc2V0RmlsbFN0eWxlKGUuY29sb3IpLG8ubW92ZVRvKGkueCxpLnkpO2xldCBkPTA+ZS5zdGFydC54P3MueCtlLndpZHRoOnMueCx4PTA+ZS5zdGFydC54P3MueC01OnMueCs1O28ucXVhZHJhdGljQ3VydmVUbyhyLngsci55LGQscy55KSxvLm1vdmVUbyhpLngsaS55KSxvLnN0cm9rZSgpLG8uY2xvc2VQYXRoKCksby5iZWdpblBhdGgoKSxvLm1vdmVUbyhzLngrZS53aWR0aCxzLnkpLG8uYXJjKGQscy55LDIsMCwyKmgpLG8uY2xvc2VQYXRoKCksby5maWxsKCksby5iZWdpblBhdGgoKSxvLnNldEZvbnRTaXplKGUudGV4dFNpemV8fGEuZm9udFNpemUpLG8uc2V0RmlsbFN0eWxlKGUudGV4dENvbG9yfHxcIiM2NjY2NjZcIiksby5maWxsVGV4dChlLnRleHQseCxzLnkrMyksby5jbG9zZVBhdGgoKSxvLnN0cm9rZSgpLG8uY2xvc2VQYXRoKCl9fWZ1bmN0aW9uIGRyYXdUb29sVGlwU3BsaXRMaW5lKGUsdCxpLGEpe3ZhciBvPXQuZXh0cmEudG9vbHRpcHx8e307by5ncmlkVHlwZT1udWxsPT1vLmdyaWRUeXBlP1wic29saWRcIjpvLmdyaWRUeXBlLG8uZGFzaExlbmd0aD1udWxsPT1vLmRhc2hMZW5ndGg/NDpvLmRhc2hMZW5ndGg7dmFyIG49dC5hcmVhWzBdLGw9dC5oZWlnaHQtdC5hcmVhWzJdO2lmKFwiZGFzaFwiPT1vLmdyaWRUeXBlJiZhLnNldExpbmVEYXNoKFtvLmRhc2hMZW5ndGgsby5kYXNoTGVuZ3RoXSksYS5zZXRTdHJva2VTdHlsZShvLmdyaWRDb2xvcnx8XCIjY2NjY2NjXCIpLGEuc2V0TGluZVdpZHRoKDEqdC5waXhlbFJhdGlvKSxhLmJlZ2luUGF0aCgpLGEubW92ZVRvKGUsbiksYS5saW5lVG8oZSxsKSxhLnN0cm9rZSgpLGEuc2V0TGluZURhc2goW10pLG8ueEF4aXNMYWJlbCl7bGV0IG49dC5jYXRlZ29yaWVzW3QudG9vbHRpcC5pbmRleF07YS5zZXRGb250U2l6ZShpLmZvbnRTaXplKTtsZXQgcj1tZWFzdXJlVGV4dChuLGkuZm9udFNpemUpLHM9ZS0uNSpyLGQ9bDthLmJlZ2luUGF0aCgpLGEuc2V0RmlsbFN0eWxlKGhleFRvUmdiKG8ubGFiZWxCZ0NvbG9yfHxpLnRvb2xUaXBCYWNrZ3JvdW5kLG8ubGFiZWxCZ09wYWNpdHl8fGkudG9vbFRpcE9wYWNpdHkpKSxhLnNldFN0cm9rZVN0eWxlKG8ubGFiZWxCZ0NvbG9yfHxpLnRvb2xUaXBCYWNrZ3JvdW5kKSxhLnNldExpbmVXaWR0aCgxKnQucGl4ZWxSYXRpbyksYS5yZWN0KHMtaS50b29sVGlwUGFkZGluZyxkLHIrMippLnRvb2xUaXBQYWRkaW5nLGkuZm9udFNpemUrMippLnRvb2xUaXBQYWRkaW5nKSxhLmNsb3NlUGF0aCgpLGEuc3Ryb2tlKCksYS5maWxsKCksYS5iZWdpblBhdGgoKSxhLnNldEZvbnRTaXplKGkuZm9udFNpemUpLGEuc2V0RmlsbFN0eWxlKG8ubGFiZWxGb250Q29sb3J8fGkuZm9udENvbG9yKSxhLmZpbGxUZXh0KG4rXCJcIixzLGQraS50b29sVGlwUGFkZGluZytpLmZvbnRTaXplKSxhLmNsb3NlUGF0aCgpLGEuc3Ryb2tlKCl9fWZ1bmN0aW9uIGRyYXdNYXJrTGluZShlLHQsYSl7bGV0IG89YXNzaWduKHt9LHt0eXBlOlwic29saWRcIixkYXNoTGVuZ3RoOjQsZGF0YTpbXX0sZS5leHRyYS5tYXJrTGluZSksbj1lLmFyZWFbM10sbD1lLndpZHRoLWUuYXJlYVsxXSxyPWNhbE1hcmtMaW5lRGF0YShvLmRhdGEsZSk7Zm9yKGxldCBzLGQ9MDtkPHIubGVuZ3RoO2QrKylpZihzPWFzc2lnbih7fSx7bGluZUNvbG9yOlwiI0RFNEE0MlwiLHNob3dMYWJlbDohMSxsYWJlbEZvbnRDb2xvcjpcIiM2NjY2NjZcIixsYWJlbEJnQ29sb3I6XCIjREZFOEZGXCIsbGFiZWxCZ09wYWNpdHk6LjgseUF4aXNJbmRleDowfSxyW2RdKSxcImRhc2hcIj09by50eXBlJiZhLnNldExpbmVEYXNoKFtvLmRhc2hMZW5ndGgsby5kYXNoTGVuZ3RoXSksYS5zZXRTdHJva2VTdHlsZShzLmxpbmVDb2xvciksYS5zZXRMaW5lV2lkdGgoMSplLnBpeGVsUmF0aW8pLGEuYmVnaW5QYXRoKCksYS5tb3ZlVG8obixzLnkpLGEubGluZVRvKGwscy55KSxhLnN0cm9rZSgpLGEuc2V0TGluZURhc2goW10pLHMuc2hvd0xhYmVsKXtsZXQgaT1lLnlBeGlzLmZvcm1hdD9lLnlBeGlzLmZvcm1hdCgrcy52YWx1ZSk6cy52YWx1ZTthLnNldEZvbnRTaXplKHQuZm9udFNpemUpO2xldCBvPW1lYXN1cmVUZXh0KGksdC5mb250U2l6ZSksbj1lLnBhZGRpbmdbM10rdC55QXhpc1RpdGxlV2lkdGgtdC50b29sVGlwUGFkZGluZyxsPU1hdGgubWF4KGUuYXJlYVszXSxvKzIqdC50b29sVGlwUGFkZGluZykscj1sLW4sZD1zLnk7YS5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Iocy5sYWJlbEJnQ29sb3Iscy5sYWJlbEJnT3BhY2l0eSkpLGEuc2V0U3Ryb2tlU3R5bGUocy5sYWJlbEJnQ29sb3IpLGEuc2V0TGluZVdpZHRoKDEqZS5waXhlbFJhdGlvKSxhLmJlZ2luUGF0aCgpLGEucmVjdChuLGQtLjUqdC5mb250U2l6ZS10LnRvb2xUaXBQYWRkaW5nLHIsdC5mb250U2l6ZSsyKnQudG9vbFRpcFBhZGRpbmcpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKSxhLmZpbGwoKSxhLmJlZ2luUGF0aCgpLGEuc2V0Rm9udFNpemUodC5mb250U2l6ZSksYS5zZXRGaWxsU3R5bGUocy5sYWJlbEZvbnRDb2xvciksYS5maWxsVGV4dChpK1wiXCIsbisoci1vKS8yLGQrLjUqdC5mb250U2l6ZSksYS5zdHJva2UoKX19ZnVuY3Rpb24gZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShlLHQsYSxpKXt2YXIgbz1NYXRoLm1heCxuPWFzc2lnbih7fSx7Z3JpZFR5cGU6XCJzb2xpZFwiLGRhc2hMZW5ndGg6NH0sZS5leHRyYS50b29sdGlwKSxsPWUuYXJlYVszXSxyPWUud2lkdGgtZS5hcmVhWzFdO2lmKFwiZGFzaFwiPT1uLmdyaWRUeXBlJiZhLnNldExpbmVEYXNoKFtuLmRhc2hMZW5ndGgsbi5kYXNoTGVuZ3RoXSksYS5zZXRTdHJva2VTdHlsZShuLmdyaWRDb2xvcnx8XCIjY2NjY2NjXCIpLGEuc2V0TGluZVdpZHRoKDEqZS5waXhlbFJhdGlvKSxhLmJlZ2luUGF0aCgpLGEubW92ZVRvKGwsZS50b29sdGlwLm9mZnNldC55KSxhLmxpbmVUbyhyLGUudG9vbHRpcC5vZmZzZXQueSksYS5zdHJva2UoKSxhLnNldExpbmVEYXNoKFtdKSxuLnlBeGlzTGFiZWwpe2xldCBsPWNhbFRvb2x0aXBZQXhpc0RhdGEoZS50b29sdGlwLm9mZnNldC55LGUuc2VyaWVzLGUsdCxpKSxyPWUuY2hhcnREYXRhLnlBeGlzRGF0YS55QXhpc1dpZHRoLHM9ZS5hcmVhWzNdLGQ9ZS53aWR0aC1lLmFyZWFbMV07Zm9yKGxldCBoPTA7aDxsLmxlbmd0aDtoKyspe2Euc2V0Rm9udFNpemUodC5mb250U2l6ZSk7bGV0IGkseCxjLHA9bWVhc3VyZVRleHQobFtoXSx0LmZvbnRTaXplKTtcImxlZnRcIj09cltoXS5wb3NpdGlvbj8oaT1zLXJbaF0ud2lkdGgseD1vKGksaStwKzIqdC50b29sVGlwUGFkZGluZykpOihpPWQseD1vKGkrcltoXS53aWR0aCxpK3ArMip0LnRvb2xUaXBQYWRkaW5nKSksYz14LWk7bGV0IGc9aSsoYy1wKS8yLHk9ZS50b29sdGlwLm9mZnNldC55O2EuYmVnaW5QYXRoKCksYS5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Iobi5sYWJlbEJnQ29sb3J8fHQudG9vbFRpcEJhY2tncm91bmQsbi5sYWJlbEJnT3BhY2l0eXx8dC50b29sVGlwT3BhY2l0eSkpLGEuc2V0U3Ryb2tlU3R5bGUobi5sYWJlbEJnQ29sb3J8fHQudG9vbFRpcEJhY2tncm91bmQpLGEuc2V0TGluZVdpZHRoKDEqZS5waXhlbFJhdGlvKSxhLnJlY3QoaSx5LS41KnQuZm9udFNpemUtdC50b29sVGlwUGFkZGluZyxjLHQuZm9udFNpemUrMip0LnRvb2xUaXBQYWRkaW5nKSxhLmNsb3NlUGF0aCgpLGEuc3Ryb2tlKCksYS5maWxsKCksYS5iZWdpblBhdGgoKSxhLnNldEZvbnRTaXplKHQuZm9udFNpemUpLGEuc2V0RmlsbFN0eWxlKG4ubGFiZWxGb250Q29sb3J8fHQuZm9udENvbG9yKSxhLmZpbGxUZXh0KGxbaF0sZyx5Ky41KnQuZm9udFNpemUpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKSxcImxlZnRcIj09cltoXS5wb3NpdGlvbj9zLT1yW2hdLndpZHRoK2UueUF4aXMucGFkZGluZzpkKz1yW2hdLndpZHRoK2UueUF4aXMucGFkZGluZ319fWZ1bmN0aW9uIGRyYXdUb29sVGlwU3BsaXRBcmVhKGUsdCxpLGEsbyl7dmFyIG49YXNzaWduKHt9LHthY3RpdmVCZ0NvbG9yOlwiIzAwMDAwMFwiLGFjdGl2ZUJnT3BhY2l0eTouMDh9LHQuZXh0cmEudG9vbHRpcCksbD10LmFyZWFbMF0scj10LmhlaWdodC10LmFyZWFbMl07YS5iZWdpblBhdGgoKSxhLnNldEZpbGxTdHlsZShoZXhUb1JnYihuLmFjdGl2ZUJnQ29sb3Isbi5hY3RpdmVCZ09wYWNpdHkpKSxhLnJlY3QoZS1vLzIsbCxvLHItbCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKX1mdW5jdGlvbiBkcmF3VG9vbFRpcChlLHQsaSxhLG8pe3ZhciBuPU1hdGgucm91bmQsbD1hc3NpZ24oe30se3Nob3dCb3g6ITAsYmdDb2xvcjpcIiMwMDAwMDBcIixiZ09wYWNpdHk6LjcsZm9udENvbG9yOlwiI0ZGRkZGRlwifSxpLmV4dHJhLnRvb2x0aXApLHI9NCppLnBpeGVsUmF0aW8scz01KmkucGl4ZWxSYXRpbyxkPTgqaS5waXhlbFJhdGlvLGg9ITE7KFwibGluZVwiPT1pLnR5cGV8fFwiYXJlYVwiPT1pLnR5cGV8fFwiY2FuZGxlXCI9PWkudHlwZXx8XCJtaXhcIj09aS50eXBlKSYmZHJhd1Rvb2xUaXBTcGxpdExpbmUoaS50b29sdGlwLm9mZnNldC54LGksYSxvKSx0PWFzc2lnbih7eDowLHk6MH0sdCksdC55LT04KmkucGl4ZWxSYXRpbzt2YXIgeD1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbWVhc3VyZVRleHQoZS50ZXh0LGEuZm9udFNpemUpfSksYz1yK3MrNCphLnRvb2xUaXBQYWRkaW5nK01hdGgubWF4LmFwcGx5KG51bGwseCkscD0yKmEudG9vbFRpcFBhZGRpbmcrZS5sZW5ndGgqYS50b29sVGlwTGluZUhlaWdodDshMT09bC5zaG93Qm94fHwodC54LU1hdGguYWJzKGkuX3Njcm9sbERpc3RhbmNlXykrZCtjPmkud2lkdGgmJihoPSEwKSxwK3QueT5pLmhlaWdodCYmKHQueT1pLmhlaWdodC1wKSxvLmJlZ2luUGF0aCgpLG8uc2V0RmlsbFN0eWxlKGhleFRvUmdiKGwuYmdDb2xvcnx8YS50b29sVGlwQmFja2dyb3VuZCxsLmJnT3BhY2l0eXx8YS50b29sVGlwT3BhY2l0eSkpLGg/KG8ubW92ZVRvKHQueCx0LnkrMTAqaS5waXhlbFJhdGlvKSxvLmxpbmVUbyh0LngtZCx0LnkrMTAqaS5waXhlbFJhdGlvLTUqaS5waXhlbFJhdGlvKSxvLmxpbmVUbyh0LngtZCx0LnkpLG8ubGluZVRvKHQueC1kLW4oYyksdC55KSxvLmxpbmVUbyh0LngtZC1uKGMpLHQueStwKSxvLmxpbmVUbyh0LngtZCx0LnkrcCksby5saW5lVG8odC54LWQsdC55KzEwKmkucGl4ZWxSYXRpbys1KmkucGl4ZWxSYXRpbyksby5saW5lVG8odC54LHQueSsxMCppLnBpeGVsUmF0aW8pKTooby5tb3ZlVG8odC54LHQueSsxMCppLnBpeGVsUmF0aW8pLG8ubGluZVRvKHQueCtkLHQueSsxMCppLnBpeGVsUmF0aW8tNSppLnBpeGVsUmF0aW8pLG8ubGluZVRvKHQueCtkLHQueSksby5saW5lVG8odC54K2QrbihjKSx0LnkpLG8ubGluZVRvKHQueCtkK24oYyksdC55K3ApLG8ubGluZVRvKHQueCtkLHQueStwKSxvLmxpbmVUbyh0LngrZCx0LnkrMTAqaS5waXhlbFJhdGlvKzUqaS5waXhlbFJhdGlvKSxvLmxpbmVUbyh0LngsdC55KzEwKmkucGl4ZWxSYXRpbykpLG8uY2xvc2VQYXRoKCksby5maWxsKCksZS5mb3JFYWNoKGZ1bmN0aW9uKGUsaSl7aWYobnVsbCE9PWUuY29sb3Ipe28uYmVnaW5QYXRoKCksby5zZXRGaWxsU3R5bGUoZS5jb2xvcik7dmFyIG49dC54K2QrMiphLnRvb2xUaXBQYWRkaW5nLGw9dC55KyhhLnRvb2xUaXBMaW5lSGVpZ2h0LWEuZm9udFNpemUpLzIrYS50b29sVGlwTGluZUhlaWdodCppK2EudG9vbFRpcFBhZGRpbmcrMTtoJiYobj10LngtYy1kKzIqYS50b29sVGlwUGFkZGluZyksby5maWxsUmVjdChuLGwscixhLmZvbnRTaXplKSxvLmNsb3NlUGF0aCgpfX0pLGUuZm9yRWFjaChmdW5jdGlvbihlLGkpe3ZhciBuPXQueCtkKzIqYS50b29sVGlwUGFkZGluZytyK3M7aCYmKG49dC54LWMtZCsyKmEudG9vbFRpcFBhZGRpbmcrICtyK3MpO3ZhciB4PXQueSsoYS50b29sVGlwTGluZUhlaWdodC1hLmZvbnRTaXplKS8yK2EudG9vbFRpcExpbmVIZWlnaHQqaSthLnRvb2xUaXBQYWRkaW5nO28uYmVnaW5QYXRoKCksby5zZXRGb250U2l6ZShhLmZvbnRTaXplKSxvLnNldEZpbGxTdHlsZShsLmZvbnRDb2xvciksby5maWxsVGV4dChlLnRleHQsbix4K2EuZm9udFNpemUpLG8uY2xvc2VQYXRoKCksby5zdHJva2UoKX0pKX1mdW5jdGlvbiBkcmF3WUF4aXNUaXRsZShlLHQsaSxhKXt2YXIgbz1pLnhBeGlzSGVpZ2h0Kyh0LmhlaWdodC1pLnhBeGlzSGVpZ2h0LW1lYXN1cmVUZXh0KGUpKS8yO2Euc2F2ZSgpLGEuYmVnaW5QYXRoKCksYS5zZXRGb250U2l6ZShpLmZvbnRTaXplKSxhLnNldEZpbGxTdHlsZSh0LnlBeGlzLnRpdGxlRm9udENvbG9yfHxcIiMzMzMzMzNcIiksYS50cmFuc2xhdGUoMCx0LmhlaWdodCksYS5yb3RhdGUoLTkwKk1hdGguUEkvMTgwKSxhLmZpbGxUZXh0KGUsbyx0LnBhZGRpbmdbM10rLjUqaS5mb250U2l6ZSksYS5jbG9zZVBhdGgoKSxhLnN0cm9rZSgpLGEucmVzdG9yZSgpfWZ1bmN0aW9uIGRyYXdDb2x1bW5EYXRhUG9pbnRzKGUsdCxpLGEpe2xldCBvPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLG49dC5jaGFydERhdGEueEF4aXNEYXRhLGw9bi54QXhpc1BvaW50cyxyPW4uZWFjaFNwYWNpbmcscz1hc3NpZ24oe30se3R5cGU6XCJncm91cFwiLHdpZHRoOnIvMixtZXRlcjp7Ym9yZGVyOjQsZmlsbENvbG9yOlwiI0ZGRkZGRlwifX0sdC5leHRyYS5jb2x1bW4pLGQ9W107YS5zYXZlKCk7bGV0IGg9LTIseD1sLmxlbmd0aCsyO3JldHVybiB0Ll9zY3JvbGxEaXN0YW5jZV8mJjAhPT10Ll9zY3JvbGxEaXN0YW5jZV8mJiEwPT09dC5lbmFibGVTY3JvbGwmJihhLnRyYW5zbGF0ZSh0Ll9zY3JvbGxEaXN0YW5jZV8sMCksaD1NYXRoLmZsb29yKC10Ll9zY3JvbGxEaXN0YW5jZV8vciktMix4PWgrdC54QXhpcy5pdGVtQ291bnQrNCksdC50b29sdGlwJiZ0LnRvb2x0aXAudGV4dExpc3QmJnQudG9vbHRpcC50ZXh0TGlzdC5sZW5ndGgmJjE9PT1vJiZkcmF3VG9vbFRpcFNwbGl0QXJlYSh0LnRvb2x0aXAub2Zmc2V0LngsdCxpLGEsciksZS5mb3JFYWNoKGZ1bmN0aW9uKG4sYyl7bGV0IHAsZyx5O3A9W10uY29uY2F0KHQuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbbi5pbmRleF0pLGc9cC5wb3AoKSx5PXAuc2hpZnQoKTt2YXIgZj1uLmRhdGE7c3dpdGNoKHMudHlwZSl7Y2FzZVwiZ3JvdXBcIjp2YXIgdT1nZXREYXRhUG9pbnRzKGYsZyx5LGwscix0LGksbyksbT1nZXRTdGFja0RhdGFQb2ludHMoZixnLHksbCxyLHQsaSxjLGUsbyk7ZC5wdXNoKG0pLHU9Zml4Q29sdW1lRGF0YSh1LHIsZS5sZW5ndGgsYyxpLHQpO2ZvcihsZXQgZSxvPTA7bzx1Lmxlbmd0aDtvKyspaWYoZT11W29dLG51bGwhPT1lJiZvPmgmJm88eCl7YS5iZWdpblBhdGgoKSxhLnNldFN0cm9rZVN0eWxlKGUuY29sb3J8fG4uY29sb3IpLGEuc2V0TGluZVdpZHRoKDEpLGEuc2V0RmlsbFN0eWxlKGUuY29sb3J8fG4uY29sb3IpO3ZhciBTPWUueC1lLndpZHRoLzIsVD10LmhlaWdodC1lLnktdC5hcmVhWzJdO2EubW92ZVRvKFMtMSxlLnkpLGEubGluZVRvKFMrZS53aWR0aC0yLGUueSksYS5saW5lVG8oUytlLndpZHRoLTIsdC5oZWlnaHQtdC5hcmVhWzJdKSxhLmxpbmVUbyhTLHQuaGVpZ2h0LXQuYXJlYVsyXSksYS5saW5lVG8oUyxlLnkpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKSxhLmZpbGwoKX07YnJlYWs7Y2FzZVwic3RhY2tcIjp2YXIgdT1nZXRTdGFja0RhdGFQb2ludHMoZixnLHksbCxyLHQsaSxjLGUsbyk7ZC5wdXNoKHUpLHU9Zml4Q29sdW1lU3RhY2tEYXRhKHUscixlLmxlbmd0aCxjLGksdCxlKTtmb3IobGV0IGUsbz0wO288dS5sZW5ndGg7bysrKWlmKGU9dVtvXSxudWxsIT09ZSYmbz5oJiZvPHgpe2EuYmVnaW5QYXRoKCksYS5zZXRGaWxsU3R5bGUoZS5jb2xvcnx8bi5jb2xvcik7dmFyIFM9ZS54LWUud2lkdGgvMisxLFQ9dC5oZWlnaHQtZS55LXQuYXJlYVsyXSxBPXQuaGVpZ2h0LWUueTAtdC5hcmVhWzJdOzA8YyYmKFQtPUEpLGEubW92ZVRvKFMsZS55KSxhLmZpbGxSZWN0KFMsZS55LGUud2lkdGgtMixUKSxhLmNsb3NlUGF0aCgpLGEuZmlsbCgpfTticmVhaztjYXNlXCJtZXRlclwiOnZhciB1PWdldERhdGFQb2ludHMoZixnLHksbCxyLHQsaSxvKTtpZihkLnB1c2godSksdT1maXhDb2x1bWVNZXRlckRhdGEodSxyLGUubGVuZ3RoLGMsaSx0LHMubWV0ZXIuYm9yZGVyKSwwPT1jKXtmb3IobGV0IGUsbz0wO288dS5sZW5ndGg7bysrKWlmKGU9dVtvXSxudWxsIT09ZSYmbz5oJiZvPHgpe2EuYmVnaW5QYXRoKCksYS5zZXRGaWxsU3R5bGUocy5tZXRlci5maWxsQ29sb3IpO3ZhciBTPWUueC1lLndpZHRoLzIsVD10LmhlaWdodC1lLnktdC5hcmVhWzJdO2EubW92ZVRvKFMsZS55KSxhLmZpbGxSZWN0KFMsZS55LGUud2lkdGgsVCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKSwwPHMubWV0ZXIuYm9yZGVyJiYoYS5iZWdpblBhdGgoKSxhLnNldFN0cm9rZVN0eWxlKG4uY29sb3IpLGEuc2V0TGluZVdpZHRoKHMubWV0ZXIuYm9yZGVyKnQucGl4ZWxSYXRpbyksYS5tb3ZlVG8oUysuNSpzLm1ldGVyLmJvcmRlcixlLnkrVCksYS5saW5lVG8oUysuNSpzLm1ldGVyLmJvcmRlcixlLnkrLjUqcy5tZXRlci5ib3JkZXIpLGEubGluZVRvKFMrZS53aWR0aC0uNSpzLm1ldGVyLmJvcmRlcixlLnkrLjUqcy5tZXRlci5ib3JkZXIpLGEubGluZVRvKFMrZS53aWR0aC0uNSpzLm1ldGVyLmJvcmRlcixlLnkrVCksYS5zdHJva2UoKSl9fWVsc2UgZm9yKGxldCBlLG89MDtvPHUubGVuZ3RoO28rKylpZihlPXVbb10sbnVsbCE9PWUmJm8+aCYmbzx4KXthLmJlZ2luUGF0aCgpLGEuc2V0RmlsbFN0eWxlKGUuY29sb3J8fG4uY29sb3IpO3ZhciBTPWUueC1lLndpZHRoLzIsVD10LmhlaWdodC1lLnktdC5hcmVhWzJdO2EubW92ZVRvKFMsZS55KSxhLmZpbGxSZWN0KFMsZS55LGUud2lkdGgsVCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKX19fSksITEhPT10LmRhdGFMYWJlbCYmMT09PW8mJmUuZm9yRWFjaChmdW5jdGlvbihuLGQpe2xldCBoLHgsYztoPVtdLmNvbmNhdCh0LmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzW24uaW5kZXhdKSx4PWgucG9wKCksYz1oLnNoaWZ0KCk7dmFyIHA9bi5kYXRhO3N3aXRjaChzLnR5cGUpe2Nhc2VcImdyb3VwXCI6dmFyIGc9Z2V0RGF0YVBvaW50cyhwLHgsYyxsLHIsdCxpLG8pO2c9Zml4Q29sdW1lRGF0YShnLHIsZS5sZW5ndGgsZCxpLHQpLGRyYXdQb2ludFRleHQoZyxuLGksYSk7YnJlYWs7Y2FzZVwic3RhY2tcIjp2YXIgZz1nZXRTdGFja0RhdGFQb2ludHMocCx4LGMsbCxyLHQsaSxkLGUsbyk7ZHJhd1BvaW50VGV4dChnLG4saSxhKTticmVhaztjYXNlXCJtZXRlclwiOnZhciBnPWdldERhdGFQb2ludHMocCx4LGMsbCxyLHQsaSxvKTtkcmF3UG9pbnRUZXh0KGcsbixpLGEpO319KSxhLnJlc3RvcmUoKSx7eEF4aXNQb2ludHM6bCxjYWxQb2ludHM6ZCxlYWNoU3BhY2luZzpyfX1mdW5jdGlvbiBkcmF3Q2FuZGxlRGF0YVBvaW50cyhlLHQsYSxpLG8pe3ZhciBuPTU8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XToxLGw9YXNzaWduKHt9LHtjb2xvcjp7fSxhdmVyYWdlOnt9fSxhLmV4dHJhLmNhbmRsZSk7bC5jb2xvcj1hc3NpZ24oe30se3VwTGluZTpcIiNmMDQ4NjRcIix1cEZpbGw6XCIjZjA0ODY0XCIsZG93bkxpbmU6XCIjMmZjMjViXCIsZG93bkZpbGw6XCIjMmZjMjViXCJ9LGwuY29sb3IpLGwuYXZlcmFnZT1hc3NpZ24oe30se3Nob3c6ITEsbmFtZTpbXSxkYXk6W10sY29sb3I6aS5jb2xvcnN9LGwuYXZlcmFnZSksYS5leHRyYS5jYW5kbGU9bDtsZXQgcj1hLmNoYXJ0RGF0YS54QXhpc0RhdGEscz1yLnhBeGlzUG9pbnRzLGQ9ci5lYWNoU3BhY2luZyxoPVtdO28uc2F2ZSgpO2xldCB4PS0yLGM9cy5sZW5ndGgrMixwPTAsZz1hLndpZHRoK2Q7cmV0dXJuIGEuX3Njcm9sbERpc3RhbmNlXyYmMCE9PWEuX3Njcm9sbERpc3RhbmNlXyYmITA9PT1hLmVuYWJsZVNjcm9sbCYmKG8udHJhbnNsYXRlKGEuX3Njcm9sbERpc3RhbmNlXywwKSx4PU1hdGguZmxvb3IoLWEuX3Njcm9sbERpc3RhbmNlXy9kKS0yLGM9eCthLnhBeGlzLml0ZW1Db3VudCs0LHA9LWEuX3Njcm9sbERpc3RhbmNlXy1kK2EuYXJlYVszXSxnPXArKGEueEF4aXMuaXRlbUNvdW50KzQpKmQpLGwuYXZlcmFnZS5zaG93JiZ0LmZvckVhY2goZnVuY3Rpb24oZSl7bGV0IHQsbCxyO3Q9W10uY29uY2F0KGEuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZS5pbmRleF0pLGw9dC5wb3AoKSxyPXQuc2hpZnQoKTt2YXIgaD1lLmRhdGEseD1nZXREYXRhUG9pbnRzKGgsbCxyLHMsZCxhLGksbiksYz1zcGxpdFBvaW50cyh4KTtmb3IobGV0IHQsYT0wO2E8Yy5sZW5ndGg7YSsrKXtpZih0PWNbYV0sby5iZWdpblBhdGgoKSxvLnNldFN0cm9rZVN0eWxlKGUuY29sb3IpLG8uc2V0TGluZVdpZHRoKDEpLDE9PT10Lmxlbmd0aClvLm1vdmVUbyh0WzBdLngsdFswXS55KSxvLmFyYyh0WzBdLngsdFswXS55LDEsMCwyKk1hdGguUEkpO2Vsc2V7by5tb3ZlVG8odFswXS54LHRbMF0ueSk7bGV0IGU9MDtmb3IobGV0IGksYT0wO2E8dC5sZW5ndGg7YSsrKWlmKGk9dFthXSwwPT1lJiZpLng+cCYmKG8ubW92ZVRvKGkueCxpLnkpLGU9MSksMDxhJiZpLng+cCYmaS54PGcpe3ZhciB5PWNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyh0LGEtMSk7by5iZXppZXJDdXJ2ZVRvKHkuY3RyQS54LHkuY3RyQS55LHkuY3RyQi54LHkuY3RyQi55LGkueCxpLnkpfW8ubW92ZVRvKHRbMF0ueCx0WzBdLnkpfW8uY2xvc2VQYXRoKCksby5zdHJva2UoKX19KSxlLmZvckVhY2goZnVuY3Rpb24oZSl7bGV0IHQscixwO3Q9W10uY29uY2F0KGEuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZS5pbmRleF0pLHI9dC5wb3AoKSxwPXQuc2hpZnQoKTt2YXIgZz1lLmRhdGEseT1nZXRDYW5kbGVEYXRhUG9pbnRzKGcscixwLHMsZCxhLGksbik7aC5wdXNoKHkpO3ZhciBmPXNwbGl0UG9pbnRzKHkpO2ZvcihsZXQgdD0wO3Q8ZlswXS5sZW5ndGg7dCsrKWlmKHQ+eCYmdDxjKXtsZXQgZT1mWzBdW3RdO28uYmVnaW5QYXRoKCksMDxnW3RdWzFdLWdbdF1bMF0/KG8uc2V0U3Ryb2tlU3R5bGUobC5jb2xvci51cExpbmUpLG8uc2V0RmlsbFN0eWxlKGwuY29sb3IudXBGaWxsKSxvLnNldExpbmVXaWR0aCgxKmEucGl4ZWxSYXRpbyksby5tb3ZlVG8oZVszXS54LGVbM10ueSksby5saW5lVG8oZVsxXS54LGVbMV0ueSksby5saW5lVG8oZVsxXS54LWQvNCxlWzFdLnkpLG8ubGluZVRvKGVbMF0ueC1kLzQsZVswXS55KSxvLmxpbmVUbyhlWzBdLngsZVswXS55KSxvLmxpbmVUbyhlWzJdLngsZVsyXS55KSxvLmxpbmVUbyhlWzBdLngsZVswXS55KSxvLmxpbmVUbyhlWzBdLngrZC80LGVbMF0ueSksby5saW5lVG8oZVsxXS54K2QvNCxlWzFdLnkpLG8ubGluZVRvKGVbMV0ueCxlWzFdLnkpLG8ubW92ZVRvKGVbM10ueCxlWzNdLnkpKTooby5zZXRTdHJva2VTdHlsZShsLmNvbG9yLmRvd25MaW5lKSxvLnNldEZpbGxTdHlsZShsLmNvbG9yLmRvd25GaWxsKSxvLnNldExpbmVXaWR0aCgxKmEucGl4ZWxSYXRpbyksby5tb3ZlVG8oZVszXS54LGVbM10ueSksby5saW5lVG8oZVswXS54LGVbMF0ueSksby5saW5lVG8oZVswXS54LWQvNCxlWzBdLnkpLG8ubGluZVRvKGVbMV0ueC1kLzQsZVsxXS55KSxvLmxpbmVUbyhlWzFdLngsZVsxXS55KSxvLmxpbmVUbyhlWzJdLngsZVsyXS55KSxvLmxpbmVUbyhlWzFdLngsZVsxXS55KSxvLmxpbmVUbyhlWzFdLngrZC80LGVbMV0ueSksby5saW5lVG8oZVswXS54K2QvNCxlWzBdLnkpLG8ubGluZVRvKGVbMF0ueCxlWzBdLnkpLG8ubW92ZVRvKGVbM10ueCxlWzNdLnkpKSxvLmNsb3NlUGF0aCgpLG8uZmlsbCgpLG8uc3Ryb2tlKCl9fSksby5yZXN0b3JlKCkse3hBeGlzUG9pbnRzOnMsY2FsUG9pbnRzOmgsZWFjaFNwYWNpbmc6ZH19ZnVuY3Rpb24gZHJhd0FyZWFEYXRhUG9pbnRzKGUsdCxpLGEpe3ZhciBvPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLG49YXNzaWduKHt9LHt0eXBlOlwic3RyYWlnaHRcIixvcGFjaXR5Oi4yLGFkZExpbmU6ITEsd2lkdGg6MixncmFkaWVudDohMX0sdC5leHRyYS5hcmVhKTtsZXQgbD10LmNoYXJ0RGF0YS54QXhpc0RhdGEscj1sLnhBeGlzUG9pbnRzLHM9bC5lYWNoU3BhY2luZyxkPXQuaGVpZ2h0LXQuYXJlYVsyXSxoPVtdO2Euc2F2ZSgpO2xldCB4PTAsYz10LndpZHRoK3M7cmV0dXJuIHQuX3Njcm9sbERpc3RhbmNlXyYmMCE9PXQuX3Njcm9sbERpc3RhbmNlXyYmITA9PT10LmVuYWJsZVNjcm9sbCYmKGEudHJhbnNsYXRlKHQuX3Njcm9sbERpc3RhbmNlXywwKSx4PS10Ll9zY3JvbGxEaXN0YW5jZV8tcyt0LmFyZWFbM10sYz14Kyh0LnhBeGlzLml0ZW1Db3VudCs0KSpzKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7bGV0IGwscCxnO2w9W10uY29uY2F0KHQuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZS5pbmRleF0pLHA9bC5wb3AoKSxnPWwuc2hpZnQoKTtsZXQgeT1lLmRhdGEsZj1nZXREYXRhUG9pbnRzKHkscCxnLHIscyx0LGksbyk7aC5wdXNoKGYpO2xldCB1PXNwbGl0UG9pbnRzKGYpO2ZvcihsZXQgbyxsPTA7bDx1Lmxlbmd0aDtsKyspe2lmKG89dVtsXSxhLmJlZ2luUGF0aCgpLGEuc2V0U3Ryb2tlU3R5bGUoaGV4VG9SZ2IoZS5jb2xvcixuLm9wYWNpdHkpKSxuLmdyYWRpZW50KXtsZXQgaT1hLmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsdC5hcmVhWzBdLDAsdC5oZWlnaHQtdC5hcmVhWzJdKTtpLmFkZENvbG9yU3RvcChcIjBcIixoZXhUb1JnYihlLmNvbG9yLG4ub3BhY2l0eSkpLGkuYWRkQ29sb3JTdG9wKFwiMS4wXCIsaGV4VG9SZ2IoXCIjRkZGRkZGXCIsLjEpKSxhLnNldEZpbGxTdHlsZShpKX1lbHNlIGEuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGUuY29sb3Isbi5vcGFjaXR5KSk7aWYoYS5zZXRMaW5lV2lkdGgobi53aWR0aCp0LnBpeGVsUmF0aW8pLDE8by5sZW5ndGgpe2xldCBlPW9bMF0sdD1vW28ubGVuZ3RoLTFdO2EubW92ZVRvKGUueCxlLnkpO2xldCBpPTA7aWYoXCJjdXJ2ZVwiPT09bi50eXBlKXtmb3IobGV0IGUsdD0wO3Q8by5sZW5ndGg7dCsrKWlmKGU9b1t0XSwwPT1pJiZlLng+eCYmKGEubW92ZVRvKGUueCxlLnkpLGk9MSksMDx0JiZlLng+eCYmZS54PGMpe2xldCBpPWNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhvLHQtMSk7YS5iZXppZXJDdXJ2ZVRvKGkuY3RyQS54LGkuY3RyQS55LGkuY3RyQi54LGkuY3RyQi55LGUueCxlLnkpfX1lbHNlIGZvcihsZXQgZSx0PTA7dDxvLmxlbmd0aDt0KyspZT1vW3RdLDA9PWkmJmUueD54JiYoYS5tb3ZlVG8oZS54LGUueSksaT0xKSwwPHQmJmUueD54JiZlLng8YyYmYS5saW5lVG8oZS54LGUueSk7YS5saW5lVG8odC54LGQpLGEubGluZVRvKGUueCxkKSxhLmxpbmVUbyhlLngsZS55KX1lbHNle2xldCBlPW9bMF07YS5tb3ZlVG8oZS54LXMvMixlLnkpLGEubGluZVRvKGUueCtzLzIsZS55KSxhLmxpbmVUbyhlLngrcy8yLGQpLGEubGluZVRvKGUueC1zLzIsZCksYS5tb3ZlVG8oZS54LXMvMixlLnkpfWlmKGEuY2xvc2VQYXRoKCksYS5maWxsKCksbi5hZGRMaW5lKXtpZihcImRhc2hcIj09ZS5saW5lVHlwZSl7bGV0IGk9ZS5kYXNoTGVuZ3RoP2UuZGFzaExlbmd0aDo4O2kqPXQucGl4ZWxSYXRpbyxhLnNldExpbmVEYXNoKFtpLGldKX1pZihhLmJlZ2luUGF0aCgpLGEuc2V0U3Ryb2tlU3R5bGUoZS5jb2xvciksYS5zZXRMaW5lV2lkdGgobi53aWR0aCp0LnBpeGVsUmF0aW8pLDE9PT1vLmxlbmd0aClhLm1vdmVUbyhvWzBdLngsb1swXS55KSxhLmFyYyhvWzBdLngsb1swXS55LDEsMCwyKk1hdGguUEkpO2Vsc2V7YS5tb3ZlVG8ob1swXS54LG9bMF0ueSk7bGV0IGU9MDtpZihcImN1cnZlXCI9PT1uLnR5cGUpe2ZvcihsZXQgdCxpPTA7aTxvLmxlbmd0aDtpKyspaWYodD1vW2ldLDA9PWUmJnQueD54JiYoYS5tb3ZlVG8odC54LHQueSksZT0xKSwwPGkmJnQueD54JiZ0Lng8Yyl7bGV0IGU9Y3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKG8saS0xKTthLmJlemllckN1cnZlVG8oZS5jdHJBLngsZS5jdHJBLnksZS5jdHJCLngsZS5jdHJCLnksdC54LHQueSl9fWVsc2UgZm9yKGxldCB0LGk9MDtpPG8ubGVuZ3RoO2krKyl0PW9baV0sMD09ZSYmdC54PngmJihhLm1vdmVUbyh0LngsdC55KSxlPTEpLDA8aSYmdC54PngmJnQueDxjJiZhLmxpbmVUbyh0LngsdC55KTthLm1vdmVUbyhvWzBdLngsb1swXS55KX1hLnN0cm9rZSgpLGEuc2V0TGluZURhc2goW10pfX0hMSE9PXQuZGF0YVBvaW50U2hhcGUmJmRyYXdQb2ludFNoYXBlKGYsZS5jb2xvcixlLnBvaW50U2hhcGUsYSx0KX0pLCExIT09dC5kYXRhTGFiZWwmJjE9PT1vJiZlLmZvckVhY2goZnVuY3Rpb24oZSl7bGV0IG4sbCxkO249W10uY29uY2F0KHQuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZS5pbmRleF0pLGw9bi5wb3AoKSxkPW4uc2hpZnQoKTt2YXIgaD1lLmRhdGEseD1nZXREYXRhUG9pbnRzKGgsbCxkLHIscyx0LGksbyk7ZHJhd1BvaW50VGV4dCh4LGUsaSxhKX0pLGEucmVzdG9yZSgpLHt4QXhpc1BvaW50czpyLGNhbFBvaW50czpoLGVhY2hTcGFjaW5nOnN9fWZ1bmN0aW9uIGRyYXdMaW5lRGF0YVBvaW50cyhlLHQsaSxhKXt2YXIgbz00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MSxuPWFzc2lnbih7fSx7dHlwZTpcInN0cmFpZ2h0XCIsd2lkdGg6Mn0sdC5leHRyYS5saW5lKTtuLndpZHRoKj10LnBpeGVsUmF0aW87bGV0IGw9dC5jaGFydERhdGEueEF4aXNEYXRhLHI9bC54QXhpc1BvaW50cyxzPWwuZWFjaFNwYWNpbmc7dmFyIGQ9W107YS5zYXZlKCk7bGV0IGg9MCx4PXQud2lkdGgrcztyZXR1cm4gdC5fc2Nyb2xsRGlzdGFuY2VfJiYwIT09dC5fc2Nyb2xsRGlzdGFuY2VfJiYhMD09PXQuZW5hYmxlU2Nyb2xsJiYoYS50cmFuc2xhdGUodC5fc2Nyb2xsRGlzdGFuY2VfLDApLGg9LXQuX3Njcm9sbERpc3RhbmNlXy1zK3QuYXJlYVszXSx4PWgrKHQueEF4aXMuaXRlbUNvdW50KzQpKnMpLGUuZm9yRWFjaChmdW5jdGlvbihlKXtsZXQgbCxjLHA7bD1bXS5jb25jYXQodC5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlLmluZGV4XSksYz1sLnBvcCgpLHA9bC5zaGlmdCgpO3ZhciBnPWUuZGF0YSx5PWdldERhdGFQb2ludHMoZyxjLHAscixzLHQsaSxvKTtkLnB1c2goeSk7dmFyIGY9c3BsaXRQb2ludHMoeSk7aWYoXCJkYXNoXCI9PWUubGluZVR5cGUpe2xldCBpPWUuZGFzaExlbmd0aD9lLmRhc2hMZW5ndGg6ODtpKj10LnBpeGVsUmF0aW8sYS5zZXRMaW5lRGFzaChbaSxpXSl9YS5iZWdpblBhdGgoKSxhLnNldFN0cm9rZVN0eWxlKGUuY29sb3IpLGEuc2V0TGluZVdpZHRoKG4ud2lkdGgpLGYuZm9yRWFjaChmdW5jdGlvbihlKXtpZigxPT09ZS5sZW5ndGgpYS5tb3ZlVG8oZVswXS54LGVbMF0ueSksYS5hcmMoZVswXS54LGVbMF0ueSwxLDAsMipNYXRoLlBJKTtlbHNle2EubW92ZVRvKGVbMF0ueCxlWzBdLnkpO2xldCBpPTA7aWYoXCJjdXJ2ZVwiPT09bi50eXBlKXtmb3IobGV0IG8sbj0wO248ZS5sZW5ndGg7bisrKWlmKG89ZVtuXSwwPT1pJiZvLng+aCYmKGEubW92ZVRvKG8ueCxvLnkpLGk9MSksMDxuJiZvLng+aCYmby54PHgpe3ZhciB0PWNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhlLG4tMSk7YS5iZXppZXJDdXJ2ZVRvKHQuY3RyQS54LHQuY3RyQS55LHQuY3RyQi54LHQuY3RyQi55LG8ueCxvLnkpfX1lbHNlIGZvcihsZXQgdCxvPTA7bzxlLmxlbmd0aDtvKyspdD1lW29dLDA9PWkmJnQueD5oJiYoYS5tb3ZlVG8odC54LHQueSksaT0xKSwwPG8mJnQueD5oJiZ0Lng8eCYmYS5saW5lVG8odC54LHQueSk7YS5tb3ZlVG8oZVswXS54LGVbMF0ueSl9fSksYS5zdHJva2UoKSxhLnNldExpbmVEYXNoKFtdKSwhMSE9PXQuZGF0YVBvaW50U2hhcGUmJmRyYXdQb2ludFNoYXBlKHksZS5jb2xvcixlLnBvaW50U2hhcGUsYSx0KX0pLCExIT09dC5kYXRhTGFiZWwmJjE9PT1vJiZlLmZvckVhY2goZnVuY3Rpb24oZSl7bGV0IG4sbCxkO249W10uY29uY2F0KHQuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNbZS5pbmRleF0pLGw9bi5wb3AoKSxkPW4uc2hpZnQoKTt2YXIgaD1lLmRhdGEseD1nZXREYXRhUG9pbnRzKGgsbCxkLHIscyx0LGksbyk7ZHJhd1BvaW50VGV4dCh4LGUsaSxhKX0pLGEucmVzdG9yZSgpLHt4QXhpc1BvaW50czpyLGNhbFBvaW50czpkLGVhY2hTcGFjaW5nOnN9fWZ1bmN0aW9uIGRyYXdNaXhEYXRhUG9pbnRzKGUsdCxpLGEpe2xldCBvPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLG49dC5jaGFydERhdGEueEF4aXNEYXRhLGw9bi54QXhpc1BvaW50cyxyPW4uZWFjaFNwYWNpbmcscz10LmhlaWdodC10LmFyZWFbMl0sZD1bXTt2YXIgaD0wLHg9MDtlLmZvckVhY2goZnVuY3Rpb24oZSl7XCJjb2x1bW5cIj09ZS50eXBlJiYoeCs9MSl9KSxhLnNhdmUoKTtsZXQgYz0tMixwPWwubGVuZ3RoKzIsZz0wLHk9dC53aWR0aCtyO2lmKHQuX3Njcm9sbERpc3RhbmNlXyYmMCE9PXQuX3Njcm9sbERpc3RhbmNlXyYmITA9PT10LmVuYWJsZVNjcm9sbCYmKGEudHJhbnNsYXRlKHQuX3Njcm9sbERpc3RhbmNlXywwKSxjPU1hdGguZmxvb3IoLXQuX3Njcm9sbERpc3RhbmNlXy9yKS0yLHA9Yyt0LnhBeGlzLml0ZW1Db3VudCs0LGc9LXQuX3Njcm9sbERpc3RhbmNlXy1yK3QuYXJlYVszXSx5PWcrKHQueEF4aXMuaXRlbUNvdW50KzQpKnIpLGUuZm9yRWFjaChmdW5jdGlvbihlKXtsZXQgbixmLHU7bj1bXS5jb25jYXQodC5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlc1tlLmluZGV4XSksZj1uLnBvcCgpLHU9bi5zaGlmdCgpO3ZhciBtPWUuZGF0YSxTPWdldERhdGFQb2ludHMobSxmLHUsbCxyLHQsaSxvKTtpZihkLnB1c2goUyksXCJjb2x1bW5cIj09ZS50eXBlKXtTPWZpeENvbHVtZURhdGEoUyxyLHgsaCxpLHQpO2ZvcihsZXQgbyxuPTA7bjxTLmxlbmd0aDtuKyspaWYobz1TW25dLG51bGwhPT1vJiZuPmMmJm48cCl7YS5iZWdpblBhdGgoKSxhLnNldFN0cm9rZVN0eWxlKG8uY29sb3J8fGUuY29sb3IpLGEuc2V0TGluZVdpZHRoKDEpLGEuc2V0RmlsbFN0eWxlKG8uY29sb3J8fGUuY29sb3IpO3ZhciBUPW8ueC1vLndpZHRoLzIsQT10LmhlaWdodC1vLnktdC5hcmVhWzJdO2EubW92ZVRvKFQsby55KSxhLm1vdmVUbyhULTEsby55KSxhLmxpbmVUbyhUK28ud2lkdGgtMixvLnkpLGEubGluZVRvKFQrby53aWR0aC0yLHQuaGVpZ2h0LXQuYXJlYVsyXSksYS5saW5lVG8oVCx0LmhlaWdodC10LmFyZWFbMl0pLGEubGluZVRvKFQsby55KSxhLmNsb3NlUGF0aCgpLGEuc3Ryb2tlKCksYS5maWxsKCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKX1oKz0xfWlmKFwiYXJlYVwiPT1lLnR5cGUpe2xldCBvPXNwbGl0UG9pbnRzKFMpO2ZvcihsZXQgbixsPTA7bDxvLmxlbmd0aDtsKyspe2lmKG49b1tsXSxhLmJlZ2luUGF0aCgpLGEuc2V0U3Ryb2tlU3R5bGUoZS5jb2xvciksYS5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZS5jb2xvciwuMikpLGEuc2V0TGluZVdpZHRoKDIqdC5waXhlbFJhdGlvKSwxPG4ubGVuZ3RoKXt2YXIgYj1uWzBdO2xldCB0PW5bbi5sZW5ndGgtMV07YS5tb3ZlVG8oYi54LGIueSk7bGV0IGk9MDtpZihcImN1cnZlXCI9PT1lLnN0eWxlKXtmb3IobGV0IGUsdD0wO3Q8bi5sZW5ndGg7dCsrKWlmKGU9blt0XSwwPT1pJiZlLng+ZyYmKGEubW92ZVRvKGUueCxlLnkpLGk9MSksMDx0JiZlLng+ZyYmZS54PHkpe3ZhciBQPWNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhuLHQtMSk7YS5iZXppZXJDdXJ2ZVRvKFAuY3RyQS54LFAuY3RyQS55LFAuY3RyQi54LFAuY3RyQi55LGUueCxlLnkpfX1lbHNlIGZvcihsZXQgZSx0PTA7dDxuLmxlbmd0aDt0KyspZT1uW3RdLDA9PWkmJmUueD5nJiYoYS5tb3ZlVG8oZS54LGUueSksaT0xKSwwPHQmJmUueD5nJiZlLng8eSYmYS5saW5lVG8oZS54LGUueSk7YS5saW5lVG8odC54LHMpLGEubGluZVRvKGIueCxzKSxhLmxpbmVUbyhiLngsYi55KX1lbHNle2xldCBlPW5bMF07YS5tb3ZlVG8oZS54LXIvMixlLnkpLGEubGluZVRvKGUueCtyLzIsZS55KSxhLmxpbmVUbyhlLngrci8yLHMpLGEubGluZVRvKGUueC1yLzIscyksYS5tb3ZlVG8oZS54LXIvMixlLnkpfWEuY2xvc2VQYXRoKCksYS5maWxsKCl9fWlmKFwibGluZVwiPT1lLnR5cGUpe3ZhciBfPXNwbGl0UG9pbnRzKFMpO18uZm9yRWFjaChmdW5jdGlvbihpKXtpZihcImRhc2hcIj09ZS5saW5lVHlwZSl7bGV0IGk9ZS5kYXNoTGVuZ3RoP2UuZGFzaExlbmd0aDo4O2kqPXQucGl4ZWxSYXRpbyxhLnNldExpbmVEYXNoKFtpLGldKX1pZihhLmJlZ2luUGF0aCgpLGEuc2V0U3Ryb2tlU3R5bGUoZS5jb2xvciksYS5zZXRMaW5lV2lkdGgoMip0LnBpeGVsUmF0aW8pLDE9PT1pLmxlbmd0aClhLm1vdmVUbyhpWzBdLngsaVswXS55KSxhLmFyYyhpWzBdLngsaVswXS55LDEsMCwyKk1hdGguUEkpO2Vsc2V7YS5tb3ZlVG8oaVswXS54LGlbMF0ueSk7bGV0IHQ9MDtpZihcImN1cnZlXCI9PWUuc3R5bGUpe2ZvcihsZXQgZSxuPTA7bjxpLmxlbmd0aDtuKyspaWYoZT1pW25dLDA9PXQmJmUueD5nJiYoYS5tb3ZlVG8oZS54LGUueSksdD0xKSwwPG4mJmUueD5nJiZlLng8eSl7dmFyIG89Y3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKGksbi0xKTthLmJlemllckN1cnZlVG8oby5jdHJBLngsby5jdHJBLnksby5jdHJCLngsby5jdHJCLnksZS54LGUueSl9fWVsc2UgZm9yKGxldCBlLG89MDtvPGkubGVuZ3RoO28rKyllPWlbb10sMD09dCYmZS54PmcmJihhLm1vdmVUbyhlLngsZS55KSx0PTEpLDA8byYmZS54PmcmJmUueDx5JiZhLmxpbmVUbyhlLngsZS55KTthLm1vdmVUbyhpWzBdLngsaVswXS55KX1hLnN0cm9rZSgpLGEuc2V0TGluZURhc2goW10pfSl9XCJwb2ludFwiPT1lLnR5cGUmJihlLmFkZFBvaW50PSEwKSwhMD09ZS5hZGRQb2ludCYmXCJjb2x1bW5cIiE9PWUudHlwZSYmZHJhd1BvaW50U2hhcGUoUyxlLmNvbG9yLGUucG9pbnRTaGFwZSxhLHQpfSksITEhPT10LmRhdGFMYWJlbCYmMT09PW8pe3ZhciBoPTA7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2xldCBuLHMsZDtuPVtdLmNvbmNhdCh0LmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzW2UuaW5kZXhdKSxzPW4ucG9wKCksZD1uLnNoaWZ0KCk7dmFyIGM9ZS5kYXRhLHA9Z2V0RGF0YVBvaW50cyhjLHMsZCxsLHIsdCxpLG8pO1wiY29sdW1uXCI9PT1lLnR5cGU/KHA9Zml4Q29sdW1lRGF0YShwLHIseCxoLGksdCksZHJhd1BvaW50VGV4dChwLGUsaSxhKSxoKz0xKTpkcmF3UG9pbnRUZXh0KHAsZSxpLGEpfSl9cmV0dXJuIGEucmVzdG9yZSgpLHt4QXhpc1BvaW50czpsLGNhbFBvaW50czpkLGVhY2hTcGFjaW5nOnJ9fWZ1bmN0aW9uIGRyYXdUb29sVGlwQnJpZGdlKGUsdCxpLGEsbyxuKXt2YXIgbD1lLmV4dHJhLnRvb2x0aXB8fHt9O2wuaG9yaXplbnRhbExpbmUmJmUudG9vbHRpcCYmMT09PWEmJihcImxpbmVcIj09ZS50eXBlfHxcImFyZWFcIj09ZS50eXBlfHxcImNvbHVtblwiPT1lLnR5cGV8fFwiY2FuZGxlXCI9PWUudHlwZXx8XCJtaXhcIj09ZS50eXBlKSYmZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShlLHQsaSxvLG4pLGkuc2F2ZSgpLGUuX3Njcm9sbERpc3RhbmNlXyYmMCE9PWUuX3Njcm9sbERpc3RhbmNlXyYmITA9PT1lLmVuYWJsZVNjcm9sbCYmaS50cmFuc2xhdGUoZS5fc2Nyb2xsRGlzdGFuY2VfLDApLGUudG9vbHRpcCYmZS50b29sdGlwLnRleHRMaXN0JiZlLnRvb2x0aXAudGV4dExpc3QubGVuZ3RoJiYxPT09YSYmZHJhd1Rvb2xUaXAoZS50b29sdGlwLnRleHRMaXN0LGUudG9vbHRpcC5vZmZzZXQsZSx0LGksbyxuKSxpLnJlc3RvcmUoKX1mdW5jdGlvbiBkcmF3WEF4aXMoZSx0LGksYSl7dmFyIG89TWF0aC5jZWlsO2xldCBuPXQuY2hhcnREYXRhLnhBeGlzRGF0YSxsPW4ueEF4aXNQb2ludHMscj1uLnN0YXJ0WCxzPW4uZW5kWCxkPW4uZWFjaFNwYWNpbmc7dmFyIGg9XCJjZW50ZXJcIjsoXCJsaW5lXCI9PXQudHlwZXx8XCJhcmVhXCI9PXQudHlwZSkmJihoPXQueEF4aXMuYm91bmRhcnlHYXApO3ZhciB4PXQuaGVpZ2h0LXQuYXJlYVsyXSxjPXQuYXJlYVswXTtpZih0LmVuYWJsZVNjcm9sbCYmdC54QXhpcy5zY3JvbGxTaG93KXt2YXIgcD10LmhlaWdodC10LmFyZWFbMl0raS54QXhpc0hlaWdodCxnPXMtcix5PWQqKGwubGVuZ3RoLTEpLGY9MDt0Ll9zY3JvbGxEaXN0YW5jZV8mJihmPS10Ll9zY3JvbGxEaXN0YW5jZV8qZy95KSxhLmJlZ2luUGF0aCgpLGEuc2V0TGluZUNhcChcInJvdW5kXCIpLGEuc2V0TGluZVdpZHRoKDYqdC5waXhlbFJhdGlvKSxhLnNldFN0cm9rZVN0eWxlKHQueEF4aXMuc2Nyb2xsQmFja2dyb3VuZENvbG9yfHxcIiNFRkVCRUZcIiksYS5tb3ZlVG8ocixwKSxhLmxpbmVUbyhzLHApLGEuc3Ryb2tlKCksYS5jbG9zZVBhdGgoKSxhLmJlZ2luUGF0aCgpLGEuc2V0TGluZUNhcChcInJvdW5kXCIpLGEuc2V0TGluZVdpZHRoKDYqdC5waXhlbFJhdGlvKSxhLnNldFN0cm9rZVN0eWxlKHQueEF4aXMuc2Nyb2xsQ29sb3J8fFwiI0E2QTZBNlwiKSxhLm1vdmVUbyhyK2YscCksYS5saW5lVG8ocitmK2cqZy95LHApLGEuc3Ryb2tlKCksYS5jbG9zZVBhdGgoKSxhLnNldExpbmVDYXAoXCJidXR0XCIpfWlmKGEuc2F2ZSgpLHQuX3Njcm9sbERpc3RhbmNlXyYmMCE9PXQuX3Njcm9sbERpc3RhbmNlXyYmYS50cmFuc2xhdGUodC5fc2Nyb2xsRGlzdGFuY2VfLDApLCEwPT09dC54QXhpcy5jYWxpYnJhdGlvbiYmKGEuc2V0U3Ryb2tlU3R5bGUodC54QXhpcy5ncmlkQ29sb3J8fFwiI2NjY2NjY1wiKSxhLnNldExpbmVDYXAoXCJidXR0XCIpLGEuc2V0TGluZVdpZHRoKDEqdC5waXhlbFJhdGlvKSxsLmZvckVhY2goZnVuY3Rpb24oZSxpKXswPGkmJihhLmJlZ2luUGF0aCgpLGEubW92ZVRvKGUtZC8yLHgpLGEubGluZVRvKGUtZC8yLHgrMyp0LnBpeGVsUmF0aW8pLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKSl9KSksITAhPT10LnhBeGlzLmRpc2FibGVHcmlkJiYoYS5zZXRTdHJva2VTdHlsZSh0LnhBeGlzLmdyaWRDb2xvcnx8XCIjY2NjY2NjXCIpLGEuc2V0TGluZUNhcChcImJ1dHRcIiksYS5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLFwiZGFzaFwiPT10LnhBeGlzLmdyaWRUeXBlJiZhLnNldExpbmVEYXNoKFt0LnhBeGlzLmRhc2hMZW5ndGgsdC54QXhpcy5kYXNoTGVuZ3RoXSksdC54QXhpcy5ncmlkRXZhbD10LnhBeGlzLmdyaWRFdmFsfHwxLGwuZm9yRWFjaChmdW5jdGlvbihlLGkpezA9PWkldC54QXhpcy5ncmlkRXZhbCYmKGEuYmVnaW5QYXRoKCksYS5tb3ZlVG8oZSx4KSxhLmxpbmVUbyhlLGMpLGEuc3Ryb2tlKCkpfSksYS5zZXRMaW5lRGFzaChbXSkpLCEwIT09dC54QXhpcy5kaXNhYmxlZCl7bGV0IG49ZS5sZW5ndGg7dC54QXhpcy5sYWJlbENvdW50JiYobj10LnhBeGlzLml0ZW1Db3VudD9vKGUubGVuZ3RoL3QueEF4aXMuaXRlbUNvdW50KnQueEF4aXMubGFiZWxDb3VudCk6dC54QXhpcy5sYWJlbENvdW50LG4tPTEpO2xldCByPW8oZS5sZW5ndGgvbikscz1bXSxjPWUubGVuZ3RoO2ZvcihsZXQgdD0wO3Q8Yzt0KyspMD09dCVyP3MucHVzaChlW3RdKTpzLnB1c2goXCJcIik7c1tjLTFdPWVbYy0xXTt2YXIgdT10LnhBeGlzLmZvbnRTaXplfHxpLmZvbnRTaXplOzA9PT1pLl94QXhpc1RleHRBbmdsZV8/cy5mb3JFYWNoKGZ1bmN0aW9uKGUsbyl7dmFyIG49LW1lYXN1cmVUZXh0KGUrXCJcIix1KS8yO1wiY2VudGVyXCI9PWgmJihuKz1kLzIpO3ZhciByPTA7dC54QXhpcy5zY3JvbGxTaG93JiYocj02KnQucGl4ZWxSYXRpbyksYS5iZWdpblBhdGgoKSxhLnNldEZvbnRTaXplKHUpLGEuc2V0RmlsbFN0eWxlKHQueEF4aXMuZm9udENvbG9yfHxcIiM2NjY2NjZcIiksYS5maWxsVGV4dChlK1wiXCIsbFtvXStuLHgrdSsoaS54QXhpc0hlaWdodC1yLXUpLzIpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKX0pOnMuZm9yRWFjaChmdW5jdGlvbihlLG8pe2Euc2F2ZSgpLGEuYmVnaW5QYXRoKCksYS5zZXRGb250U2l6ZSh1KSxhLnNldEZpbGxTdHlsZSh0LnhBeGlzLmZvbnRDb2xvcnx8XCIjNjY2NjY2XCIpO3ZhciBuPW1lYXN1cmVUZXh0KGUrXCJcIix1KSxyPS1uO1wiY2VudGVyXCI9PWgmJihyKz1kLzIpO3ZhciBzPWNhbFJvdGF0ZVRyYW5zbGF0ZShsW29dK2QvMix4K3UvMis1LHQuaGVpZ2h0KSxjPXMudHJhbnNYLHA9cy50cmFuc1k7YS5yb3RhdGUoLTEqaS5feEF4aXNUZXh0QW5nbGVfKSxhLnRyYW5zbGF0ZShjLHApLGEuZmlsbFRleHQoZStcIlwiLGxbb10rcix4K3UrNSksYS5jbG9zZVBhdGgoKSxhLnN0cm9rZSgpLGEucmVzdG9yZSgpfSl9YS5yZXN0b3JlKCksdC54QXhpcy5heGlzTGluZSYmKGEuYmVnaW5QYXRoKCksYS5zZXRTdHJva2VTdHlsZSh0LnhBeGlzLmF4aXNMaW5lQ29sb3IpLGEuc2V0TGluZVdpZHRoKDEqdC5waXhlbFJhdGlvKSxhLm1vdmVUbyhyLHQuaGVpZ2h0LXQuYXJlYVsyXSksYS5saW5lVG8ocyx0LmhlaWdodC10LmFyZWFbMl0pLGEuc3Ryb2tlKCkpfWZ1bmN0aW9uIGRyYXdZQXhpc0dyaWQoZSx0LGksYSl7aWYoITA9PT10LnlBeGlzLmRpc2FibGVHcmlkKXJldHVybjtsZXQgbz10LmhlaWdodC10LmFyZWFbMF0tdC5hcmVhWzJdLG49by90LnlBeGlzLnNwbGl0TnVtYmVyLGw9dC5hcmVhWzNdLHI9dC5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLHM9dC5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nLGQ9cyooci5sZW5ndGgtMSksaD1bXTtmb3IobGV0IG89MDtvPHQueUF4aXMuc3BsaXROdW1iZXIrMTtvKyspaC5wdXNoKHQuaGVpZ2h0LXQuYXJlYVsyXS1uKm8pO2Euc2F2ZSgpLHQuX3Njcm9sbERpc3RhbmNlXyYmMCE9PXQuX3Njcm9sbERpc3RhbmNlXyYmYS50cmFuc2xhdGUodC5fc2Nyb2xsRGlzdGFuY2VfLDApLFwiZGFzaFwiPT10LnlBeGlzLmdyaWRUeXBlJiZhLnNldExpbmVEYXNoKFt0LnlBeGlzLmRhc2hMZW5ndGgsdC55QXhpcy5kYXNoTGVuZ3RoXSksYS5zZXRTdHJva2VTdHlsZSh0LnlBeGlzLmdyaWRDb2xvciksYS5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLGguZm9yRWFjaChmdW5jdGlvbihlKXthLmJlZ2luUGF0aCgpLGEubW92ZVRvKGwsZSksYS5saW5lVG8obCtkLGUpLGEuc3Ryb2tlKCl9KSxhLnNldExpbmVEYXNoKFtdKSxhLnJlc3RvcmUoKX1mdW5jdGlvbiBkcmF3WUF4aXMoZSx0LGEsbyl7aWYoITA9PT10LnlBeGlzLmRpc2FibGVkKXJldHVybjt2YXIgaT10LmhlaWdodC10LmFyZWFbMF0tdC5hcmVhWzJdLG49aS90LnlBeGlzLnNwbGl0TnVtYmVyLGw9dC5hcmVhWzNdLHI9dC53aWR0aC10LmFyZWFbMV0scz10LmhlaWdodC10LmFyZWFbMl0sZD1zK2EueEF4aXNIZWlnaHQ7dC54QXhpcy5zY3JvbGxTaG93JiYoZC09Myp0LnBpeGVsUmF0aW8pLHQueEF4aXMucm90YXRlTGFiZWwmJihkPXQuaGVpZ2h0LXQuYXJlYVsyXSszKSxvLmJlZ2luUGF0aCgpLG8uc2V0RmlsbFN0eWxlKHQuYmFja2dyb3VuZHx8XCIjZmZmZmZmXCIpLDA+dC5fc2Nyb2xsRGlzdGFuY2VfJiZvLmZpbGxSZWN0KDAsMCxsLGQpLCEwPT10LmVuYWJsZVNjcm9sbCYmby5maWxsUmVjdChyLDAsdC53aWR0aCxkKSxvLmNsb3NlUGF0aCgpLG8uc3Ryb2tlKCk7dmFyIGg9W107Zm9yKGxldCBsPTA7bDw9dC55QXhpcy5zcGxpdE51bWJlcjtsKyspaC5wdXNoKHQuYXJlYVswXStuKmwpO2xldCB4PXQuYXJlYVszXSxjPXQud2lkdGgtdC5hcmVhWzFdO2ZvcihsZXQgbixsPTA7bDx0LnlBeGlzLmRhdGEubGVuZ3RoO2wrKylpZihuPXQueUF4aXMuZGF0YVtsXSwhMCE9PW4uZGlzYWJsZWQpe2xldCBlPXQuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNGb3JtYXRbbF0saT1uLmZvbnRTaXplfHxhLmZvbnRTaXplLHI9dC5jaGFydERhdGEueUF4aXNEYXRhLnlBeGlzV2lkdGhbbF07aWYoZS5mb3JFYWNoKGZ1bmN0aW9uKGUsYSl7dmFyIGw9aFthXT9oW2FdOnM7by5iZWdpblBhdGgoKSxvLnNldEZvbnRTaXplKGkpLG8uc2V0TGluZVdpZHRoKDEqdC5waXhlbFJhdGlvKSxvLnNldFN0cm9rZVN0eWxlKG4uYXhpc0xpbmVDb2xvcnx8XCIjY2NjY2NjXCIpLG8uc2V0RmlsbFN0eWxlKG4uZm9udENvbG9yfHxcIiM2NjY2NjZcIiksXCJsZWZ0XCI9PXIucG9zaXRpb24/KG8uZmlsbFRleHQoZStcIlwiLHgtci53aWR0aCxsK2kvMiksITA9PW4uY2FsaWJyYXRpb24mJihvLm1vdmVUbyh4LGwpLG8ubGluZVRvKHgtMyp0LnBpeGVsUmF0aW8sbCkpKTooby5maWxsVGV4dChlK1wiXCIsYys0KnQucGl4ZWxSYXRpbyxsK2kvMiksITA9PW4uY2FsaWJyYXRpb24mJihvLm1vdmVUbyhjLGwpLG8ubGluZVRvKGMrMyp0LnBpeGVsUmF0aW8sbCkpKSxvLmNsb3NlUGF0aCgpLG8uc3Ryb2tlKCl9KSwhMSE9PW4uYXhpc0xpbmUmJihvLmJlZ2luUGF0aCgpLG8uc2V0U3Ryb2tlU3R5bGUobi5heGlzTGluZUNvbG9yfHxcIiNjY2NjY2NcIiksby5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLFwibGVmdFwiPT1yLnBvc2l0aW9uPyhvLm1vdmVUbyh4LHQuaGVpZ2h0LXQuYXJlYVsyXSksby5saW5lVG8oeCx0LmFyZWFbMF0pKTooby5tb3ZlVG8oYyx0LmhlaWdodC10LmFyZWFbMl0pLG8ubGluZVRvKGMsdC5hcmVhWzBdKSksby5zdHJva2UoKSksdC55QXhpcy5zaG93VGl0bGUpe2xldCBlPW4udGl0bGVGb250U2l6ZXx8YS5mb250U2l6ZSxpPW4udGl0bGU7by5iZWdpblBhdGgoKSxvLnNldEZvbnRTaXplKGUpLG8uc2V0RmlsbFN0eWxlKG4udGl0bGVGb250Q29sb3J8fFwiIzY2NjY2NlwiKSxcImxlZnRcIj09ci5wb3NpdGlvbj9vLmZpbGxUZXh0KGkseC1tZWFzdXJlVGV4dChpLGUpLzIsdC5hcmVhWzBdLTEwKnQucGl4ZWxSYXRpbyk6by5maWxsVGV4dChpLGMtbWVhc3VyZVRleHQoaSxlKS8yLHQuYXJlYVswXS0xMCp0LnBpeGVsUmF0aW8pLG8uY2xvc2VQYXRoKCksby5zdHJva2UoKX1cImxlZnRcIj09ci5wb3NpdGlvbj94LT1yLndpZHRoK3QueUF4aXMucGFkZGluZzpjKz1yLndpZHRoK3QueUF4aXMucGFkZGluZ319ZnVuY3Rpb24gZHJhd0xlZ2VuZChlLHQsaSxhLG8pe2lmKCExPT09dC5sZWdlbmQuc2hvdylyZXR1cm47bGV0IG49by5sZWdlbmREYXRhLGw9bi5wb2ludHMscj1uLmFyZWEscz10LmxlZ2VuZC5wYWRkaW5nLGQ9dC5sZWdlbmQuZm9udFNpemUsaD0xNSp0LnBpeGVsUmF0aW8seD01KnQucGl4ZWxSYXRpbyxjPXQubGVnZW5kLml0ZW1HYXAscD1NYXRoLm1heCh0LmxlZ2VuZC5saW5lSGVpZ2h0KnQucGl4ZWxSYXRpbyxkKTthLmJlZ2luUGF0aCgpLGEuc2V0TGluZVdpZHRoKHQubGVnZW5kLmJvcmRlcldpZHRoKSxhLnNldFN0cm9rZVN0eWxlKHQubGVnZW5kLmJvcmRlckNvbG9yKSxhLnNldEZpbGxTdHlsZSh0LmxlZ2VuZC5iYWNrZ3JvdW5kQ29sb3IpLGEubW92ZVRvKHIuc3RhcnQueCxyLnN0YXJ0LnkpLGEucmVjdChyLnN0YXJ0Lngsci5zdGFydC55LHIud2lkdGgsci5oZWlnaHQpLGEuY2xvc2VQYXRoKCksYS5maWxsKCksYS5zdHJva2UoKSxsLmZvckVhY2goZnVuY3Rpb24oZSxvKXtsZXQgbD0wLGc9MDtsPW4ud2lkdGhBcnJbb10sZz1uLmhlaWdodEFycltvXTtsZXQgeT0wLGY9MDtcInRvcFwiPT10LmxlZ2VuZC5wb3NpdGlvbnx8XCJib3R0b21cIj09dC5sZWdlbmQucG9zaXRpb24/KHk9ci5zdGFydC54KyhyLndpZHRoLWwpLzIsZj1yLnN0YXJ0LnkrcytvKnApOihsPTA9PW8/MDpuLndpZHRoQXJyW28tMV0seT1yLnN0YXJ0LngrcytsLGY9ci5zdGFydC55K3MrKHIuaGVpZ2h0LWcpLzIpLGEuc2V0Rm9udFNpemUoaS5mb250U2l6ZSk7Zm9yKGxldCBuLGw9MDtsPGUubGVuZ3RoO2wrKyl7c3dpdGNoKG49ZVtsXSxuLmFyZWE9WzAsMCwwLDBdLG4uYXJlYVswXT15LG4uYXJlYVsxXT1mLG4uYXJlYVszXT1mK3AsYS5iZWdpblBhdGgoKSxhLnNldExpbmVXaWR0aCgxKnQucGl4ZWxSYXRpbyksYS5zZXRTdHJva2VTdHlsZShuLnNob3c/bi5jb2xvcjp0LmxlZ2VuZC5oaWRkZW5Db2xvciksYS5zZXRGaWxsU3R5bGUobi5zaG93P24uY29sb3I6dC5sZWdlbmQuaGlkZGVuQ29sb3IpLG4ubGVnZW5kU2hhcGUpe2Nhc2VcImxpbmVcIjphLm1vdmVUbyh5LGYrLjUqcC0yKnQucGl4ZWxSYXRpbyksYS5maWxsUmVjdCh5LGYrLjUqcC0yKnQucGl4ZWxSYXRpbywxNSp0LnBpeGVsUmF0aW8sNCp0LnBpeGVsUmF0aW8pO2JyZWFrO2Nhc2VcInRyaWFuZ2xlXCI6YS5tb3ZlVG8oeSs3LjUqdC5waXhlbFJhdGlvLGYrLjUqcC01KnQucGl4ZWxSYXRpbyksYS5saW5lVG8oeSsyLjUqdC5waXhlbFJhdGlvLGYrLjUqcCs1KnQucGl4ZWxSYXRpbyksYS5saW5lVG8oeSsxMi41KnQucGl4ZWxSYXRpbyxmKy41KnArNSp0LnBpeGVsUmF0aW8pLGEubGluZVRvKHkrNy41KnQucGl4ZWxSYXRpbyxmKy41KnAtNSp0LnBpeGVsUmF0aW8pO2JyZWFrO2Nhc2VcImRpYW1vbmRcIjphLm1vdmVUbyh5KzcuNSp0LnBpeGVsUmF0aW8sZisuNSpwLTUqdC5waXhlbFJhdGlvKSxhLmxpbmVUbyh5KzIuNSp0LnBpeGVsUmF0aW8sZisuNSpwKSxhLmxpbmVUbyh5KzcuNSp0LnBpeGVsUmF0aW8sZisuNSpwKzUqdC5waXhlbFJhdGlvKSxhLmxpbmVUbyh5KzEyLjUqdC5waXhlbFJhdGlvLGYrLjUqcCksYS5saW5lVG8oeSs3LjUqdC5waXhlbFJhdGlvLGYrLjUqcC01KnQucGl4ZWxSYXRpbyk7YnJlYWs7Y2FzZVwiY2lyY2xlXCI6YS5tb3ZlVG8oeSs3LjUqdC5waXhlbFJhdGlvLGYrLjUqcCksYS5hcmMoeSs3LjUqdC5waXhlbFJhdGlvLGYrLjUqcCw1KnQucGl4ZWxSYXRpbywwLDIqTWF0aC5QSSk7YnJlYWs7Y2FzZVwicmVjdFwiOmEubW92ZVRvKHksZisuNSpwLTUqdC5waXhlbFJhdGlvKSxhLmZpbGxSZWN0KHksZisuNSpwLTUqdC5waXhlbFJhdGlvLDE1KnQucGl4ZWxSYXRpbywxMCp0LnBpeGVsUmF0aW8pO2JyZWFrO2RlZmF1bHQ6YS5tb3ZlVG8oeSxmKy41KnAtNSp0LnBpeGVsUmF0aW8pLGEuZmlsbFJlY3QoeSxmKy41KnAtNSp0LnBpeGVsUmF0aW8sMTUqdC5waXhlbFJhdGlvLDEwKnQucGl4ZWxSYXRpbyk7fWEuY2xvc2VQYXRoKCksYS5maWxsKCksYS5zdHJva2UoKSx5Kz1oK3g7YS5iZWdpblBhdGgoKSxhLnNldEZvbnRTaXplKGQpLGEuc2V0RmlsbFN0eWxlKG4uc2hvdz90LmxlZ2VuZC5mb250Q29sb3I6dC5sZWdlbmQuaGlkZGVuQ29sb3IpLGEuZmlsbFRleHQobi5uYW1lLHksZisoLjUqcCsuNSpkLTIpKSxhLmNsb3NlUGF0aCgpLGEuc3Ryb2tlKCksXCJ0b3BcIj09dC5sZWdlbmQucG9zaXRpb258fFwiYm90dG9tXCI9PXQubGVnZW5kLnBvc2l0aW9uPyh5Kz1tZWFzdXJlVGV4dChuLm5hbWUsZCkrYyxuLmFyZWFbMl09eSk6KG4uYXJlYVsyXT15K21lYXN1cmVUZXh0KG4ubmFtZSxkKStjLHktPWgreCxmKz1wKX19KX1mdW5jdGlvbiBkcmF3UGllRGF0YVBvaW50cyhlLHQsYSxvKXt2YXIgbj1NYXRoLlBJLGw9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjEscj1hc3NpZ24oe30se2FjdGl2ZU9wYWNpdHk6LjUsYWN0aXZlUmFkaXVzOjEwKnQucGl4ZWxSYXRpbyxvZmZzZXRBbmdsZTowLGxhYmVsV2lkdGg6MTUqdC5waXhlbFJhdGlvLHJpbmdXaWR0aDowLGJvcmRlcjohMSxib3JkZXJXaWR0aDoyLGJvcmRlckNvbG9yOlwiI0ZGRkZGRlwifSx0LmV4dHJhLnBpZSkscz17eDp0LmFyZWFbM10rKHQud2lkdGgtdC5hcmVhWzFdLXQuYXJlYVszXSkvMix5OnQuYXJlYVswXSsodC5oZWlnaHQtdC5hcmVhWzBdLXQuYXJlYVsyXSkvMn07MD09YS5waWVDaGFydExpbmVQYWRkaW5nJiYoYS5waWVDaGFydExpbmVQYWRkaW5nPXIuYWN0aXZlUmFkaXVzKTt2YXIgZD1NYXRoLm1pbigodC53aWR0aC10LmFyZWFbMV0tdC5hcmVhWzNdKS8yLWEucGllQ2hhcnRMaW5lUGFkZGluZy1hLnBpZUNoYXJ0VGV4dFBhZGRpbmctYS5fcGllVGV4dE1heExlbmd0aF8sKHQuaGVpZ2h0LXQuYXJlYVswXS10LmFyZWFbMl0pLzItYS5waWVDaGFydExpbmVQYWRkaW5nLWEucGllQ2hhcnRUZXh0UGFkZGluZyk7ZT1nZXRQaWVEYXRhUG9pbnRzKGUsZCxsKTt2YXIgaD1yLmFjdGl2ZVJhZGl1cztpZihlPWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLl9zdGFydF8rPXIub2Zmc2V0QW5nbGUqbi8xODAsZX0pLGUuZm9yRWFjaChmdW5jdGlvbihlLGkpe3QudG9vbHRpcCYmdC50b29sdGlwLmluZGV4PT1pJiYoby5iZWdpblBhdGgoKSxvLnNldEZpbGxTdHlsZShoZXhUb1JnYihlLmNvbG9yLHQuZXh0cmEucGllLmFjdGl2ZU9wYWNpdHl8fC41KSksby5tb3ZlVG8ocy54LHMueSksby5hcmMocy54LHMueSxlLl9yYWRpdXNfK2gsZS5fc3RhcnRfLGUuX3N0YXJ0XysyKmUuX3Byb3BvcnRpb25fKm4pLG8uY2xvc2VQYXRoKCksby5maWxsKCkpLG8uYmVnaW5QYXRoKCksby5zZXRMaW5lV2lkdGgoci5ib3JkZXJXaWR0aCp0LnBpeGVsUmF0aW8pLG8ubGluZUpvaW49XCJyb3VuZFwiLG8uc2V0U3Ryb2tlU3R5bGUoci5ib3JkZXJDb2xvciksby5zZXRGaWxsU3R5bGUoZS5jb2xvciksby5tb3ZlVG8ocy54LHMueSksby5hcmMocy54LHMueSxlLl9yYWRpdXNfLGUuX3N0YXJ0XyxlLl9zdGFydF8rMiplLl9wcm9wb3J0aW9uXypuKSxvLmNsb3NlUGF0aCgpLG8uZmlsbCgpLCEwPT1yLmJvcmRlciYmby5zdHJva2UoKX0pLFwicmluZ1wiPT09dC50eXBlKXt2YXIgeD0uNipkO1wibnVtYmVyXCI9PXR5cGVvZiB0LmV4dHJhLnBpZS5yaW5nV2lkdGgmJjA8dC5leHRyYS5waWUucmluZ1dpZHRoJiYoeD1NYXRoLm1heCgwLGQtdC5leHRyYS5waWUucmluZ1dpZHRoKSksby5iZWdpblBhdGgoKSxvLnNldEZpbGxTdHlsZSh0LmJhY2tncm91bmR8fFwiI2ZmZmZmZlwiKSxvLm1vdmVUbyhzLngscy55KSxvLmFyYyhzLngscy55LHgsMCwyKm4pLG8uY2xvc2VQYXRoKCksby5maWxsKCl9aWYoITEhPT10LmRhdGFMYWJlbCYmMT09PWwpe2Zvcih2YXIgYz0hMSxwPTAsZz1lLmxlbmd0aDtwPGc7cCsrKWlmKDA8ZVtwXS5kYXRhKXtjPSEwO2JyZWFrfWMmJmRyYXdQaWVUZXh0KGUsdCxhLG8sZCxzKX1yZXR1cm4gMT09PWwmJlwicmluZ1wiPT09dC50eXBlJiZkcmF3UmluZ1RpdGxlKHQsYSxvLHMpLHtjZW50ZXI6cyxyYWRpdXM6ZCxzZXJpZXM6ZX19ZnVuY3Rpb24gZHJhd1Jvc2VEYXRhUG9pbnRzKGUsdCxhLG8pe3ZhciBuPU1hdGguUEksbD00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MSxyPWFzc2lnbih7fSx7dHlwZTpcImFyZWFcIixhY3RpdmVPcGFjaXR5Oi41LGFjdGl2ZVJhZGl1czoxMCp0LnBpeGVsUmF0aW8sb2Zmc2V0QW5nbGU6MCxsYWJlbFdpZHRoOjE1KnQucGl4ZWxSYXRpbyxib3JkZXI6ITEsYm9yZGVyV2lkdGg6Mixib3JkZXJDb2xvcjpcIiNGRkZGRkZcIn0sdC5leHRyYS5yb3NlKTswPT1hLnBpZUNoYXJ0TGluZVBhZGRpbmcmJihhLnBpZUNoYXJ0TGluZVBhZGRpbmc9ci5hY3RpdmVSYWRpdXMpO3ZhciBzPXt4OnQuYXJlYVszXSsodC53aWR0aC10LmFyZWFbMV0tdC5hcmVhWzNdKS8yLHk6dC5hcmVhWzBdKyh0LmhlaWdodC10LmFyZWFbMF0tdC5hcmVhWzJdKS8yfSxkPU1hdGgubWluKCh0LndpZHRoLXQuYXJlYVsxXS10LmFyZWFbM10pLzItYS5waWVDaGFydExpbmVQYWRkaW5nLWEucGllQ2hhcnRUZXh0UGFkZGluZy1hLl9waWVUZXh0TWF4TGVuZ3RoXywodC5oZWlnaHQtdC5hcmVhWzBdLXQuYXJlYVsyXSkvMi1hLnBpZUNoYXJ0TGluZVBhZGRpbmctYS5waWVDaGFydFRleHRQYWRkaW5nKSxoPXIubWluUmFkaXVzfHwuNSpkO2U9Z2V0Um9zZURhdGFQb2ludHMoZSxyLnR5cGUsaCxkLGwpO3ZhciB4PXIuYWN0aXZlUmFkaXVzO2lmKGU9ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuX3N0YXJ0Xys9KHIub2Zmc2V0QW5nbGV8fDApKm4vMTgwLGV9KSxlLmZvckVhY2goZnVuY3Rpb24oZSxpKXt0LnRvb2x0aXAmJnQudG9vbHRpcC5pbmRleD09aSYmKG8uYmVnaW5QYXRoKCksby5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZS5jb2xvcixyLmFjdGl2ZU9wYWNpdHl8fC41KSksby5tb3ZlVG8ocy54LHMueSksby5hcmMocy54LHMueSx4K2UuX3JhZGl1c18sZS5fc3RhcnRfLGUuX3N0YXJ0XysyKmUuX3Jvc2VfcHJvcG9ydGlvbl8qbiksby5jbG9zZVBhdGgoKSxvLmZpbGwoKSksby5iZWdpblBhdGgoKSxvLnNldExpbmVXaWR0aChyLmJvcmRlcldpZHRoKnQucGl4ZWxSYXRpbyksby5saW5lSm9pbj1cInJvdW5kXCIsby5zZXRTdHJva2VTdHlsZShyLmJvcmRlckNvbG9yKSxvLnNldEZpbGxTdHlsZShlLmNvbG9yKSxvLm1vdmVUbyhzLngscy55KSxvLmFyYyhzLngscy55LGUuX3JhZGl1c18sZS5fc3RhcnRfLGUuX3N0YXJ0XysyKmUuX3Jvc2VfcHJvcG9ydGlvbl8qbiksby5jbG9zZVBhdGgoKSxvLmZpbGwoKSwhMD09ci5ib3JkZXImJm8uc3Ryb2tlKCl9KSwhMSE9PXQuZGF0YUxhYmVsJiYxPT09bCl7Zm9yKHZhciBjPSExLHA9MCxnPWUubGVuZ3RoO3A8ZztwKyspaWYoMDxlW3BdLmRhdGEpe2M9ITA7YnJlYWt9YyYmZHJhd1BpZVRleHQoZSx0LGEsbyxkLHMpfXJldHVybntjZW50ZXI6cyxyYWRpdXM6ZCxzZXJpZXM6ZX19ZnVuY3Rpb24gZHJhd0FyY2JhckRhdGFQb2ludHMoZSx0LGksYSl7dmFyIG89TWF0aC5QSSxuPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLGw9YXNzaWduKHt9LHtzdGFydEFuZ2xlOi43NSxlbmRBbmdsZTouMjUsdHlwZTpcImRlZmF1bHRcIix3aWR0aDoxMip0LnBpeGVsUmF0aW8sZ2FwOjIqdC5waXhlbFJhdGlvfSx0LmV4dHJhLmFyY2Jhcik7ZT1nZXRBcmNiYXJEYXRhUG9pbnRzKGUsbCxuKTt2YXIgcj1sLmNlbnRlcj9sLmNlbnRlcjp7eDp0LndpZHRoLzIseTp0LmhlaWdodC8yfTt2YXIgcztsLnJhZGl1cz9zPWwucmFkaXVzOihzPU1hdGgubWluKHIueCxyLnkpLHMtPTUqdC5waXhlbFJhdGlvLHMtPWwud2lkdGgvMik7Zm9yKGxldCBuLGQ9MDtkPGUubGVuZ3RoO2QrKyluPWVbZF0sYS5zZXRMaW5lV2lkdGgobC53aWR0aCksYS5zZXRTdHJva2VTdHlsZShsLmJhY2tncm91bmRDb2xvcnx8XCIjRTlFOUU5XCIpLGEuc2V0TGluZUNhcChcInJvdW5kXCIpLGEuYmVnaW5QYXRoKCksXCJkZWZhdWx0XCI9PWwudHlwZT9hLmFyYyhyLngsci55LHMtKGwud2lkdGgrbC5nYXApKmQsbC5zdGFydEFuZ2xlKm8sbC5lbmRBbmdsZSpvLCExKTphLmFyYyhyLngsci55LHMtKGwud2lkdGgrbC5nYXApKmQsMCwyKm8sITEpLGEuc3Ryb2tlKCksYS5zZXRMaW5lV2lkdGgobC53aWR0aCksYS5zZXRTdHJva2VTdHlsZShuLmNvbG9yKSxhLnNldExpbmVDYXAoXCJyb3VuZFwiKSxhLmJlZ2luUGF0aCgpLGEuYXJjKHIueCxyLnkscy0obC53aWR0aCtsLmdhcCkqZCxsLnN0YXJ0QW5nbGUqbyxuLl9wcm9wb3J0aW9uXypvLCExKSxhLnN0cm9rZSgpO3JldHVybiBkcmF3UmluZ1RpdGxlKHQsaSxhLHIpLHtjZW50ZXI6cixyYWRpdXM6cyxzZXJpZXM6ZX19ZnVuY3Rpb24gZHJhd0dhdWdlRGF0YVBvaW50cyhlLHQsYSxpLG8pe3ZhciBuPU1hdGguUEksbD01PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s1XT9hcmd1bWVudHNbNV06MSxyPWFzc2lnbih7fSx7dHlwZTpcImRlZmF1bHRcIixzdGFydEFuZ2xlOi43NSxlbmRBbmdsZTouMjUsd2lkdGg6MTUsc3BsaXRMaW5lOntmaXhSYWRpdXM6MCxzcGxpdE51bWJlcjoxMCx3aWR0aDoxNSxjb2xvcjpcIiNGRkZGRkZcIixjaGlsZE51bWJlcjo1LGNoaWxkV2lkdGg6NX0scG9pbnRlcjp7d2lkdGg6MTUsY29sb3I6XCJhdXRvXCJ9fSxhLmV4dHJhLmdhdWdlKTtudWxsPT1yLm9sZEFuZ2xlJiYoci5vbGRBbmdsZT1yLnN0YXJ0QW5nbGUpLG51bGw9PXIub2xkRGF0YSYmKHIub2xkRGF0YT0wKSxlPWdldEdhdWdlQXhpc1BvaW50cyhlLHIuc3RhcnRBbmdsZSxyLmVuZEFuZ2xlKTt2YXIgcz17eDphLndpZHRoLzIseTphLmhlaWdodC8yfSxkPU1hdGgubWluKHMueCxzLnkpO2QtPTUqYS5waXhlbFJhdGlvLGQtPXIud2lkdGgvMjt2YXIgaD1kLXIud2lkdGgseD0wO2lmKFwicHJvZ3Jlc3NcIj09ci50eXBlKXt2YXIgYz1kLTMqci53aWR0aDtvLmJlZ2luUGF0aCgpO2xldCBlPW8uY3JlYXRlTGluZWFyR3JhZGllbnQocy54LHMueS1jLHMueCxzLnkrYyk7ZS5hZGRDb2xvclN0b3AoXCIwXCIsaGV4VG9SZ2IodFswXS5jb2xvciwuMykpLGUuYWRkQ29sb3JTdG9wKFwiMS4wXCIsaGV4VG9SZ2IoXCIjRkZGRkZGXCIsLjEpKSxvLnNldEZpbGxTdHlsZShlKSxvLmFyYyhzLngscy55LGMsMCwyKm4sITEpLG8uZmlsbCgpLG8uc2V0TGluZVdpZHRoKHIud2lkdGgpLG8uc2V0U3Ryb2tlU3R5bGUoaGV4VG9SZ2IodFswXS5jb2xvciwuMykpLG8uc2V0TGluZUNhcChcInJvdW5kXCIpLG8uYmVnaW5QYXRoKCksby5hcmMocy54LHMueSxoLHIuc3RhcnRBbmdsZSpuLHIuZW5kQW5nbGUqbiwhMSksby5zdHJva2UoKSx4PXIuc3RhcnRBbmdsZS1yLmVuZEFuZ2xlKzE7bGV0IGk9eC9yLnNwbGl0TGluZS5zcGxpdE51bWJlcixwPXgvci5zcGxpdExpbmUuc3BsaXROdW1iZXIvci5zcGxpdExpbmUuY2hpbGROdW1iZXIsZz0tZC0uNSpyLndpZHRoLXIuc3BsaXRMaW5lLmZpeFJhZGl1cyx5PS1kLXIud2lkdGgtci5zcGxpdExpbmUuZml4UmFkaXVzK3Iuc3BsaXRMaW5lLndpZHRoO28uc2F2ZSgpLG8udHJhbnNsYXRlKHMueCxzLnkpLG8ucm90YXRlKChyLnN0YXJ0QW5nbGUtMSkqbik7bGV0IGY9ci5zcGxpdExpbmUuc3BsaXROdW1iZXIqci5zcGxpdExpbmUuY2hpbGROdW1iZXIrMSx1PXRbMF0uZGF0YSpsO2ZvcihsZXQgZT0wO2U8ZjtlKyspby5iZWdpblBhdGgoKSx1PmUvZj9vLnNldFN0cm9rZVN0eWxlKGhleFRvUmdiKHRbMF0uY29sb3IsMSkpOm8uc2V0U3Ryb2tlU3R5bGUoaGV4VG9SZ2IodFswXS5jb2xvciwuMykpLG8uc2V0TGluZVdpZHRoKDMqYS5waXhlbFJhdGlvKSxvLm1vdmVUbyhnLDApLG8ubGluZVRvKHksMCksby5zdHJva2UoKSxvLnJvdGF0ZShwKm4pO28ucmVzdG9yZSgpLHQ9Z2V0QXJjYmFyRGF0YVBvaW50cyh0LHIsbCksby5zZXRMaW5lV2lkdGgoci53aWR0aCksby5zZXRTdHJva2VTdHlsZSh0WzBdLmNvbG9yKSxvLnNldExpbmVDYXAoXCJyb3VuZFwiKSxvLmJlZ2luUGF0aCgpLG8uYXJjKHMueCxzLnksaCxyLnN0YXJ0QW5nbGUqbix0WzBdLl9wcm9wb3J0aW9uXypuLCExKSxvLnN0cm9rZSgpO2xldCBtPWQtMi41KnIud2lkdGg7by5zYXZlKCksby50cmFuc2xhdGUocy54LHMueSksby5yb3RhdGUoKHRbMF0uX3Byb3BvcnRpb25fLTEpKm4pLG8uYmVnaW5QYXRoKCksby5zZXRMaW5lV2lkdGgoci53aWR0aC8zKTtsZXQgUz1vLmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsLjYqLW0sMCwuNiptKTtTLmFkZENvbG9yU3RvcChcIjBcIixoZXhUb1JnYihcIiNGRkZGRkZcIiwwKSksUy5hZGRDb2xvclN0b3AoXCIwLjVcIixoZXhUb1JnYih0WzBdLmNvbG9yLDEpKSxTLmFkZENvbG9yU3RvcChcIjEuMFwiLGhleFRvUmdiKFwiI0ZGRkZGRlwiLDApKSxvLnNldFN0cm9rZVN0eWxlKFMpLG8uYXJjKDAsMCxtLC44NSpuLDEuMTUqbiwhMSksby5zdHJva2UoKSxvLmJlZ2luUGF0aCgpLG8uc2V0TGluZVdpZHRoKDEpLG8uc2V0U3Ryb2tlU3R5bGUodFswXS5jb2xvciksby5zZXRGaWxsU3R5bGUodFswXS5jb2xvciksby5tb3ZlVG8oLW0tci53aWR0aC8zLzIsLTQpLG8ubGluZVRvKC1tLXIud2lkdGgvMy8yLTQsMCksby5saW5lVG8oLW0tci53aWR0aC8zLzIsNCksby5saW5lVG8oLW0tci53aWR0aC8zLzIsLTQpLG8uc3Ryb2tlKCksby5maWxsKCksby5yZXN0b3JlKCl9ZWxzZXtvLnNldExpbmVXaWR0aChyLndpZHRoKSxvLnNldExpbmVDYXAoXCJidXR0XCIpO2ZvcihsZXQgdCxhPTA7YTxlLmxlbmd0aDthKyspdD1lW2FdLG8uYmVnaW5QYXRoKCksby5zZXRTdHJva2VTdHlsZSh0LmNvbG9yKSxvLmFyYyhzLngscy55LGQsdC5fc3RhcnRBbmdsZV8qbix0Ll9lbmRBbmdsZV8qbiwhMSksby5zdHJva2UoKTtvLnNhdmUoKSx4PXIuc3RhcnRBbmdsZS1yLmVuZEFuZ2xlKzE7bGV0IGM9eC9yLnNwbGl0TGluZS5zcGxpdE51bWJlcixwPXgvci5zcGxpdExpbmUuc3BsaXROdW1iZXIvci5zcGxpdExpbmUuY2hpbGROdW1iZXIsZz0tZC0uNSpyLndpZHRoLXIuc3BsaXRMaW5lLmZpeFJhZGl1cyx5PS1kLS41KnIud2lkdGgtci5zcGxpdExpbmUuZml4UmFkaXVzK3Iuc3BsaXRMaW5lLndpZHRoLGY9LWQtLjUqci53aWR0aC1yLnNwbGl0TGluZS5maXhSYWRpdXMrci5zcGxpdExpbmUuY2hpbGRXaWR0aDtvLnRyYW5zbGF0ZShzLngscy55KSxvLnJvdGF0ZSgoci5zdGFydEFuZ2xlLTEpKm4pO2ZvcihsZXQgZT0wO2U8ci5zcGxpdExpbmUuc3BsaXROdW1iZXIrMTtlKyspby5iZWdpblBhdGgoKSxvLnNldFN0cm9rZVN0eWxlKHIuc3BsaXRMaW5lLmNvbG9yKSxvLnNldExpbmVXaWR0aCgyKmEucGl4ZWxSYXRpbyksby5tb3ZlVG8oZywwKSxvLmxpbmVUbyh5LDApLG8uc3Ryb2tlKCksby5yb3RhdGUoYypuKTtvLnJlc3RvcmUoKSxvLnNhdmUoKSxvLnRyYW5zbGF0ZShzLngscy55KSxvLnJvdGF0ZSgoci5zdGFydEFuZ2xlLTEpKm4pO2ZvcihsZXQgZT0wO2U8ci5zcGxpdExpbmUuc3BsaXROdW1iZXIqci5zcGxpdExpbmUuY2hpbGROdW1iZXIrMTtlKyspby5iZWdpblBhdGgoKSxvLnNldFN0cm9rZVN0eWxlKHIuc3BsaXRMaW5lLmNvbG9yKSxvLnNldExpbmVXaWR0aCgxKmEucGl4ZWxSYXRpbyksby5tb3ZlVG8oZywwKSxvLmxpbmVUbyhmLDApLG8uc3Ryb2tlKCksby5yb3RhdGUocCpuKTtvLnJlc3RvcmUoKSx0PWdldEdhdWdlRGF0YVBvaW50cyh0LGUscixsKTtmb3IobGV0IGUsYT0wO2E8dC5sZW5ndGg7YSsrKWU9dFthXSxvLnNhdmUoKSxvLnRyYW5zbGF0ZShzLngscy55KSxvLnJvdGF0ZSgoZS5fcHJvcG9ydGlvbl8tMSkqbiksby5iZWdpblBhdGgoKSxvLnNldEZpbGxTdHlsZShlLmNvbG9yKSxvLm1vdmVUbyhyLnBvaW50ZXIud2lkdGgsMCksby5saW5lVG8oMCwtci5wb2ludGVyLndpZHRoLzIpLG8ubGluZVRvKC1oLDApLG8ubGluZVRvKDAsci5wb2ludGVyLndpZHRoLzIpLG8ubGluZVRvKHIucG9pbnRlci53aWR0aCwwKSxvLmNsb3NlUGF0aCgpLG8uZmlsbCgpLG8uYmVnaW5QYXRoKCksby5zZXRGaWxsU3R5bGUoXCIjRkZGRkZGXCIpLG8uYXJjKDAsMCxyLnBvaW50ZXIud2lkdGgvNiwwLDIqbiwhMSksby5maWxsKCksby5yZXN0b3JlKCk7ITEhPT1hLmRhdGFMYWJlbCYmZHJhd0dhdWdlTGFiZWwocixkLHMsYSxpLG8pfXJldHVybiBkcmF3UmluZ1RpdGxlKGEsaSxvLHMpLDE9PT1sJiZcImdhdWdlXCI9PT1hLnR5cGUmJihhLmV4dHJhLmdhdWdlLm9sZEFuZ2xlPXRbMF0uX3Byb3BvcnRpb25fLGEuZXh0cmEuZ2F1Z2Uub2xkRGF0YT10WzBdLmRhdGEpLHtjZW50ZXI6cyxyYWRpdXM6ZCxpbm5lclJhZGl1czpoLGNhdGVnb3JpZXM6ZSx0b3RhbEFuZ2xlOnh9fWZ1bmN0aW9uIGRyYXdSYWRhckRhdGFQb2ludHMoZSx0LGEsbyl7dmFyIG49TWF0aC5jb3MsbD1NYXRoLnNpbixyPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLHM9YXNzaWduKHt9LHtncmlkQ29sb3I6XCIjY2NjY2NjXCIsbGFiZWxDb2xvcjpcIiM2NjY2NjZcIixvcGFjaXR5Oi4yLGdyaWRDb3VudDozfSx0LmV4dHJhLnJhZGFyKSxkPWdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyh0LmNhdGVnb3JpZXMubGVuZ3RoKSxoPXt4OnQuYXJlYVszXSsodC53aWR0aC10LmFyZWFbMV0tdC5hcmVhWzNdKS8yLHk6dC5hcmVhWzBdKyh0LmhlaWdodC10LmFyZWFbMF0tdC5hcmVhWzJdKS8yfSx4PU1hdGgubWluKGgueC0oZ2V0TWF4VGV4dExpc3RMZW5ndGgodC5jYXRlZ29yaWVzKSthLnJhZGFyTGFiZWxUZXh0TWFyZ2luKSxoLnktYS5yYWRhckxhYmVsVGV4dE1hcmdpbik7eC09dC5wYWRkaW5nWzFdLG8uYmVnaW5QYXRoKCksby5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLG8uc2V0U3Ryb2tlU3R5bGUocy5ncmlkQ29sb3IpLGQuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1jb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbih4Km4oZSkseCpsKGUpLGgpO28ubW92ZVRvKGgueCxoLnkpLG8ubGluZVRvKHQueCx0LnkpfSksby5zdHJva2UoKSxvLmNsb3NlUGF0aCgpO2Zvcih2YXIgYz1mdW5jdGlvbihlKXt2YXIgaT17fTtvLmJlZ2luUGF0aCgpLG8uc2V0TGluZVdpZHRoKDEqdC5waXhlbFJhdGlvKSxvLnNldFN0cm9rZVN0eWxlKHMuZ3JpZENvbG9yKSxkLmZvckVhY2goZnVuY3Rpb24odCxhKXt2YXIgcj1jb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbih4L3MuZ3JpZENvdW50KmUqbih0KSx4L3MuZ3JpZENvdW50KmUqbCh0KSxoKTswPT09YT8oaT1yLG8ubW92ZVRvKHIueCxyLnkpKTpvLmxpbmVUbyhyLngsci55KX0pLG8ubGluZVRvKGkueCxpLnkpLG8uc3Ryb2tlKCksby5jbG9zZVBhdGgoKX0scD0xO3A8PXMuZ3JpZENvdW50O3ArKyljKHApO3ZhciBnPWdldFJhZGFyRGF0YVBvaW50cyhkLGgseCxlLHQscik7cmV0dXJuIGcuZm9yRWFjaChmdW5jdGlvbihlKXtpZihvLmJlZ2luUGF0aCgpLG8uc2V0RmlsbFN0eWxlKGhleFRvUmdiKGUuY29sb3Iscy5vcGFjaXR5KSksZS5kYXRhLmZvckVhY2goZnVuY3Rpb24oZSx0KXswPT09dD9vLm1vdmVUbyhlLnBvc2l0aW9uLngsZS5wb3NpdGlvbi55KTpvLmxpbmVUbyhlLnBvc2l0aW9uLngsZS5wb3NpdGlvbi55KX0pLG8uY2xvc2VQYXRoKCksby5maWxsKCksITEhPT10LmRhdGFQb2ludFNoYXBlKXt2YXIgaT1lLmRhdGEubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBvc2l0aW9ufSk7ZHJhd1BvaW50U2hhcGUoaSxlLmNvbG9yLGUucG9pbnRTaGFwZSxvLHQpfX0pLGRyYXdSYWRhckxhYmVsKGQseCxoLHQsYSxvKSx7Y2VudGVyOmgscmFkaXVzOngsYW5nbGVMaXN0OmR9fWZ1bmN0aW9uIG5vcm1hbEludChlLHQsYSl7YT0wPT1hPzE6YTtmb3IodmFyIG89W10sbj0wO248YTtuKyspb1tuXT1NYXRoLnJhbmRvbSgpO3JldHVybiBNYXRoLmZsb29yKG8ucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUrdH0pL2EqKHQtZSkpK2V9ZnVuY3Rpb24gY29sbGlzaW9uTmV3KGUsdCxhLG8pe3ZhciBuPSExO2ZvcihsZXQgbD0wO2w8dC5sZW5ndGg7bCsrKWlmKHRbbF0uYXJlYSlpZighKGVbM108dFtsXS5hcmVhWzFdfHxlWzBdPnRbbF0uYXJlYVsyXXx8ZVsxXT50W2xdLmFyZWFbM118fGVbMl08dFtsXS5hcmVhWzBdKSl7bj0hMDticmVha31lbHNlIGlmKDA+ZVswXXx8MD5lWzFdfHxlWzJdPmF8fGVbM10+byl7bj0hMDticmVha31lbHNlIG49ITE7cmV0dXJuIG59ZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZSl7dmFyIHQsYT17fTthLnhNaW49MTgwLGEueE1heD0wLGEueU1pbj05MCxhLnlNYXg9MDtmb3IodmFyIG8sbj0wO248ZS5sZW5ndGg7bisrKXtvPWVbbl0uZ2VvbWV0cnkuY29vcmRpbmF0ZXM7Zm9yKHZhciBsPTA7bDxvLmxlbmd0aDtsKyspe3Q9b1tsXSwxPT10Lmxlbmd0aCYmKHQ9dFswXSk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBzPXRbcl1bMF0sZD10W3JdWzFdLGg9e3g6cyx5OmR9O2EueE1pbj1hLnhNaW48aC54P2EueE1pbjpoLngsYS54TWF4PWEueE1heD5oLng/YS54TWF4OmgueCxhLnlNaW49YS55TWluPGgueT9hLnlNaW46aC55LGEueU1heD1hLnlNYXg+aC55P2EueU1heDpoLnl9fX1yZXR1cm4gYX1mdW5jdGlvbiBjb29yZGluYXRlVG9Qb2ludChlLHQsaSxhLG8sbil7cmV0dXJue3g6KHQtaS54TWluKSphK28seTooaS55TWF4LWUpKmErbn19ZnVuY3Rpb24gcG9pbnRUb0Nvb3JkaW5hdGUoZSx0LGksYSxvLG4pe3JldHVybnt4Oih0LW8pL2EraS54TWluLHk6aS55TWF4LShlLW4pL2F9fWZ1bmN0aW9uIGlzUmF5SW50ZXJzZWN0c1NlZ21lbnQoZSx0LGkpe2lmKHRbMV09PWlbMV0pcmV0dXJuITE7aWYodFsxXT5lWzFdJiZpWzFdPmVbMV0pcmV0dXJuITE7aWYodFsxXTxlWzFdJiZpWzFdPGVbMV0pcmV0dXJuITE7aWYodFsxXT09ZVsxXSYmaVsxXT5lWzFdKXJldHVybiExO2lmKGlbMV09PWVbMV0mJnRbMV0+ZVsxXSlyZXR1cm4hMTtpZih0WzBdPGVbMF0mJmlbMV08ZVsxXSlyZXR1cm4hMTtsZXQgYT1pWzBdLShpWzBdLXRbMF0pKihpWzFdLWVbMV0pLyhpWzFdLXRbMV0pO3JldHVybiEoYTxlWzBdKX1mdW5jdGlvbiBpc1BvaVdpdGhpblBvbHkoZSx0KXtsZXQgaT0wO2ZvcihsZXQgYSxvPTA7bzx0Lmxlbmd0aDtvKyspe2E9dFtvXVswXSwxPT10Lmxlbmd0aCYmKGE9dFtvXVswXSk7Zm9yKGxldCB0PTA7dDxhLmxlbmd0aC0xO3QrKyl7bGV0IG89YVt0XSxuPWFbdCsxXTtpc1JheUludGVyc2VjdHNTZWdtZW50KGUsbyxuKSYmKGkrPTEpfX1yZXR1cm4hKDEhPWklMil9ZnVuY3Rpb24gZHJhd01hcERhdGFQb2ludHMoZSx0LGEsbyl7dmFyIG4sbCxyPU1hdGguYWJzLHM9YXNzaWduKHt9LHtib3JkZXI6ITAsYm9yZGVyV2lkdGg6MSxib3JkZXJDb2xvcjpcIiM2NjY2NjZcIixmaWxsT3BhY2l0eTouNixhY3RpdmVCb3JkZXJDb2xvcjpcIiNmMDQ4NjRcIixhY3RpdmVGaWxsQ29sb3I6XCIjZmFjYzE0XCIsYWN0aXZlRmlsbE9wYWNpdHk6MX0sdC5leHRyYS5tYXApLGQ9ZSxoPWdldEJvdW5kaW5nQm94KGQpLHg9dC53aWR0aC9yKGgueE1heC1oLnhNaW4pLGM9dC5oZWlnaHQvcihoLnlNYXgtaC55TWluKSxwPXg8Yz94OmMsZz10LndpZHRoLzItcihoLnhNYXgtaC54TWluKS8yKnAseT10LmhlaWdodC8yLXIoaC55TWF4LWgueU1pbikvMipwO28uYmVnaW5QYXRoKCksby5jbGVhclJlY3QoMCwwLHQud2lkdGgsdC5oZWlnaHQpLG8uc2V0RmlsbFN0eWxlKHQuYmFja2dyb3VuZHx8XCIjRkZGRkZGXCIpLG8ucmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksby5maWxsKCk7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe28uYmVnaW5QYXRoKCksby5zZXRMaW5lV2lkdGgocy5ib3JkZXJXaWR0aCp0LnBpeGVsUmF0aW8pLG8uc2V0U3Ryb2tlU3R5bGUocy5ib3JkZXJDb2xvciksby5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZVtmXS5jb2xvcixzLmZpbGxPcGFjaXR5KSksdC50b29sdGlwJiZ0LnRvb2x0aXAuaW5kZXg9PWYmJihvLnNldFN0cm9rZVN0eWxlKHMuYWN0aXZlQm9yZGVyQ29sb3IpLG8uc2V0RmlsbFN0eWxlKGhleFRvUmdiKHMuYWN0aXZlRmlsbENvbG9yLHMuYWN0aXZlRmlsbE9wYWNpdHkpKSk7Zm9yKHZhciB1PWRbZl0uZ2VvbWV0cnkuY29vcmRpbmF0ZXMsbT0wO208dS5sZW5ndGg7bSsrKXtuPXVbbV0sMT09bi5sZW5ndGgmJihuPW5bMF0pO2Zvcih2YXIgUz0wO1M8bi5sZW5ndGg7UysrKWw9Y29vcmRpbmF0ZVRvUG9pbnQobltTXVsxXSxuW1NdWzBdLGgscCxnLHkpLDA9PVM/KG8uYmVnaW5QYXRoKCksby5tb3ZlVG8obC54LGwueSkpOm8ubGluZVRvKGwueCxsLnkpO28uZmlsbCgpLCEwPT1zLmJvcmRlciYmby5zdHJva2UoKX1pZighMD09dC5kYXRhTGFiZWwpe3ZhciBUPWRbZl0ucHJvcGVydGllcy5jZW50cm9pZDtpZihUKXtsPWNvb3JkaW5hdGVUb1BvaW50KFRbMV0sVFswXSxoLHAsZyx5KTtsZXQgZT1kW2ZdLnRleHRTaXplfHxhLmZvbnRTaXplLHQ9ZFtmXS5wcm9wZXJ0aWVzLm5hbWU7by5iZWdpblBhdGgoKSxvLnNldEZvbnRTaXplKGUpLG8uc2V0RmlsbFN0eWxlKGRbZl0udGV4dENvbG9yfHxcIiM2NjY2NjZcIiksby5maWxsVGV4dCh0LGwueC1tZWFzdXJlVGV4dCh0LGUpLzIsbC55K2UvMiksby5jbG9zZVBhdGgoKSxvLnN0cm9rZSgpfX19dC5jaGFydERhdGEubWFwRGF0YT17Ym91bmRzOmgsc2NhbGU6cCx4b2Zmc2V0OmcseW9mZnNldDp5fSxkcmF3VG9vbFRpcEJyaWRnZSh0LGEsbywxKSxvLmRyYXcoKX1mdW5jdGlvbiBnZXRXb3JkQ2xvdWRQb2ludChlLHQpe2xldCBhPWUuc2VyaWVzLnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gcGFyc2VJbnQodC50ZXh0U2l6ZSktcGFyc2VJbnQoZS50ZXh0U2l6ZSl9KTtzd2l0Y2godCl7Y2FzZVwibm9ybWFsXCI6Zm9yKGxldCB0PTA7dDxhLmxlbmd0aDt0Kyspe2xldCBpLG8sbixsPWFbdF0ubmFtZSxyPWFbdF0udGV4dFNpemUscz1tZWFzdXJlVGV4dChsLHIpLGQ9MDtmb3IoOzspe2QrKyxpPW5vcm1hbEludCgtZS53aWR0aC8yLGUud2lkdGgvMiw1KS1zLzIsbz1ub3JtYWxJbnQoLWUuaGVpZ2h0LzIsZS5oZWlnaHQvMiw1KStyLzIsbj1baS01K2Uud2lkdGgvMixvLTUtcitlLmhlaWdodC8yLGkrcys1K2Uud2lkdGgvMixvKzUrZS5oZWlnaHQvMl07bGV0IHQ9Y29sbGlzaW9uTmV3KG4sYSxlLndpZHRoLGUuaGVpZ2h0KTtpZighdClicmVhaztpZigxZTM9PWQpe249Wy0xMDAsLTEwMCwtMTAwLC0xMDBdO2JyZWFrfX1hW3RdLmFyZWE9bn1icmVhaztjYXNlXCJ2ZXJ0aWNhbFwiOmZ1bmN0aW9uIG8oKXtyZXR1cm4hISguNzxNYXRoLnJhbmRvbSgpKX07Zm9yKGxldCB0PTA7dDxhLmxlbmd0aDt0Kyspe2xldCBpLG4sbCxyLHM9YVt0XS5uYW1lLGQ9YVt0XS50ZXh0U2l6ZSxoPW1lYXN1cmVUZXh0KHMsZCkseD1vKCksYz0wO2Zvcig7Oyl7YysrO2xldCB0O2lmKHg/KGk9bm9ybWFsSW50KC1lLndpZHRoLzIsZS53aWR0aC8yLDUpLWgvMixuPW5vcm1hbEludCgtZS5oZWlnaHQvMixlLmhlaWdodC8yLDUpK2QvMixsPVtuLTUtaCtlLndpZHRoLzIsLWktNStlLmhlaWdodC8yLG4rNStlLndpZHRoLzIsLWkrZCs1K2UuaGVpZ2h0LzJdLHI9W2Uud2lkdGgtKGUud2lkdGgvMi1lLmhlaWdodC8yKS0oLWkrZCs1K2UuaGVpZ2h0LzIpLTUsZS5oZWlnaHQvMi1lLndpZHRoLzIrKG4tNS1oK2Uud2lkdGgvMiktNSxlLndpZHRoLShlLndpZHRoLzItZS5oZWlnaHQvMiktKC1pK2QrNStlLmhlaWdodC8yKStkLGUuaGVpZ2h0LzItZS53aWR0aC8yKyhuLTUtaCtlLndpZHRoLzIpK2grNV0sdD1jb2xsaXNpb25OZXcocixhLGUuaGVpZ2h0LGUud2lkdGgpKTooaT1ub3JtYWxJbnQoLWUud2lkdGgvMixlLndpZHRoLzIsNSktaC8yLG49bm9ybWFsSW50KC1lLmhlaWdodC8yLGUuaGVpZ2h0LzIsNSkrZC8yLGw9W2ktNStlLndpZHRoLzIsbi01LWQrZS5oZWlnaHQvMixpK2grNStlLndpZHRoLzIsbis1K2UuaGVpZ2h0LzJdLHQ9Y29sbGlzaW9uTmV3KGwsYSxlLndpZHRoLGUuaGVpZ2h0KSksIXQpYnJlYWs7aWYoMWUzPT1jKXtsPVstMWUzLC0xZTMsLTFlMywtMWUzXTticmVha319eD8oYVt0XS5hcmVhPXIsYVt0XS5hcmVhdj1sKTphW3RdLmFyZWE9bCxhW3RdLnJvdGF0ZT14fTt9cmV0dXJuIGF9ZnVuY3Rpb24gZHJhd1dvcmRDbG91ZERhdGFQb2ludHMoZSx0LGksYSl7bGV0IG89NDxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbNF0hPT12b2lkIDA/YXJndW1lbnRzWzRdOjEsbj1hc3NpZ24oe30se3R5cGU6XCJub3JtYWxcIixhdXRvQ29sb3JzOiEwfSx0LmV4dHJhLndvcmQpO2EuYmVnaW5QYXRoKCksYS5zZXRGaWxsU3R5bGUodC5iYWNrZ3JvdW5kfHxcIiNGRkZGRkZcIiksYS5yZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSxhLmZpbGwoKSxhLnNhdmUoKTtsZXQgbD10LmNoYXJ0RGF0YS53b3JkQ2xvdWREYXRhO2EudHJhbnNsYXRlKHQud2lkdGgvMix0LmhlaWdodC8yKTtmb3IobGV0IG49MDtuPGwubGVuZ3RoO24rKyl7YS5zYXZlKCksbFtuXS5yb3RhdGUmJmEucm90YXRlKDkwKk1hdGguUEkvMTgwKTtsZXQgZT1sW25dLm5hbWUsaT1sW25dLnRleHRTaXplLHI9bWVhc3VyZVRleHQoZSxpKTthLmJlZ2luUGF0aCgpLGEuc2V0U3Ryb2tlU3R5bGUobFtuXS5jb2xvciksYS5zZXRGaWxsU3R5bGUobFtuXS5jb2xvciksYS5zZXRGb250U2l6ZShpKSxsW25dLnJvdGF0ZT8wPGxbbl0uYXJlYXZbMF0mJih0LnRvb2x0aXA/dC50b29sdGlwLmluZGV4PT1uP2Euc3Ryb2tlVGV4dChlLChsW25dLmFyZWF2WzBdKzUtdC53aWR0aC8yKSpvLXIqKDEtbykvMiwobFtuXS5hcmVhdlsxXSs1K2ktdC5oZWlnaHQvMikqbyk6YS5maWxsVGV4dChlLChsW25dLmFyZWF2WzBdKzUtdC53aWR0aC8yKSpvLXIqKDEtbykvMiwobFtuXS5hcmVhdlsxXSs1K2ktdC5oZWlnaHQvMikqbyk6YS5maWxsVGV4dChlLChsW25dLmFyZWF2WzBdKzUtdC53aWR0aC8yKSpvLXIqKDEtbykvMiwobFtuXS5hcmVhdlsxXSs1K2ktdC5oZWlnaHQvMikqbykpOjA8bFtuXS5hcmVhWzBdJiYodC50b29sdGlwP3QudG9vbHRpcC5pbmRleD09bj9hLnN0cm9rZVRleHQoZSwobFtuXS5hcmVhWzBdKzUtdC53aWR0aC8yKSpvLXIqKDEtbykvMiwobFtuXS5hcmVhWzFdKzUraS10LmhlaWdodC8yKSpvKTphLmZpbGxUZXh0KGUsKGxbbl0uYXJlYVswXSs1LXQud2lkdGgvMikqby1yKigxLW8pLzIsKGxbbl0uYXJlYVsxXSs1K2ktdC5oZWlnaHQvMikqbyk6YS5maWxsVGV4dChlLChsW25dLmFyZWFbMF0rNS10LndpZHRoLzIpKm8tciooMS1vKS8yLChsW25dLmFyZWFbMV0rNStpLXQuaGVpZ2h0LzIpKm8pKSxhLnN0cm9rZSgpLGEucmVzdG9yZSgpfWEucmVzdG9yZSgpfWZ1bmN0aW9uIGRyYXdGdW5uZWxEYXRhUG9pbnRzKGUsdCxpLGEpe2xldCBvPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XToxLG49YXNzaWduKHt9LHthY3RpdmVXaWR0aDoxMCxhY3RpdmVPcGFjaXR5Oi4zLGJvcmRlcjohMSxib3JkZXJXaWR0aDoyLGJvcmRlckNvbG9yOlwiI0ZGRkZGRlwiLGZpbGxPcGFjaXR5OjEsbGFiZWxBbGlnbjpcInJpZ2h0XCJ9LHQuZXh0cmEuZnVubmVsKSxsPSh0LmhlaWdodC10LmFyZWFbMF0tdC5hcmVhWzJdKS9lLmxlbmd0aCxyPXt4OnQuYXJlYVszXSsodC53aWR0aC10LmFyZWFbMV0tdC5hcmVhWzNdKS8yLHk6dC5oZWlnaHQtdC5hcmVhWzJdfSxzPW4uYWN0aXZlV2lkdGgsZD1NYXRoLm1pbigodC53aWR0aC10LmFyZWFbMV0tdC5hcmVhWzNdKS8yLXMsKHQuaGVpZ2h0LXQuYXJlYVswXS10LmFyZWFbMl0pLzItcyk7ZT1nZXRGdW5uZWxEYXRhUG9pbnRzKGUsZCxvKSxhLnNhdmUoKSxhLnRyYW5zbGF0ZShyLngsci55KTtmb3IobGV0IG89MDtvPGUubGVuZ3RoO28rKykwPT1vPyh0LnRvb2x0aXAmJnQudG9vbHRpcC5pbmRleD09byYmKGEuYmVnaW5QYXRoKCksYS5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZVtvXS5jb2xvcixuLmFjdGl2ZU9wYWNpdHkpKSxhLm1vdmVUbygtcywwKSxhLmxpbmVUbygtZVtvXS5yYWRpdXMtcywtbCksYS5saW5lVG8oZVtvXS5yYWRpdXMrcywtbCksYS5saW5lVG8ocywwKSxhLmxpbmVUbygtcywwKSxhLmNsb3NlUGF0aCgpLGEuZmlsbCgpKSxlW29dLmZ1bm5lbEFyZWE9W3IueC1lW29dLnJhZGl1cyxyLnktbCxyLngrZVtvXS5yYWRpdXMsci55XSxhLmJlZ2luUGF0aCgpLGEuc2V0TGluZVdpZHRoKG4uYm9yZGVyV2lkdGgqdC5waXhlbFJhdGlvKSxhLnNldFN0cm9rZVN0eWxlKG4uYm9yZGVyQ29sb3IpLGEuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVbb10uY29sb3Isbi5maWxsT3BhY2l0eSkpLGEubW92ZVRvKDAsMCksYS5saW5lVG8oLWVbb10ucmFkaXVzLC1sKSxhLmxpbmVUbyhlW29dLnJhZGl1cywtbCksYS5saW5lVG8oMCwwKSxhLmNsb3NlUGF0aCgpLGEuZmlsbCgpLCEwPT1uLmJvcmRlciYmYS5zdHJva2UoKSk6KHQudG9vbHRpcCYmdC50b29sdGlwLmluZGV4PT1vJiYoYS5iZWdpblBhdGgoKSxhLnNldEZpbGxTdHlsZShoZXhUb1JnYihlW29dLmNvbG9yLG4uYWN0aXZlT3BhY2l0eSkpLGEubW92ZVRvKDAsMCksYS5saW5lVG8oLWVbby0xXS5yYWRpdXMtcywwKSxhLmxpbmVUbygtZVtvXS5yYWRpdXMtcywtbCksYS5saW5lVG8oZVtvXS5yYWRpdXMrcywtbCksYS5saW5lVG8oZVtvLTFdLnJhZGl1cytzLDApLGEubGluZVRvKDAsMCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKSksZVtvXS5mdW5uZWxBcmVhPVtyLngtZVtvXS5yYWRpdXMsci55LWwqKG8rMSksci54K2Vbb10ucmFkaXVzLHIueS1sKm9dLGEuYmVnaW5QYXRoKCksYS5zZXRMaW5lV2lkdGgobi5ib3JkZXJXaWR0aCp0LnBpeGVsUmF0aW8pLGEuc2V0U3Ryb2tlU3R5bGUobi5ib3JkZXJDb2xvciksYS5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZVtvXS5jb2xvcixuLmZpbGxPcGFjaXR5KSksYS5tb3ZlVG8oMCwwKSxhLmxpbmVUbygtZVtvLTFdLnJhZGl1cywwKSxhLmxpbmVUbygtZVtvXS5yYWRpdXMsLWwpLGEubGluZVRvKGVbb10ucmFkaXVzLC1sKSxhLmxpbmVUbyhlW28tMV0ucmFkaXVzLDApLGEubGluZVRvKDAsMCksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKSwhMD09bi5ib3JkZXImJmEuc3Ryb2tlKCkpLGEudHJhbnNsYXRlKDAsLWwpO3JldHVybiBhLnJlc3RvcmUoKSwhMSE9PXQuZGF0YUxhYmVsJiYxPT09byYmZHJhd0Z1bm5lbFRleHQoZSx0LGEsbCxuLmxhYmVsQWxpZ24scyxyKSx7Y2VudGVyOnIscmFkaXVzOmQsc2VyaWVzOmV9fWZ1bmN0aW9uIGRyYXdGdW5uZWxUZXh0KGUsdCxhLG8sbixsLHIpe3ZhciBzPU1hdGguUEk7Zm9yKGxldCBkPTA7ZDxlLmxlbmd0aDtkKyspe2xldCBpLGgseCxjLHA9ZVtkXSxnPXAuZm9ybWF0P3AuZm9ybWF0KCtwLl9wcm9wb3J0aW9uXy50b0ZpeGVkKDIpKTp1dGlsLnRvRml4ZWQoMTAwKnAuX3Byb3BvcnRpb25fKStcIiVcIjtcInJpZ2h0XCI9PW4/KGk9MD09ZD8ocC5mdW5uZWxBcmVhWzJdK3IueCkvMjoocC5mdW5uZWxBcmVhWzJdK2VbZC0xXS5mdW5uZWxBcmVhWzJdKS8yLGg9aSsyKmwseD1wLmZ1bm5lbEFyZWFbMV0rby8yLGM9cC50ZXh0U2l6ZXx8dC5mb250U2l6ZSxhLnNldExpbmVXaWR0aCgxKnQucGl4ZWxSYXRpbyksYS5zZXRTdHJva2VTdHlsZShwLmNvbG9yKSxhLnNldEZpbGxTdHlsZShwLmNvbG9yKSxhLmJlZ2luUGF0aCgpLGEubW92ZVRvKGkseCksYS5saW5lVG8oaCx4KSxhLnN0cm9rZSgpLGEuY2xvc2VQYXRoKCksYS5iZWdpblBhdGgoKSxhLm1vdmVUbyhoLHgpLGEuYXJjKGgseCwyLDAsMipzKSxhLmNsb3NlUGF0aCgpLGEuZmlsbCgpLGEuYmVnaW5QYXRoKCksYS5zZXRGb250U2l6ZShjKSxhLnNldEZpbGxTdHlsZShwLnRleHRDb2xvcnx8XCIjNjY2NjY2XCIpLGEuZmlsbFRleHQoZyxoKzUseCtjLzItMiksYS5jbG9zZVBhdGgoKSxhLnN0cm9rZSgpLGEuY2xvc2VQYXRoKCkpOihpPTA9PWQ/KHAuZnVubmVsQXJlYVswXStyLngpLzI6KHAuZnVubmVsQXJlYVswXStlW2QtMV0uZnVubmVsQXJlYVswXSkvMixoPWktMipsLHg9cC5mdW5uZWxBcmVhWzFdK28vMixjPXAudGV4dFNpemV8fHQuZm9udFNpemUsYS5zZXRMaW5lV2lkdGgoMSp0LnBpeGVsUmF0aW8pLGEuc2V0U3Ryb2tlU3R5bGUocC5jb2xvciksYS5zZXRGaWxsU3R5bGUocC5jb2xvciksYS5iZWdpblBhdGgoKSxhLm1vdmVUbyhpLHgpLGEubGluZVRvKGgseCksYS5zdHJva2UoKSxhLmNsb3NlUGF0aCgpLGEuYmVnaW5QYXRoKCksYS5tb3ZlVG8oaCx4KSxhLmFyYyhoLHgsMiwwLDIqcyksYS5jbG9zZVBhdGgoKSxhLmZpbGwoKSxhLmJlZ2luUGF0aCgpLGEuc2V0Rm9udFNpemUoYyksYS5zZXRGaWxsU3R5bGUocC50ZXh0Q29sb3J8fFwiIzY2NjY2NlwiKSxhLmZpbGxUZXh0KGcsaC01LW1lYXN1cmVUZXh0KGcpLHgrYy8yLTIpLGEuY2xvc2VQYXRoKCksYS5zdHJva2UoKSxhLmNsb3NlUGF0aCgpKX19ZnVuY3Rpb24gZHJhd0NhbnZhcyhlLHQpe3QuZHJhdygpfXZhciBUaW1pbmc9e2Vhc2VJbjpmdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5wb3coZSwzKX0sZWFzZU91dDpmdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5wb3coZS0xLDMpKzF9LGVhc2VJbk91dDpmdW5jdGlvbihlKXt2YXIgdD1NYXRoLnBvdztyZXR1cm4gMT4oZS89LjUpPy41KnQoZSwzKTouNSoodChlLTIsMykrMil9LGxpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX19O2Z1bmN0aW9uIEFuaW1hdGlvbihlKXt0aGlzLmlzU3RvcD0hMSxlLmR1cmF0aW9uPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmR1cmF0aW9uPzFlMzplLmR1cmF0aW9uLGUudGltaW5nPWUudGltaW5nfHxcImxpbmVhclwiO3ZhciB0PWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNldFRpbWVvdXQ/XCJ1bmRlZmluZWRcIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9mdW5jdGlvbihlKXtlKG51bGwpfTpyZXF1ZXN0QW5pbWF0aW9uRnJhbWU6ZnVuY3Rpb24oZSx0KXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIHQ9K25ldyBEYXRlO2UodCl9LHQpfX0oKSxpPW51bGwsYT1mdW5jdGlvbihvKXtpZihudWxsPT09b3x8ITA9PT10aGlzLmlzU3RvcClyZXR1cm4gZS5vblByb2Nlc3MmJmUub25Qcm9jZXNzKDEpLHZvaWQoZS5vbkFuaW1hdGlvbkZpbmlzaCYmZS5vbkFuaW1hdGlvbkZpbmlzaCgpKTtpZihudWxsPT09aSYmKGk9byksby1pPGUuZHVyYXRpb24pe3ZhciBuPShvLWkpL2UuZHVyYXRpb24sbD1UaW1pbmdbZS50aW1pbmddO249bChuKSxlLm9uUHJvY2VzcyYmZS5vblByb2Nlc3MobiksdChhLDE3KX1lbHNlIGUub25Qcm9jZXNzJiZlLm9uUHJvY2VzcygxKSxlLm9uQW5pbWF0aW9uRmluaXNoJiZlLm9uQW5pbWF0aW9uRmluaXNoKCl9O2E9YS5iaW5kKHRoaXMpLHQoYSwxNyl9QW5pbWF0aW9uLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5pc1N0b3A9ITB9O2Z1bmN0aW9uIGRyYXdDaGFydHMoZSx0LGEsaSl7dmFyIG89dGhpcyxuPXQuc2VyaWVzLGw9dC5jYXRlZ29yaWVzO249ZmlsbFNlcmllcyhuLHQsYSk7dmFyIHI9dC5hbmltYXRpb24/dC5kdXJhdGlvbjowO28uYW5pbWF0aW9uSW5zdGFuY2UmJm8uYW5pbWF0aW9uSW5zdGFuY2Uuc3RvcCgpO3ZhciBzPW51bGw7aWYoXCJjYW5kbGVcIj09ZSl7bGV0IGU9YXNzaWduKHt9LHQuZXh0cmEuY2FuZGxlLmF2ZXJhZ2UpO2Uuc2hvdz8ocz1jYWxDYW5kbGVNQShlLmRheSxlLm5hbWUsZS5jb2xvcixuWzBdLmRhdGEpLHM9ZmlsbFNlcmllcyhzLHQsYSksdC5zZXJpZXNNQT1zKTp0LnNlcmllc01BP3M9dC5zZXJpZXNNQT1maWxsU2VyaWVzKHQuc2VyaWVzTUEsdCxhKTpzPW59ZWxzZSBzPW47dC5fc2VyaWVzXz1uPWZpbHRlclNlcmllcyhuKSx0LmFyZWE9WywsLCxdO2ZvcihsZXQgbz0wOzQ+bztvKyspdC5hcmVhW29dPXQucGFkZGluZ1tvXTt2YXIgZD1jYWxMZWdlbmREYXRhKHMsdCxhLHQuY2hhcnREYXRhKSxoPWQuYXJlYS53aG9sZUhlaWdodCx4PWQuYXJlYS53aG9sZVdpZHRoO3N3aXRjaCh0LmxlZ2VuZC5wb3NpdGlvbil7Y2FzZVwidG9wXCI6dC5hcmVhWzBdKz1oO2JyZWFrO2Nhc2VcImJvdHRvbVwiOnQuYXJlYVsyXSs9aDticmVhaztjYXNlXCJsZWZ0XCI6dC5hcmVhWzNdKz14O2JyZWFrO2Nhc2VcInJpZ2h0XCI6dC5hcmVhWzFdKz14O31sZXQgYz17fSxwPTA7aWYoXCJsaW5lXCI9PT10LnR5cGV8fFwiY29sdW1uXCI9PT10LnR5cGV8fFwiYXJlYVwiPT09dC50eXBlfHxcIm1peFwiPT09dC50eXBlfHxcImNhbmRsZVwiPT09dC50eXBlKXtpZihjPWNhbFlBeGlzRGF0YShuLHQsYSkscD1jLnlBeGlzV2lkdGgsdC55QXhpcy5zaG93VGl0bGUpe2xldCBlPTA7Zm9yKGxldCBvPTA7bzx0LnlBeGlzLmRhdGEubGVuZ3RoO28rKyllPU1hdGgubWF4KGUsdC55QXhpcy5kYXRhW29dLnRpdGxlRm9udFNpemU/dC55QXhpcy5kYXRhW29dLnRpdGxlRm9udFNpemU6YS5mb250U2l6ZSk7dC5hcmVhWzBdKz0oZSs2KSp0LnBpeGVsUmF0aW99bGV0IGU9MCxvPTA7Zm9yKGxldCBhPTA7YTxwLmxlbmd0aDthKyspXCJsZWZ0XCI9PXBbYV0ucG9zaXRpb24/KHQuYXJlYVszXSs9MDxvP3BbYV0ud2lkdGgrdC55QXhpcy5wYWRkaW5nOnBbYV0ud2lkdGgsbys9MSk6KHQuYXJlYVsxXSs9MDxlP3BbYV0ud2lkdGgrdC55QXhpcy5wYWRkaW5nOnBbYV0ud2lkdGgsZSs9MSl9ZWxzZSBhLnlBeGlzV2lkdGg9cDtpZih0LmNoYXJ0RGF0YS55QXhpc0RhdGE9Yyx0LmNhdGVnb3JpZXMmJnQuY2F0ZWdvcmllcy5sZW5ndGgpe3QuY2hhcnREYXRhLnhBeGlzRGF0YT1nZXRYQXhpc1BvaW50cyh0LmNhdGVnb3JpZXMsdCxhKTtsZXQgZT1jYWxDYXRlZ29yaWVzRGF0YSh0LmNhdGVnb3JpZXMsdCxhLHQuY2hhcnREYXRhLnhBeGlzRGF0YS5lYWNoU3BhY2luZyksaT1lLnhBeGlzSGVpZ2h0LG89ZS5hbmdsZTthLnhBeGlzSGVpZ2h0PWksYS5feEF4aXNUZXh0QW5nbGVfPW8sdC5hcmVhWzJdKz1pLHQuY2hhcnREYXRhLmNhdGVnb3JpZXNEYXRhPWV9ZWxzZSBpZihcImxpbmVcIj09PXQudHlwZXx8XCJhcmVhXCI9PT10LnR5cGV8fFwicG9pbnRzXCI9PT10LnR5cGUpe3QuY2hhcnREYXRhLnhBeGlzRGF0YT1jYWxYQXhpc0RhdGEobix0LGEpLGw9dC5jaGFydERhdGEueEF4aXNEYXRhLnJhbmdlc0Zvcm1hdDtsZXQgZT1jYWxDYXRlZ29yaWVzRGF0YShsLHQsYSx0LmNoYXJ0RGF0YS54QXhpc0RhdGEuZWFjaFNwYWNpbmcpLGk9ZS54QXhpc0hlaWdodCxvPWUuYW5nbGU7YS54QXhpc0hlaWdodD1pLGEuX3hBeGlzVGV4dEFuZ2xlXz1vLHQuYXJlYVsyXSs9aSx0LmNoYXJ0RGF0YS5jYXRlZ29yaWVzRGF0YT1lfWVsc2UgdC5jaGFydERhdGEueEF4aXNEYXRhPXt4QXhpc1BvaW50czpbXX07aWYodC5lbmFibGVTY3JvbGwmJlwicmlnaHRcIj09dC54QXhpcy5zY3JvbGxBbGlnbiYmdm9pZCAwPT09dC5fc2Nyb2xsRGlzdGFuY2VfKXtsZXQgZT0wLGk9dC5jaGFydERhdGEueEF4aXNEYXRhLnhBeGlzUG9pbnRzLGE9dC5jaGFydERhdGEueEF4aXNEYXRhLnN0YXJ0WCxuPXQuY2hhcnREYXRhLnhBeGlzRGF0YS5lbmRYLGw9dC5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nLHI9bCooaS5sZW5ndGgtMSk7ZT1uLWEtcixvLnNjcm9sbE9wdGlvbj17Y3VycmVudE9mZnNldDplLHN0YXJ0VG91Y2hYOmUsZGlzdGFuY2U6MCxsYXN0TW92ZVRpbWU6MH0sdC5fc2Nyb2xsRGlzdGFuY2VfPWV9c3dpdGNoKChcInBpZVwiPT09ZXx8XCJyaW5nXCI9PT1lfHxcInJvc2VcIj09PWUpJiYoYS5fcGllVGV4dE1heExlbmd0aF89ITE9PT10LmRhdGFMYWJlbD8wOmdldFBpZVRleHRNYXhMZW5ndGgocykpLGUpe2Nhc2VcIndvcmRcIjpsZXQgZD1hc3NpZ24oe30se3R5cGU6XCJub3JtYWxcIixhdXRvQ29sb3JzOiEwfSx0LmV4dHJhLndvcmQpOyghMD09dC51cGRhdGVEYXRhfHxudWxsPT10LnVwZGF0ZURhdGEpJiYodC5jaGFydERhdGEud29yZENsb3VkRGF0YT1nZXRXb3JkQ2xvdWRQb2ludCh0LGQudHlwZSkpLHRoaXMuYW5pbWF0aW9uSW5zdGFuY2U9bmV3IEFuaW1hdGlvbih7dGltaW5nOlwiZWFzZUluT3V0XCIsZHVyYXRpb246cixvblByb2Nlc3M6ZnVuY3Rpb24oZSl7aS5jbGVhclJlY3QoMCwwLHQud2lkdGgsdC5oZWlnaHQpLHQucm90YXRlJiZjb250ZXh0Um90YXRlKGksdCksZHJhd1dvcmRDbG91ZERhdGFQb2ludHMobix0LGEsaSxlKSxkcmF3Q2FudmFzKHQsaSl9LG9uQW5pbWF0aW9uRmluaXNoOmZ1bmN0aW9uKCl7by5ldmVudC50cmlnZ2VyKFwicmVuZGVyQ29tcGxldGVcIil9fSk7YnJlYWs7Y2FzZVwibWFwXCI6aS5jbGVhclJlY3QoMCwwLHQud2lkdGgsdC5oZWlnaHQpLGRyYXdNYXBEYXRhUG9pbnRzKG4sdCxhLGkpO2JyZWFrO2Nhc2VcImZ1bm5lbFwiOnRoaXMuYW5pbWF0aW9uSW5zdGFuY2U9bmV3IEFuaW1hdGlvbih7dGltaW5nOlwiZWFzZUluT3V0XCIsZHVyYXRpb246cixvblByb2Nlc3M6ZnVuY3Rpb24oZSl7aS5jbGVhclJlY3QoMCwwLHQud2lkdGgsdC5oZWlnaHQpLHQucm90YXRlJiZjb250ZXh0Um90YXRlKGksdCksdC5jaGFydERhdGEuZnVubmVsRGF0YT1kcmF3RnVubmVsRGF0YVBvaW50cyhuLHQsYSxpLGUpLGRyYXdMZWdlbmQodC5zZXJpZXMsdCxhLGksdC5jaGFydERhdGEpLGRyYXdUb29sVGlwQnJpZGdlKHQsYSxpLGUpLGRyYXdDYW52YXModCxpKX0sb25BbmltYXRpb25GaW5pc2g6ZnVuY3Rpb24oKXtvLmV2ZW50LnRyaWdnZXIoXCJyZW5kZXJDb21wbGV0ZVwiKX19KTticmVhaztjYXNlXCJsaW5lXCI6dGhpcy5hbmltYXRpb25JbnN0YW5jZT1uZXcgQW5pbWF0aW9uKHt0aW1pbmc6XCJlYXNlSW5cIixkdXJhdGlvbjpyLG9uUHJvY2VzczpmdW5jdGlvbihlKXtpLmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksdC5yb3RhdGUmJmNvbnRleHRSb3RhdGUoaSx0KSxkcmF3WUF4aXNHcmlkKGwsdCxhLGkpLGRyYXdYQXhpcyhsLHQsYSxpKTt2YXIgbz1kcmF3TGluZURhdGFQb2ludHMobix0LGEsaSxlKSxyPW8ueEF4aXNQb2ludHMscz1vLmNhbFBvaW50cyxkPW8uZWFjaFNwYWNpbmc7dC5jaGFydERhdGEueEF4aXNQb2ludHM9cix0LmNoYXJ0RGF0YS5jYWxQb2ludHM9cyx0LmNoYXJ0RGF0YS5lYWNoU3BhY2luZz1kLGRyYXdZQXhpcyhuLHQsYSxpKSwhMSE9PXQuZW5hYmxlTWFya0xpbmUmJjE9PT1lJiZkcmF3TWFya0xpbmUodCxhLGkpLGRyYXdMZWdlbmQodC5zZXJpZXMsdCxhLGksdC5jaGFydERhdGEpLGRyYXdUb29sVGlwQnJpZGdlKHQsYSxpLGUsZCxyKSxkcmF3Q2FudmFzKHQsaSl9LG9uQW5pbWF0aW9uRmluaXNoOmZ1bmN0aW9uKCl7by5ldmVudC50cmlnZ2VyKFwicmVuZGVyQ29tcGxldGVcIil9fSk7YnJlYWs7Y2FzZVwibWl4XCI6dGhpcy5hbmltYXRpb25JbnN0YW5jZT1uZXcgQW5pbWF0aW9uKHt0aW1pbmc6XCJlYXNlSW5cIixkdXJhdGlvbjpyLG9uUHJvY2VzczpmdW5jdGlvbihlKXtpLmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksdC5yb3RhdGUmJmNvbnRleHRSb3RhdGUoaSx0KSxkcmF3WUF4aXNHcmlkKGwsdCxhLGkpLGRyYXdYQXhpcyhsLHQsYSxpKTt2YXIgbz1kcmF3TWl4RGF0YVBvaW50cyhuLHQsYSxpLGUpLHI9by54QXhpc1BvaW50cyxzPW8uY2FsUG9pbnRzLGQ9by5lYWNoU3BhY2luZzt0LmNoYXJ0RGF0YS54QXhpc1BvaW50cz1yLHQuY2hhcnREYXRhLmNhbFBvaW50cz1zLHQuY2hhcnREYXRhLmVhY2hTcGFjaW5nPWQsZHJhd1lBeGlzKG4sdCxhLGkpLCExIT09dC5lbmFibGVNYXJrTGluZSYmMT09PWUmJmRyYXdNYXJrTGluZSh0LGEsaSksZHJhd0xlZ2VuZCh0LnNlcmllcyx0LGEsaSx0LmNoYXJ0RGF0YSksZHJhd1Rvb2xUaXBCcmlkZ2UodCxhLGksZSxkLHIpLGRyYXdDYW52YXModCxpKX0sb25BbmltYXRpb25GaW5pc2g6ZnVuY3Rpb24oKXtvLmV2ZW50LnRyaWdnZXIoXCJyZW5kZXJDb21wbGV0ZVwiKX19KTticmVhaztjYXNlXCJjb2x1bW5cIjp0aGlzLmFuaW1hdGlvbkluc3RhbmNlPW5ldyBBbmltYXRpb24oe3RpbWluZzpcImVhc2VJblwiLGR1cmF0aW9uOnIsb25Qcm9jZXNzOmZ1bmN0aW9uKGUpe2kuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSx0LnJvdGF0ZSYmY29udGV4dFJvdGF0ZShpLHQpLGRyYXdZQXhpc0dyaWQobCx0LGEsaSksZHJhd1hBeGlzKGwsdCxhLGkpO3ZhciBvPWRyYXdDb2x1bW5EYXRhUG9pbnRzKG4sdCxhLGksZSkscj1vLnhBeGlzUG9pbnRzLHM9by5jYWxQb2ludHMsZD1vLmVhY2hTcGFjaW5nO3QuY2hhcnREYXRhLnhBeGlzUG9pbnRzPXIsdC5jaGFydERhdGEuY2FsUG9pbnRzPXMsdC5jaGFydERhdGEuZWFjaFNwYWNpbmc9ZCxkcmF3WUF4aXMobix0LGEsaSksITEhPT10LmVuYWJsZU1hcmtMaW5lJiYxPT09ZSYmZHJhd01hcmtMaW5lKHQsYSxpKSxkcmF3TGVnZW5kKHQuc2VyaWVzLHQsYSxpLHQuY2hhcnREYXRhKSxkcmF3VG9vbFRpcEJyaWRnZSh0LGEsaSxlLGQsciksZHJhd0NhbnZhcyh0LGkpfSxvbkFuaW1hdGlvbkZpbmlzaDpmdW5jdGlvbigpe28uZXZlbnQudHJpZ2dlcihcInJlbmRlckNvbXBsZXRlXCIpfX0pO2JyZWFrO2Nhc2VcImFyZWFcIjp0aGlzLmFuaW1hdGlvbkluc3RhbmNlPW5ldyBBbmltYXRpb24oe3RpbWluZzpcImVhc2VJblwiLGR1cmF0aW9uOnIsb25Qcm9jZXNzOmZ1bmN0aW9uKGUpe2kuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSx0LnJvdGF0ZSYmY29udGV4dFJvdGF0ZShpLHQpLGRyYXdZQXhpc0dyaWQobCx0LGEsaSksZHJhd1hBeGlzKGwsdCxhLGkpO3ZhciBvPWRyYXdBcmVhRGF0YVBvaW50cyhuLHQsYSxpLGUpLHI9by54QXhpc1BvaW50cyxzPW8uY2FsUG9pbnRzLGQ9by5lYWNoU3BhY2luZzt0LmNoYXJ0RGF0YS54QXhpc1BvaW50cz1yLHQuY2hhcnREYXRhLmNhbFBvaW50cz1zLHQuY2hhcnREYXRhLmVhY2hTcGFjaW5nPWQsZHJhd1lBeGlzKG4sdCxhLGkpLCExIT09dC5lbmFibGVNYXJrTGluZSYmMT09PWUmJmRyYXdNYXJrTGluZSh0LGEsaSksZHJhd0xlZ2VuZCh0LnNlcmllcyx0LGEsaSx0LmNoYXJ0RGF0YSksZHJhd1Rvb2xUaXBCcmlkZ2UodCxhLGksZSxkLHIpLGRyYXdDYW52YXModCxpKX0sb25BbmltYXRpb25GaW5pc2g6ZnVuY3Rpb24oKXtvLmV2ZW50LnRyaWdnZXIoXCJyZW5kZXJDb21wbGV0ZVwiKX19KTticmVhaztjYXNlXCJyaW5nXCI6Y2FzZVwicGllXCI6dGhpcy5hbmltYXRpb25JbnN0YW5jZT1uZXcgQW5pbWF0aW9uKHt0aW1pbmc6XCJlYXNlSW5PdXRcIixkdXJhdGlvbjpyLG9uUHJvY2VzczpmdW5jdGlvbihlKXtpLmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksdC5yb3RhdGUmJmNvbnRleHRSb3RhdGUoaSx0KSx0LmNoYXJ0RGF0YS5waWVEYXRhPWRyYXdQaWVEYXRhUG9pbnRzKG4sdCxhLGksZSksZHJhd0xlZ2VuZCh0LnNlcmllcyx0LGEsaSx0LmNoYXJ0RGF0YSksZHJhd1Rvb2xUaXBCcmlkZ2UodCxhLGksZSksZHJhd0NhbnZhcyh0LGkpfSxvbkFuaW1hdGlvbkZpbmlzaDpmdW5jdGlvbigpe28uZXZlbnQudHJpZ2dlcihcInJlbmRlckNvbXBsZXRlXCIpfX0pO2JyZWFrO2Nhc2VcInJvc2VcIjp0aGlzLmFuaW1hdGlvbkluc3RhbmNlPW5ldyBBbmltYXRpb24oe3RpbWluZzpcImVhc2VJbk91dFwiLGR1cmF0aW9uOnIsb25Qcm9jZXNzOmZ1bmN0aW9uKGUpe2kuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSx0LnJvdGF0ZSYmY29udGV4dFJvdGF0ZShpLHQpLHQuY2hhcnREYXRhLnBpZURhdGE9ZHJhd1Jvc2VEYXRhUG9pbnRzKG4sdCxhLGksZSksZHJhd0xlZ2VuZCh0LnNlcmllcyx0LGEsaSx0LmNoYXJ0RGF0YSksZHJhd1Rvb2xUaXBCcmlkZ2UodCxhLGksZSksZHJhd0NhbnZhcyh0LGkpfSxvbkFuaW1hdGlvbkZpbmlzaDpmdW5jdGlvbigpe28uZXZlbnQudHJpZ2dlcihcInJlbmRlckNvbXBsZXRlXCIpfX0pO2JyZWFrO2Nhc2VcInJhZGFyXCI6dGhpcy5hbmltYXRpb25JbnN0YW5jZT1uZXcgQW5pbWF0aW9uKHt0aW1pbmc6XCJlYXNlSW5PdXRcIixkdXJhdGlvbjpyLG9uUHJvY2VzczpmdW5jdGlvbihlKXtpLmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksdC5yb3RhdGUmJmNvbnRleHRSb3RhdGUoaSx0KSx0LmNoYXJ0RGF0YS5yYWRhckRhdGE9ZHJhd1JhZGFyRGF0YVBvaW50cyhuLHQsYSxpLGUpLGRyYXdMZWdlbmQodC5zZXJpZXMsdCxhLGksdC5jaGFydERhdGEpLGRyYXdUb29sVGlwQnJpZGdlKHQsYSxpLGUpLGRyYXdDYW52YXModCxpKX0sb25BbmltYXRpb25GaW5pc2g6ZnVuY3Rpb24oKXtvLmV2ZW50LnRyaWdnZXIoXCJyZW5kZXJDb21wbGV0ZVwiKX19KTticmVhaztjYXNlXCJhcmNiYXJcIjp0aGlzLmFuaW1hdGlvbkluc3RhbmNlPW5ldyBBbmltYXRpb24oe3RpbWluZzpcImVhc2VJbk91dFwiLGR1cmF0aW9uOnIsb25Qcm9jZXNzOmZ1bmN0aW9uKGUpe2kuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSx0LnJvdGF0ZSYmY29udGV4dFJvdGF0ZShpLHQpLHQuY2hhcnREYXRhLmFyY2JhckRhdGE9ZHJhd0FyY2JhckRhdGFQb2ludHMobix0LGEsaSxlKSxkcmF3Q2FudmFzKHQsaSl9LG9uQW5pbWF0aW9uRmluaXNoOmZ1bmN0aW9uKCl7by5ldmVudC50cmlnZ2VyKFwicmVuZGVyQ29tcGxldGVcIil9fSk7YnJlYWs7Y2FzZVwiZ2F1Z2VcIjp0aGlzLmFuaW1hdGlvbkluc3RhbmNlPW5ldyBBbmltYXRpb24oe3RpbWluZzpcImVhc2VJbk91dFwiLGR1cmF0aW9uOnIsb25Qcm9jZXNzOmZ1bmN0aW9uKGUpe2kuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSx0LnJvdGF0ZSYmY29udGV4dFJvdGF0ZShpLHQpLHQuY2hhcnREYXRhLmdhdWdlRGF0YT1kcmF3R2F1Z2VEYXRhUG9pbnRzKGwsbix0LGEsaSxlKSxkcmF3Q2FudmFzKHQsaSl9LG9uQW5pbWF0aW9uRmluaXNoOmZ1bmN0aW9uKCl7by5ldmVudC50cmlnZ2VyKFwicmVuZGVyQ29tcGxldGVcIil9fSk7YnJlYWs7Y2FzZVwiY2FuZGxlXCI6dGhpcy5hbmltYXRpb25JbnN0YW5jZT1uZXcgQW5pbWF0aW9uKHt0aW1pbmc6XCJlYXNlSW5cIixkdXJhdGlvbjpyLG9uUHJvY2VzczpmdW5jdGlvbihlKXtpLmNsZWFyUmVjdCgwLDAsdC53aWR0aCx0LmhlaWdodCksdC5yb3RhdGUmJmNvbnRleHRSb3RhdGUoaSx0KSxkcmF3WUF4aXNHcmlkKGwsdCxhLGkpLGRyYXdYQXhpcyhsLHQsYSxpKTt2YXIgbz1kcmF3Q2FuZGxlRGF0YVBvaW50cyhuLHMsdCxhLGksZSkscj1vLnhBeGlzUG9pbnRzLGQ9by5jYWxQb2ludHMsaD1vLmVhY2hTcGFjaW5nO3QuY2hhcnREYXRhLnhBeGlzUG9pbnRzPXIsdC5jaGFydERhdGEuY2FsUG9pbnRzPWQsdC5jaGFydERhdGEuZWFjaFNwYWNpbmc9aCxkcmF3WUF4aXMobix0LGEsaSksITEhPT10LmVuYWJsZU1hcmtMaW5lJiYxPT09ZSYmZHJhd01hcmtMaW5lKHQsYSxpKSxzP2RyYXdMZWdlbmQocyx0LGEsaSx0LmNoYXJ0RGF0YSk6ZHJhd0xlZ2VuZCh0LnNlcmllcyx0LGEsaSx0LmNoYXJ0RGF0YSksZHJhd1Rvb2xUaXBCcmlkZ2UodCxhLGksZSxoLHIpLGRyYXdDYW52YXModCxpKX0sb25BbmltYXRpb25GaW5pc2g6ZnVuY3Rpb24oKXtvLmV2ZW50LnRyaWdnZXIoXCJyZW5kZXJDb21wbGV0ZVwiKX19KTt9fWZ1bmN0aW9uIEV2ZW50KCl7dGhpcy5ldmVudHM9e319RXZlbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt0aGlzLmV2ZW50c1tlXT10aGlzLmV2ZW50c1tlXXx8W10sdGhpcy5ldmVudHNbZV0ucHVzaCh0KX0sRXZlbnQucHJvdG90eXBlLnRyaWdnZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLGk9MDtpPGU7aSsrKXRbaV09YXJndW1lbnRzW2ldO3ZhciBhPXRbMF0sbz10LnNsaWNlKDEpOyF0aGlzLmV2ZW50c1thXXx8dGhpcy5ldmVudHNbYV0uZm9yRWFjaChmdW5jdGlvbihlKXt0cnl7ZS5hcHBseShudWxsLG8pfWNhdGNoKHQpe2NvbnNvbGUuZXJyb3IodCl9fSl9O3ZhciBDaGFydHM9ZnVuY3Rpb24oZSl7ZS5waXhlbFJhdGlvPWUucGl4ZWxSYXRpbz9lLnBpeGVsUmF0aW86MSxlLmZvbnRTaXplPWUuZm9udFNpemU/ZS5mb250U2l6ZSplLnBpeGVsUmF0aW86MTMqZS5waXhlbFJhdGlvLGUudGl0bGU9YXNzaWduKHt9LGUudGl0bGUpLGUuc3VidGl0bGU9YXNzaWduKHt9LGUuc3VidGl0bGUpLGUuZHVyYXRpb249ZS5kdXJhdGlvbj9lLmR1cmF0aW9uOjFlMyxlLnlBeGlzPWFzc2lnbih7fSx7ZGF0YTpbXSxzaG93VGl0bGU6ITEsZGlzYWJsZWQ6ITEsZGlzYWJsZUdyaWQ6ITEsc3BsaXROdW1iZXI6NSxncmlkVHlwZTpcInNvbGlkXCIsZGFzaExlbmd0aDo0KmUucGl4ZWxSYXRpbyxncmlkQ29sb3I6XCIjY2NjY2NjXCIscGFkZGluZzoxMCxmb250Q29sb3I6XCIjNjY2NjY2XCJ9LGUueUF4aXMpLGUueUF4aXMuZGFzaExlbmd0aCo9ZS5waXhlbFJhdGlvLGUueUF4aXMucGFkZGluZyo9ZS5waXhlbFJhdGlvLGUueEF4aXM9YXNzaWduKHt9LHtyb3RhdGVMYWJlbDohMSx0eXBlOlwiY2FsaWJyYXRpb25cIixncmlkVHlwZTpcInNvbGlkXCIsZGFzaExlbmd0aDo0LHNjcm9sbEFsaWduOlwibGVmdFwiLGJvdW5kYXJ5R2FwOlwiY2VudGVyXCIsYXhpc0xpbmU6ITAsYXhpc0xpbmVDb2xvcjpcIiNjY2NjY2NcIn0sZS54QXhpcyksZS54QXhpcy5kYXNoTGVuZ3RoKj1lLnBpeGVsUmF0aW8sZS5sZWdlbmQ9YXNzaWduKHt9LHtzaG93OiEwLHBvc2l0aW9uOlwiYm90dG9tXCIsZmxvYXQ6XCJjZW50ZXJcIixiYWNrZ3JvdW5kQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyQ29sb3I6XCJyZ2JhKDAsMCwwLDApXCIsYm9yZGVyV2lkdGg6MCxwYWRkaW5nOjUsbWFyZ2luOjUsaXRlbUdhcDoxMCxmb250U2l6ZTplLmZvbnRTaXplLGxpbmVIZWlnaHQ6ZS5mb250U2l6ZSxmb250Q29sb3I6XCIjMzMzMzMzXCIsZm9ybWF0Ont9LGhpZGRlbkNvbG9yOlwiI0NFQ0VDRVwifSxlLmxlZ2VuZCksZS5sZWdlbmQuYm9yZGVyV2lkdGgqPWUucGl4ZWxSYXRpbyxlLmxlZ2VuZC5pdGVtR2FwKj1lLnBpeGVsUmF0aW8sZS5sZWdlbmQucGFkZGluZyo9ZS5waXhlbFJhdGlvLGUubGVnZW5kLm1hcmdpbio9ZS5waXhlbFJhdGlvLGUuZXh0cmE9YXNzaWduKHt9LGUuZXh0cmEpLGUucm90YXRlPSEhZS5yb3RhdGUsZS5hbmltYXRpb249ISFlLmFuaW1hdGlvbixlLnJvdGF0ZT0hIWUucm90YXRlO2xldCB0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7aWYodC5jb2xvcnM9ZS5jb2xvcnM/ZS5jb2xvcnM6dC5jb2xvcnMsdC55QXhpc1RpdGxlV2lkdGg9ITAhPT1lLnlBeGlzLmRpc2FibGVkJiZlLnlBeGlzLnRpdGxlP3QueUF4aXNUaXRsZVdpZHRoOjAsKFwicGllXCI9PWUudHlwZXx8XCJyaW5nXCI9PWUudHlwZSkmJih0LnBpZUNoYXJ0TGluZVBhZGRpbmc9ITE9PT1lLmRhdGFMYWJlbD8wOmUuZXh0cmEucGllLmxhYmVsV2lkdGgqZS5waXhlbFJhdGlvfHx0LnBpZUNoYXJ0TGluZVBhZGRpbmcqZS5waXhlbFJhdGlvKSxcInJvc2VcIj09ZS50eXBlJiYodC5waWVDaGFydExpbmVQYWRkaW5nPSExPT09ZS5kYXRhTGFiZWw/MDplLmV4dHJhLnJvc2UubGFiZWxXaWR0aCplLnBpeGVsUmF0aW98fHQucGllQ2hhcnRMaW5lUGFkZGluZyplLnBpeGVsUmF0aW8pLHQucGllQ2hhcnRUZXh0UGFkZGluZz0hMT09PWUuZGF0YUxhYmVsPzA6dC5waWVDaGFydFRleHRQYWRkaW5nKmUucGl4ZWxSYXRpbyx0LnlBeGlzU3BsaXQ9ZS55QXhpcy5zcGxpdE51bWJlcj9lLnlBeGlzLnNwbGl0TnVtYmVyOmNvbmZpZy55QXhpc1NwbGl0LHQucm90YXRlPWUucm90YXRlLGUucm90YXRlKXtsZXQgdD1lLndpZHRoLGk9ZS5oZWlnaHQ7ZS53aWR0aD1pLGUuaGVpZ2h0PXR9ZS5wYWRkaW5nPWUucGFkZGluZz9lLnBhZGRpbmc6dC5wYWRkaW5nO2ZvcihsZXQgdD0wOzQ+dDt0KyspZS5wYWRkaW5nW3RdKj1lLnBpeGVsUmF0aW87dC55QXhpc1dpZHRoPWNvbmZpZy55QXhpc1dpZHRoKmUucGl4ZWxSYXRpbyx0LnhBeGlzSGVpZ2h0PWNvbmZpZy54QXhpc0hlaWdodCplLnBpeGVsUmF0aW8sZS5lbmFibGVTY3JvbGwmJmUueEF4aXMuc2Nyb2xsU2hvdyYmKHQueEF4aXNIZWlnaHQrPTYqZS5waXhlbFJhdGlvKSx0LnhBeGlzTGluZUhlaWdodD1jb25maWcueEF4aXNMaW5lSGVpZ2h0KmUucGl4ZWxSYXRpbyx0LmZvbnRTaXplPWUuZm9udFNpemUsdC50aXRsZUZvbnRTaXplPWNvbmZpZy50aXRsZUZvbnRTaXplKmUucGl4ZWxSYXRpbyx0LnN1YnRpdGxlRm9udFNpemU9Y29uZmlnLnN1YnRpdGxlRm9udFNpemUqZS5waXhlbFJhdGlvLHQudG9vbFRpcFBhZGRpbmc9Y29uZmlnLnRvb2xUaXBQYWRkaW5nKmUucGl4ZWxSYXRpbyx0LnRvb2xUaXBMaW5lSGVpZ2h0PWNvbmZpZy50b29sVGlwTGluZUhlaWdodCplLnBpeGVsUmF0aW8sdC5jb2x1bWVQYWRkaW5nPWNvbmZpZy5jb2x1bWVQYWRkaW5nKmUucGl4ZWxSYXRpbyxlLiR0aGlzPWUuJHRoaXM/ZS4kdGhpczp0aGlzLHRoaXMuY29udGV4dD11bmkuY3JlYXRlQ2FudmFzQ29udGV4dChlLmNhbnZhc0lkLGUuJHRoaXMpLGUuY2hhcnREYXRhPXt9LHRoaXMuZXZlbnQ9bmV3IEV2ZW50LHRoaXMuc2Nyb2xsT3B0aW9uPXtjdXJyZW50T2Zmc2V0OjAsc3RhcnRUb3VjaFg6MCxkaXN0YW5jZTowLGxhc3RNb3ZlVGltZTowfSx0aGlzLm9wdHM9ZSx0aGlzLmNvbmZpZz10LGRyYXdDaGFydHMuY2FsbCh0aGlzLGUudHlwZSxlLHQsdGhpcy5jb250ZXh0KX07Q2hhcnRzLnByb3RvdHlwZS51cGRhdGVEYXRhPWZ1bmN0aW9uKCl7bGV0IGU9MDxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMF0hPT12b2lkIDA/YXJndW1lbnRzWzBdOnt9O3RoaXMub3B0cz1hc3NpZ24oe30sdGhpcy5vcHRzLGUpLHRoaXMub3B0cy51cGRhdGVEYXRhPSEwO2xldCB0PWUuc2Nyb2xsUG9zaXRpb258fFwiY3VycmVudFwiO3N3aXRjaCh0KXtjYXNlXCJjdXJyZW50XCI6dGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV89dGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDticmVhaztjYXNlXCJsZWZ0XCI6dGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV89MCx0aGlzLnNjcm9sbE9wdGlvbj17Y3VycmVudE9mZnNldDowLHN0YXJ0VG91Y2hYOjAsZGlzdGFuY2U6MCxsYXN0TW92ZVRpbWU6MH07YnJlYWs7Y2FzZVwicmlnaHRcIjpsZXQgZT1jYWxZQXhpc0RhdGEodGhpcy5vcHRzLnNlcmllcyx0aGlzLm9wdHMsdGhpcy5jb25maWcpLGk9ZS55QXhpc1dpZHRoO3RoaXMuY29uZmlnLnlBeGlzV2lkdGg9aTtsZXQgYT0wLG89Z2V0WEF4aXNQb2ludHModGhpcy5vcHRzLmNhdGVnb3JpZXMsdGhpcy5vcHRzLHRoaXMuY29uZmlnKSxuPW8ueEF4aXNQb2ludHMsbD1vLnN0YXJ0WCxyPW8uZW5kWCxzPW8uZWFjaFNwYWNpbmcsZD1zKihuLmxlbmd0aC0xKTthPXItbC1kLHRoaXMuc2Nyb2xsT3B0aW9uPXtjdXJyZW50T2Zmc2V0OmEsc3RhcnRUb3VjaFg6YSxkaXN0YW5jZTowLGxhc3RNb3ZlVGltZTowfSx0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXz1hO31kcmF3Q2hhcnRzLmNhbGwodGhpcyx0aGlzLm9wdHMudHlwZSx0aGlzLm9wdHMsdGhpcy5jb25maWcsdGhpcy5jb250ZXh0KX0sQ2hhcnRzLnByb3RvdHlwZS56b29tPWZ1bmN0aW9uKCl7dmFyIGU9TWF0aC5yb3VuZCx0PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50O2lmKCEwIT09dGhpcy5vcHRzLmVuYWJsZVNjcm9sbClyZXR1cm4gdm9pZCBjb25zb2xlLmxvZyhcIlxcdThCRjdcXHU1NDJGXFx1NzUyOFxcdTZFREFcXHU1MkE4XFx1Njc2MVxcdTU0MEVcXHU0RjdGXFx1NzUyOFxcdUZGMDFcIik7bGV0IGk9ZShNYXRoLmFicyh0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0KS90aGlzLm9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nKStlKHRoaXMub3B0cy54QXhpcy5pdGVtQ291bnQvMik7dGhpcy5vcHRzLmFuaW1hdGlvbj0hMSx0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50PXQuaXRlbUNvdW50O2xldCBhPWNhbFlBeGlzRGF0YSh0aGlzLm9wdHMuc2VyaWVzLHRoaXMub3B0cyx0aGlzLmNvbmZpZyksbz1hLnlBeGlzV2lkdGg7dGhpcy5jb25maWcueUF4aXNXaWR0aD1vO2xldCBuPTAsbD1nZXRYQXhpc1BvaW50cyh0aGlzLm9wdHMuY2F0ZWdvcmllcyx0aGlzLm9wdHMsdGhpcy5jb25maWcpLHI9bC54QXhpc1BvaW50cyxzPWwuc3RhcnRYLGQ9bC5lbmRYLGg9bC5lYWNoU3BhY2luZyx4PWQtcyxjPXgtaCooci5sZW5ndGgtMSk7bj14LzItaCppLDA8biYmKG49MCksbjxjJiYobj1jKSx0aGlzLnNjcm9sbE9wdGlvbj17Y3VycmVudE9mZnNldDpuLHN0YXJ0VG91Y2hYOm4sZGlzdGFuY2U6MCxsYXN0TW92ZVRpbWU6MH0sdGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV89bixkcmF3Q2hhcnRzLmNhbGwodGhpcyx0aGlzLm9wdHMudHlwZSx0aGlzLm9wdHMsdGhpcy5jb25maWcsdGhpcy5jb250ZXh0KX0sQ2hhcnRzLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uPWZ1bmN0aW9uKCl7dGhpcy5hbmltYXRpb25JbnN0YW5jZSYmdGhpcy5hbmltYXRpb25JbnN0YW5jZS5zdG9wKCl9LENoYXJ0cy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3RoaXMuZXZlbnQuYWRkRXZlbnRMaXN0ZW5lcihlLHQpfSxDaGFydHMucHJvdG90eXBlLmdldEN1cnJlbnREYXRhSW5kZXg9ZnVuY3Rpb24odCl7dmFyIGU9bnVsbDtpZihlPXQuY2hhbmdlZFRvdWNoZXM/dC5jaGFuZ2VkVG91Y2hlc1swXTp0Lm1wLmNoYW5nZWRUb3VjaGVzWzBdLGUpe2xldCBpPWdldFRvdWNoZXMoZSx0aGlzLm9wdHMsdCk7cmV0dXJuXCJwaWVcIj09PXRoaXMub3B0cy50eXBlfHxcInJpbmdcIj09PXRoaXMub3B0cy50eXBlfHxcInJvc2VcIj09PXRoaXMub3B0cy50eXBlP2ZpbmRQaWVDaGFydEN1cnJlbnRJbmRleCh7eDppLngseTppLnl9LHRoaXMub3B0cy5jaGFydERhdGEucGllRGF0YSk6XCJyYWRhclwiPT09dGhpcy5vcHRzLnR5cGU/ZmluZFJhZGFyQ2hhcnRDdXJyZW50SW5kZXgoe3g6aS54LHk6aS55fSx0aGlzLm9wdHMuY2hhcnREYXRhLnJhZGFyRGF0YSx0aGlzLm9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpOlwiZnVubmVsXCI9PT10aGlzLm9wdHMudHlwZT9maW5kRnVubmVsQ2hhcnRDdXJyZW50SW5kZXgoe3g6aS54LHk6aS55fSx0aGlzLm9wdHMuY2hhcnREYXRhLmZ1bm5lbERhdGEpOlwibWFwXCI9PT10aGlzLm9wdHMudHlwZT9maW5kTWFwQ2hhcnRDdXJyZW50SW5kZXgoe3g6aS54LHk6aS55fSx0aGlzLm9wdHMpOlwid29yZFwiPT09dGhpcy5vcHRzLnR5cGU/ZmluZFdvcmRDaGFydEN1cnJlbnRJbmRleCh7eDppLngseTppLnl9LHRoaXMub3B0cy5jaGFydERhdGEud29yZENsb3VkRGF0YSk6ZmluZEN1cnJlbnRJbmRleCh7eDppLngseTppLnl9LHRoaXMub3B0cy5jaGFydERhdGEuY2FsUG9pbnRzLHRoaXMub3B0cyx0aGlzLmNvbmZpZyxNYXRoLmFicyh0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0KSl9cmV0dXJuLTF9LENoYXJ0cy5wcm90b3R5cGUuZ2V0TGVnZW5kRGF0YUluZGV4PWZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7aWYoZT10LmNoYW5nZWRUb3VjaGVzP3QuY2hhbmdlZFRvdWNoZXNbMF06dC5tcC5jaGFuZ2VkVG91Y2hlc1swXSxlKXtsZXQgaT1nZXRUb3VjaGVzKGUsdGhpcy5vcHRzLHQpO3JldHVybiBmaW5kTGVnZW5kSW5kZXgoe3g6aS54LHk6aS55fSx0aGlzLm9wdHMuY2hhcnREYXRhLmxlZ2VuZERhdGEpfXJldHVybi0xfSxDaGFydHMucHJvdG90eXBlLnRvdWNoTGVnZW5kPWZ1bmN0aW9uKHQpe3ZhciBlPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxpPW51bGw7aWYoaT10LmNoYW5nZWRUb3VjaGVzP3QuY2hhbmdlZFRvdWNoZXNbMF06dC5tcC5jaGFuZ2VkVG91Y2hlc1swXSxpKXt2YXIgYT1nZXRUb3VjaGVzKGksdGhpcy5vcHRzLHQpLG89dGhpcy5nZXRMZWdlbmREYXRhSW5kZXgodCk7MDw9byYmKHRoaXMub3B0cy5zZXJpZXNbb10uc2hvdz0hdGhpcy5vcHRzLnNlcmllc1tvXS5zaG93LHRoaXMub3B0cy5hbmltYXRpb249ISFlLmFuaW1hdGlvbix0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXz10aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0LGRyYXdDaGFydHMuY2FsbCh0aGlzLHRoaXMub3B0cy50eXBlLHRoaXMub3B0cyx0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpKX19LENoYXJ0cy5wcm90b3R5cGUuc2hvd1Rvb2xUaXA9ZnVuY3Rpb24odCl7dmFyIGU9MTxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOnt9LGk9bnVsbDtpPXQuY2hhbmdlZFRvdWNoZXM/dC5jaGFuZ2VkVG91Y2hlc1swXTp0Lm1wLmNoYW5nZWRUb3VjaGVzWzBdLGl8fGNvbnNvbGUubG9nKFwidG91Y2hFcnJvclwiKTt2YXIgYT1nZXRUb3VjaGVzKGksdGhpcy5vcHRzLHQpLG89dGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCxuPWFzc2lnbih7fSx0aGlzLm9wdHMse19zY3JvbGxEaXN0YW5jZV86byxhbmltYXRpb246ITF9KTtpZihcImxpbmVcIj09PXRoaXMub3B0cy50eXBlfHxcImFyZWFcIj09PXRoaXMub3B0cy50eXBlfHxcImNvbHVtblwiPT09dGhpcy5vcHRzLnR5cGUpe3ZhciBsPXRoaXMuZ2V0Q3VycmVudERhdGFJbmRleCh0KTtpZigtMTxsKXt2YXIgcj1nZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLGwpO2lmKDAhPT1yLmxlbmd0aCl7dmFyIHM9Z2V0VG9vbFRpcERhdGEocix0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyxsLHRoaXMub3B0cy5jYXRlZ29yaWVzLGUpLGQ9cy50ZXh0TGlzdCxoPXMub2Zmc2V0O2gueT1hLnksbi50b29sdGlwPXt0ZXh0TGlzdDpkLG9mZnNldDpoLG9wdGlvbjplLGluZGV4Omx9fX1kcmF3Q2hhcnRzLmNhbGwodGhpcyxuLnR5cGUsbix0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpfWlmKFwibWl4XCI9PT10aGlzLm9wdHMudHlwZSl7dmFyIGw9dGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KHQpO2lmKC0xPGwpe3ZhciBvPXRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQsbj1hc3NpZ24oe30sdGhpcy5vcHRzLHtfc2Nyb2xsRGlzdGFuY2VfOm8sYW5pbWF0aW9uOiExfSkscj1nZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLGwpO2lmKDAhPT1yLmxlbmd0aCl7dmFyIHg9Z2V0TWl4VG9vbFRpcERhdGEocix0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyxsLHRoaXMub3B0cy5jYXRlZ29yaWVzLGUpLGQ9eC50ZXh0TGlzdCxoPXgub2Zmc2V0O2gueT1hLnksbi50b29sdGlwPXt0ZXh0TGlzdDpkLG9mZnNldDpoLG9wdGlvbjplLGluZGV4Omx9fX1kcmF3Q2hhcnRzLmNhbGwodGhpcyxuLnR5cGUsbix0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpfWlmKFwiY2FuZGxlXCI9PT10aGlzLm9wdHMudHlwZSl7dmFyIGw9dGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KHQpO2lmKC0xPGwpe3ZhciBvPXRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQsbj1hc3NpZ24oe30sdGhpcy5vcHRzLHtfc2Nyb2xsRGlzdGFuY2VfOm8sYW5pbWF0aW9uOiExfSkscj1nZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLGwpO2lmKDAhPT1yLmxlbmd0aCl7dmFyIHM9Z2V0Q2FuZGxlVG9vbFRpcERhdGEodGhpcy5vcHRzLnNlcmllc1swXS5kYXRhLHIsdGhpcy5vcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMsbCx0aGlzLm9wdHMuY2F0ZWdvcmllcyx0aGlzLm9wdHMuZXh0cmEuY2FuZGxlLGUpLGQ9cy50ZXh0TGlzdCxoPXMub2Zmc2V0O2gueT1hLnksbi50b29sdGlwPXt0ZXh0TGlzdDpkLG9mZnNldDpoLG9wdGlvbjplLGluZGV4Omx9fX1kcmF3Q2hhcnRzLmNhbGwodGhpcyxuLnR5cGUsbix0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpfWlmKFwicGllXCI9PT10aGlzLm9wdHMudHlwZXx8XCJyaW5nXCI9PT10aGlzLm9wdHMudHlwZXx8XCJyb3NlXCI9PT10aGlzLm9wdHMudHlwZXx8XCJmdW5uZWxcIj09PXRoaXMub3B0cy50eXBlKXt2YXIgbD10aGlzLmdldEN1cnJlbnREYXRhSW5kZXgodCk7aWYoLTE8bCl7dmFyIG89dGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCxuPWFzc2lnbih7fSx0aGlzLm9wdHMse19zY3JvbGxEaXN0YW5jZV86byxhbmltYXRpb246ITF9KSxyPXRoaXMub3B0cy5fc2VyaWVzX1tsXSxkPVt7dGV4dDplLmZvcm1hdD9lLmZvcm1hdChyKTpyLm5hbWUrXCI6IFwiK3IuZGF0YSxjb2xvcjpyLmNvbG9yfV0saD17eDphLngseTphLnl9O24udG9vbHRpcD17dGV4dExpc3Q6ZCxvZmZzZXQ6aCxvcHRpb246ZSxpbmRleDpsfX1kcmF3Q2hhcnRzLmNhbGwodGhpcyxuLnR5cGUsbix0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpfWlmKFwibWFwXCI9PT10aGlzLm9wdHMudHlwZXx8XCJ3b3JkXCI9PT10aGlzLm9wdHMudHlwZSl7dmFyIGw9dGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KHQpO2lmKC0xPGwpe3ZhciBvPXRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQsbj1hc3NpZ24oe30sdGhpcy5vcHRzLHtfc2Nyb2xsRGlzdGFuY2VfOm8sYW5pbWF0aW9uOiExfSkscj10aGlzLm9wdHMuX3Nlcmllc19bbF0sZD1be3RleHQ6ZS5mb3JtYXQ/ZS5mb3JtYXQocik6ci5wcm9wZXJ0aWVzLm5hbWUsY29sb3I6ci5jb2xvcn1dLGg9e3g6YS54LHk6YS55fTtuLnRvb2x0aXA9e3RleHRMaXN0OmQsb2Zmc2V0Omgsb3B0aW9uOmUsaW5kZXg6bH19bi51cGRhdGVEYXRhPSExLGRyYXdDaGFydHMuY2FsbCh0aGlzLG4udHlwZSxuLHRoaXMuY29uZmlnLHRoaXMuY29udGV4dCl9aWYoXCJyYWRhclwiPT09dGhpcy5vcHRzLnR5cGUpe3ZhciBsPXRoaXMuZ2V0Q3VycmVudERhdGFJbmRleCh0KTtpZigtMTxsKXt2YXIgbz10aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0LG49YXNzaWduKHt9LHRoaXMub3B0cyx7X3Njcm9sbERpc3RhbmNlXzpvLGFuaW1hdGlvbjohMX0pLHI9Z2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcyxsKTtpZigwIT09ci5sZW5ndGgpe3ZhciBkPXIubWFwKGZ1bmN0aW9uKHQpe3JldHVybnt0ZXh0OmUuZm9ybWF0P2UuZm9ybWF0KHQpOnQubmFtZStcIjogXCIrdC5kYXRhLGNvbG9yOnQuY29sb3J9fSksaD17eDphLngseTphLnl9O24udG9vbHRpcD17dGV4dExpc3Q6ZCxvZmZzZXQ6aCxvcHRpb246ZSxpbmRleDpsfX19ZHJhd0NoYXJ0cy5jYWxsKHRoaXMsbi50eXBlLG4sdGhpcy5jb25maWcsdGhpcy5jb250ZXh0KX19LENoYXJ0cy5wcm90b3R5cGUudHJhbnNsYXRlPWZ1bmN0aW9uKGUpe3RoaXMuc2Nyb2xsT3B0aW9uPXtjdXJyZW50T2Zmc2V0OmUsc3RhcnRUb3VjaFg6ZSxkaXN0YW5jZTowLGxhc3RNb3ZlVGltZTowfTtsZXQgdD1hc3NpZ24oe30sdGhpcy5vcHRzLHtfc2Nyb2xsRGlzdGFuY2VfOmUsYW5pbWF0aW9uOiExfSk7ZHJhd0NoYXJ0cy5jYWxsKHRoaXMsdGhpcy5vcHRzLnR5cGUsdCx0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpfSxDaGFydHMucHJvdG90eXBlLnNjcm9sbFN0YXJ0PWZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7ZT10LmNoYW5nZWRUb3VjaGVzP3QuY2hhbmdlZFRvdWNoZXNbMF06dC5tcC5jaGFuZ2VkVG91Y2hlc1swXTt2YXIgaT1nZXRUb3VjaGVzKGUsdGhpcy5vcHRzLHQpO2UmJiEwPT09dGhpcy5vcHRzLmVuYWJsZVNjcm9sbCYmKHRoaXMuc2Nyb2xsT3B0aW9uLnN0YXJ0VG91Y2hYPWkueCl9LENoYXJ0cy5wcm90b3R5cGUuc2Nyb2xsPWZ1bmN0aW9uKHQpezA9PT10aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUmJih0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWU9RGF0ZS5ub3coKSk7bGV0IGU9dGhpcy5vcHRzLmV4dHJhLnRvdWNoTW92ZUxpbWl0fHwyMCxpPURhdGUubm93KCksYT1pLXRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZTtpZighKGE8TWF0aC5mbG9vcigxZTMvZSkpKXt0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWU9aTt2YXIgbz1udWxsO2lmKG89dC5jaGFuZ2VkVG91Y2hlcz90LmNoYW5nZWRUb3VjaGVzWzBdOnQubXAuY2hhbmdlZFRvdWNoZXNbMF0sbyYmITA9PT10aGlzLm9wdHMuZW5hYmxlU2Nyb2xsKXt2YXIgbixsPWdldFRvdWNoZXMobyx0aGlzLm9wdHMsdCk7bj1sLngtdGhpcy5zY3JvbGxPcHRpb24uc3RhcnRUb3VjaFg7dmFyIHI9dGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCxzPWNhbFZhbGlkRGlzdGFuY2UodGhpcyxyK24sdGhpcy5vcHRzLmNoYXJ0RGF0YSx0aGlzLmNvbmZpZyx0aGlzLm9wdHMpO3RoaXMuc2Nyb2xsT3B0aW9uLmRpc3RhbmNlPW49cy1yO3ZhciBkPWFzc2lnbih7fSx0aGlzLm9wdHMse19zY3JvbGxEaXN0YW5jZV86cituLGFuaW1hdGlvbjohMX0pO3JldHVybiBkcmF3Q2hhcnRzLmNhbGwodGhpcyxkLnR5cGUsZCx0aGlzLmNvbmZpZyx0aGlzLmNvbnRleHQpLHIrbn19fSxDaGFydHMucHJvdG90eXBlLnNjcm9sbEVuZD1mdW5jdGlvbigpe2lmKCEwPT09dGhpcy5vcHRzLmVuYWJsZVNjcm9sbCl7dmFyIGU9dGhpcy5zY3JvbGxPcHRpb24sdD1lLmN1cnJlbnRPZmZzZXQsaT1lLmRpc3RhbmNlO3RoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ9dCtpLHRoaXMuc2Nyb2xsT3B0aW9uLmRpc3RhbmNlPTB9fSxcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1DaGFydHMpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///834\n");

/***/ }),

/***/ 891:
/*!***************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/mixins/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var MIXINS = {\n  exam: {\n    data: function data() {\n      var letterArr = [];\n\n      for (var i = 65; i < 91; i++) {\n        letterArr.push(String.fromCharCode(i));\n      }\n\n      return {\n        letters: letterArr };\n\n    },\n    methods: {\n      /**\r\n                * 根据下标返回字母\r\n                * @param {Number}\r\n                */\n      getLetter: function getLetter(i) {\n        return this.letters[i];\n      },\n\n      /**\r\n          * 根据子母返回下标\r\n          * @param {Number}\r\n          */\n      getLetterIndex: function getLetterIndex(letter) {\n        var index = 0;\n        this.letters.map(function (ltr, i) {\n          if (ltr == letter) {\n            index = i;\n          }\n        });\n        return index;\n      } } } };var _default =\n\n\n\nMIXINS;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWl4aW5zL2luZGV4LmpzIl0sIm5hbWVzIjpbIk1JWElOUyIsImV4YW0iLCJkYXRhIiwibGV0dGVyQXJyIiwiaSIsInB1c2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsZXR0ZXJzIiwibWV0aG9kcyIsImdldExldHRlciIsImdldExldHRlckluZGV4IiwibGV0dGVyIiwiaW5kZXgiLCJtYXAiLCJsdHIiXSwibWFwcGluZ3MiOiJ1RkFBQSxJQUFJQSxNQUFNLEdBQUc7QUFDVEMsTUFBSSxFQUFDO0FBQ0RDLFFBQUksRUFBRSxnQkFBVztBQUNmLFVBQUlDLFNBQVMsR0FBRyxFQUFoQjs7QUFFQSxXQUFLLElBQUlDLENBQUMsR0FBRyxFQUFiLEVBQWlCQSxDQUFDLEdBQUcsRUFBckIsRUFBeUJBLENBQUMsRUFBMUIsRUFBOEI7QUFDNUJELGlCQUFTLENBQUNFLElBQVYsQ0FBZUMsTUFBTSxDQUFDQyxZQUFQLENBQW9CSCxDQUFwQixDQUFmO0FBQ0Q7O0FBRUQsYUFBTztBQUNMSSxlQUFPLEVBQUVMLFNBREosRUFBUDs7QUFHRCxLQVhBO0FBWURNLFdBQU8sRUFBRTtBQUNQOzs7O0FBSUFDLGVBQVMsRUFBRSxtQkFBU04sQ0FBVCxFQUFZO0FBQ3JCLGVBQU8sS0FBS0ksT0FBTCxDQUFhSixDQUFiLENBQVA7QUFDRCxPQVBNOztBQVNQOzs7O0FBSUFPLG9CQUFjLEVBQUUsd0JBQVVDLE1BQVYsRUFBa0I7QUFDaEMsWUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxhQUFLTCxPQUFMLENBQWFNLEdBQWIsQ0FBaUIsVUFBVUMsR0FBVixFQUFlWCxDQUFmLEVBQWtCO0FBQ2pDLGNBQUlXLEdBQUcsSUFBSUgsTUFBWCxFQUFtQjtBQUNqQkMsaUJBQUssR0FBR1QsQ0FBUjtBQUNEO0FBQ0YsU0FKRDtBQUtBLGVBQU9TLEtBQVA7QUFDRCxPQXJCTSxFQVpSLEVBREksRUFBYixDOzs7O0FBc0NlYixNIiwiZmlsZSI6Ijg5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNSVhJTlMgPSB7XHJcbiAgICBleGFtOntcclxuICAgICAgICBkYXRhOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBsZXR0ZXJBcnIgPSBbXTtcclxuICAgICAgXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gNjU7IGkgPCA5MTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldHRlckFyci5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoaSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxldHRlcnM6IGxldHRlckFyclxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICog5qC55o2u5LiL5qCH6L+U5Zue5a2X5q+NXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn1cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgZ2V0TGV0dGVyOiBmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxldHRlcnNbaV07XHJcbiAgICAgICAgICB9LFxyXG4gICAgICBcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICog5qC55o2u5a2Q5q+N6L+U5Zue5LiL5qCHXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn1cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgZ2V0TGV0dGVySW5kZXg6IGZ1bmN0aW9uIChsZXR0ZXIpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5sZXR0ZXJzLm1hcChmdW5jdGlvbiAobHRyLCBpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGx0ciA9PSBsZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IE1JWElOUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///891\n");

/***/ }),

/***/ 913:
/*!************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/player/polyv.min.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _md = _interopRequireDefault(__webpack_require__(/*! ../utils/md5 */ 30));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var polyvVodPlayer = { version: \"v1.0.0\", buidMetaData: 20190221, options: null, jsonHost: \"https://router.polyv.net/proxy/player.polyv.net/secure/\", isPreviewMode: !1, isWx: !1, token: \"\", seed: 0, state: \"end\", timeStamp: 0, time: 0, currentTime: 0, detailTime: 0, videoId: \"\", pid: \"\", uid: \"\", flow: 0, pd: 0, sd: 0, cts: 0, duration: 0, pn: \"\", pv: \"\", sign: \"\", sessionId: \"\", param1: \"\", param2: \"\", param3: \"\", param4: \"\", param5: \"\", getVideo: function getVideo(t) {this.loadJson(t);}, getPreviewVideo: function getPreviewVideo(t) {this.isPreviewMode = !0, this.loadJson(t);}, changeVid: function changeVid(t) {var e = t.vid,a = t.changeVidcallback;e && e.length > 0 && e !== this.videoId && (this.videoId = e, this.getVideoJson().then(function (t) {a(t);}).catch());}, loadJson: function loadJson(t) {var e = this.version;var a = { version: e, timeoutflow: !1, outflow: !1 };if (!t.vid) return a = { version: e, error: \"vid不能为空\" }, void t.callback(a);var r = \"\".concat(new Date().getTime(), \"X\").concat(Math.floor(1e6 * Math.random() + 1e6)),s = t.vid.substr(0, 10),i = this;i.videoId = t.vid, i.ts = t.ts, i.sign = t.sign, i.uid = s, i.pid = r, i.version = a.version, i.param1 = t.param1 || \"\", i.param2 = t.param2 || \"\", i.param3 = t.param3 || \"\", i.param4 = t.param4 || \"\", i.param5 = t.param5 || \"\", t.sid && (i.sessionId = t.sid), i.options = t, wx.request({ url: \"\".concat(i.jsonHost + t.vid, \".js\"), method: \"GET\", success: function success(e) {\"true\" === e.data.timeoutflow ? a.timeoutflow = !0 : \"true\" === e.data.outflow ? a.outflow = !0 : (a.poster = e.data.first_image, a.title = e.data.title, a.teaser_url = e.data.teaser_url, a.catatree = e.data.catatree, a.adMatter = e.data.adMatter, a.ratio = e.data.ratio, a.duration = e.data.duration, a.poster = i.proxy(a.poster), a.teaser_url = i.proxy(a.teaser_url), a.adMatter = i.proxy(a.adMatter, \"matterurl\"), i.seed = e.data.seed, 1 === e.data.seed ? a.src = i.proxy(e.data.hls) : a.src = i.proxy(e.data.mp4), i.duration = e.data.duration), 1 === i.seed && t.wxApp && t.wxApp.isWx ? (i.isWx = !0, i.getWxToken(t, function (r) {i.token = r;for (var _r = 0; _r < e.data.hls.length; _r++) {t.hlstest ? a.src[_r] = i.resetUrl(e.data.hls[_r]).replace(\"hls.\", \"hlstest.\") : a.src[_r] = i.resetUrl(e.data.hls[_r]);}t.callback(a);}, function () {a = { error: \"播放token获取失败\" }, t.callback(a);})) : t.callback(a), i.countInterval && clearInterval(i.countInterval), i.countInterval = setInterval(function () {i.countWholeTime();}, 1e3);}, fail: function fail(e) {a = { error: \"视频数据获取失败\" }, t.callback(a);} });}, getVideoJson: function getVideoJson() {var t = this;return new Promise(function (e, a) {wx.request({ url: \"\".concat(t.jsonHost).concat(t.videoId, \".js\"), method: \"GET\", success: function success(a) {var r = {};\"true\" === a.data.timeoutflow ? (r.timeoutflow = !0, r.canplay = 0) : \"true\" === a.data.outflow ? (r.outflow = !0, r.canplay = 1) : (r.poster = a.data.first_image, r.title = a.data.title, r.teaser_url = a.data.teaser_url, r.catatree = a.data.catatree, r.adMatter = a.data.adMatter, r.ratio = a.data.ratio, r.duration = a.data.duration, r.poster = t.proxy(r.poster), r.teaser_url = t.proxy(r.teaser_url), r.adMatter = t.proxy(r.adMatter, \"matterurl\"), t.seed = a.data.seed, 1 === a.data.seed ? r.src = t.proxy(a.data.hls) : r.src = t.proxy(a.data.mp4), t.duration = a.data.duration), e(r);}, fail: function fail() {a();} });});}, getWxToken: function getWxToken(t, e) {var a = t.wxApp.wxAppUrl,r = new Date().getTime(),s = CModule.ccall(\"getsign\", \"string\", [\"string\", \"string\", \"string\"], [t.wxApp.wxUserId, t.vid, r.toString()]),i = t.wxApp;i.iswxa = 1, i.vid = t.vid, i.ts = r, i.sign = s, wx.request({ url: a, method: \"GET\", data: i, success: function success(t) {var a = CModule.ccall(\"loadtoken\", \"string\", [\"string\"], [t.data]);e(JSON.parse(a).data.token);}, fail: function fail() {} });}, timeUpdate: function timeUpdate(t) {t && t.detail && t.detail.currentTime && (this.detailTime = t.detail.currentTime);}, updateState: function updateState() {this.currentTime == this.detailTime ? this.state = \"end\" : (this.state = \"played\", this.currentTime = this.detailTime);}, countWholeTime: function countWholeTime() {var t = this,e = new Date().getTime();t.updateState(), \"played\" == this.state && (t.time += 1), e - t.timeStamp > 9e3 && (t.timeStamp = e, t.sendState());}, sendState: function sendState() {var t = this;var e = 0,a = 0;if (a = Math.floor(this.currentTime), (e = t.time) > 0 && \"played\" == t.state) {new Date().getTime();var s = \"rtas.net\".concat(t.pid).concat(t.videoId).concat(t.flow).concat(e).concat(a),i = (0, _md.default)(s),o = t.sessionId;var r = { pid: t.pid, uid: t.uid, vid: t.videoId, flow: 0, pd: e, sd: e, cts: a, duration: t.duration, pn: \"webapp_vod_sdk\", pv: t.version, sign: i, sid: o, param1: t.param1, param2: t.param2, param3: t.param3, param4: t.param4, param5: t.param5 };wx.request({ url: \"https://router.polyv.net/proxy/prtas.videocc.net/v1/view\", data: r });}}, proxy: function proxy(t, e) {var a = this;if (void 0 === t || 0 == t.length) return \"\";if (\"string\" == typeof t) return t = this.resetUrl(t), this.proxyUrl(t);if (arguments[1]) for (var r = 0, s = t.length; r < s; r++) {for (var _a in t[r]) {_a == e && (t[r][_a] = this.proxyUrl(t[r][_a]));}} else for (r = 0, s = t.length; r < s; r++) {if (this.isPreviewMode) {var _e = this.videoId.substring(0, 32);t[r] = t[r].replace(_e, \"p_\".concat(_e));}a.ts && a.sign && (t[r].indexOf(\"?\") > -1 ? t[r] = \"\".concat(t[r], \"&ts=\").concat(a.ts, \"&sign=\").concat(a.sign) : t[r] = \"\".concat(t[r], \"?ts=\").concat(a.ts, \"&sign=\").concat(a.sign)), t[r] = this.proxyUrl(t[r]);}return t;}, proxyUrl: function proxyUrl(t) {return \"\" == t ? t : \"https://router.polyv.net/proxy/\".concat(t = t.replace(/.*?:\\/\\//g, \"\"));}, resetUrl: function resetUrl(t) {var e = this;if (this.isPreviewMode && 1 == e.seed) {var _e2 = this.videoId.substring(0, 32);t = t.replace(_e2, \"p_\".concat(_e2));}return e.ts && e.sign && (t = t.indexOf(\"?\") > -1 ? \"\".concat(t, \"&ts=\").concat(e.ts, \"&sign=\").concat(e.sign) : \"\".concat(t, \"?ts=\").concat(e.ts, \"&sign=\").concat(e.sign)), e.isWx && (t = t.indexOf(\"?\") > -1 ? \"\".concat(t, \"&token=\").concat(e.token, \"&iswxa=1\") + \"&pid=\".concat(e.pid) : \"\".concat(t, \"?token=\").concat(e.token, \"&iswxa=1\") + \"&pid=\".concat(e.pid)), t;} };var _default = polyvVodPlayer;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///913\n");

/***/ }),

/***/ 956:
/*!*********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/chat/emotions.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var host = \"https://livestatic.polyv.net/assets/images/em/\",emotionslist = [{ url: host + \"1.png\", title: \"微笑\", position: \"0px 0px\" }, { url: host + \"2.png\", title: \"撇嘴\", position: \"-48px 0px\" }, { url: host + \"3.png\", title: \"色\", position: \"-96px 0px\" }, { url: host + \"4.png\", title: \"发呆\", position: \"-144px 0px\" }, { url: host + \"5.png\", title: \"得意\", position: \"-192px 0px\" }, { url: host + \"6.png\", title: \"流泪\", position: \"-240px 0px\" }, { url: host + \"7.png\", title: \"害羞\", position: \"-288px 0px\" }, { url: host + \"8.png\", title: \"闭嘴\", position: \"-336px 0px\" }, { url: host + \"9.png\", title: \"睡\", position: \"-384px 0px\" }, { url: host + \"10.png\", title: \"大哭\", position: \"-432px 0px\" }, { url: host + \"11.png\", title: \"尴尬\", position: \"-480px 0px\" }, { url: host + \"12.png\", title: \"发怒\", position: \"-528px 0px\" }, { url: host + \"13.png\", title: \"调皮\", position: \"-576px 0px\" }, { url: host + \"14.png\", title: \"呲牙\", position: \"-624px 0px\" }, { url: host + \"15.png\", title: \"惊讶\", position: \"-672px 0px\" }, { url: host + \"16.png\", title: \"难过\", position: \"-720px 0px\" }, { url: host + \"17.png\", title: \"酷\", position: \"-768px 0px\" }, { url: host + \"18.png\", title: \"冷汗\", position: \"-816px 0px\" }, { url: host + \"19.png\", title: \"抓狂\", position: \"-864px 0px\" }, { url: host + \"20.png\", title: \"吐\", position: \"-912px 0px\" }, { url: host + \"21.png\", title: \"偷笑\", position: \"-960px 0px\" }, { url: host + \"22.png\", title: \"可爱\", position: \"-1008px 0px\" }, { url: host + \"23.png\", title: \"白眼\", position: \"-1056px 0px\" }, { url: host + \"24.png\", title: \"傲慢\", position: \"-1104px 0px\" }, { url: host + \"25.png\", title: \"饥饿\", position: \"-1152px 0px\" }, { url: host + \"26.png\", title: \"困\", position: \"-1200px 0px\" }, { url: host + \"27.png\", title: \"惊恐\", position: \"-1248px 0px\" }, { url: host + \"28.png\", title: \"流汗\", position: \"-1296px 0px\" }, { url: host + \"29.png\", title: \"憨笑\", position: \"-1344px 0px\" }, { url: host + \"30.png\", title: \"大兵\", position: \"-1392px 0px\" }, { url: host + \"31.png\", title: \"奋斗\", position: \"-1440px 0px\" }, { url: host + \"32.png\", title: \"咒骂\", position: \"-1488px 0px\" }, { url: host + \"33.png\", title: \"疑问\", position: \"-1536px 0px\" }, { url: host + \"34.png\", title: \"嘘\", position: \"-1584px 0px\" }, { url: host + \"35.png\", title: \"晕\", position: \"-1632px 0px\" }, { url: host + \"36.png\", title: \"折磨\", position: \"-1680px 0px\" }, { url: host + \"37.png\", title: \"衰\", position: \"-1728px 0px\" }, { url: host + \"38.png\", title: \"骷髅\", position: \"-1776px 0px\" }, { url: host + \"39.png\", title: \"敲打\", position: \"-1824px 0px\" }, { url: host + \"40.png\", title: \"再见\", position: \"-1872px 0px\" }, { url: host + \"41.png\", title: \"擦汗\", position: \"-1920px 0px\" }, { url: host + \"42.png\", title: \"抠鼻\", position: \"-1968px 0px\" }, { url: host + \"43.png\", title: \"鼓掌\", position: \"-2016px 0px\" }, { url: host + \"44.png\", title: \"糗大了\", position: \"-2064px 0px\" }, { url: host + \"45.png\", title: \"坏笑\", position: \"-2112px 0px\" }, { url: host + \"46.png\", title: \"左哼哼\", position: \"-2160px 0px\" }, { url: host + \"47.png\", title: \"右哼哼\", position: \"-2208px 0px\" }, { url: host + \"48.png\", title: \"哈欠\", position: \"-2256px 0px\" }, { url: host + \"49.png\", title: \"鄙视\", position: \"-2304px 0px\" }, { url: host + \"50.png\", title: \"委屈\", position: \"-2352px 0px\" }, { url: host + \"51.png\", title: \"快哭了\", position: \"-2400px 0px\" }, { url: host + \"52.png\", title: \"阴险\", position: \"-2448px 0px\" }, { url: host + \"53.png\", title: \"亲亲\", position: \"-2496px 0px\" }, { url: host + \"54.png\", title: \"吓\", position: \"-2544px 0px\" }, { url: host + \"55.png\", title: \"可怜\", position: \"-2592px 0px\" }, { url: host + \"56.png\", title: \"菜刀\", position: \"-2640px 0px\" }, { url: host + \"57.png\", title: \"西瓜\", position: \"-2688px 0px\" }, { url: host + \"58.png\", title: \"啤酒\", position: \"-2736px 0px\" }, { url: host + \"59.png\", title: \"篮球\", position: \"-2784px 0px\" }, { url: host + \"60.png\", title: \"乒乓\", position: \"-2832px 0px\" }, { url: host + \"61.png\", title: \"咖啡\", position: \"-2880px 0px\" }, { url: host + \"62.png\", title: \"饭\", position: \"-2928px 0px\" }, { url: host + \"63.png\", title: \"猪头\", position: \"-2976px 0px\" }, { url: host + \"64.png\", title: \"玫瑰\", position: \"-3024px 0px\" }, { url: host + \"65.png\", title: \"凋谢\", position: \"-3072px 0px\" }, { url: host + \"66.png\", title: \"示爱\", position: \"-3120px 0px\" }, { url: host + \"67.png\", title: \"爱心\", position: \"-3168px 0px\" }, { url: host + \"68.png\", title: \"心碎\", position: \"-3216px 0px\" }, { url: host + \"69.png\", title: \"蛋糕\", position: \"-3264px 0px\" }, { url: host + \"70.png\", title: \"闪电\", position: \"-3312px 0px\" }, { url: host + \"71.png\", title: \"炸弹\", position: \"-3360px 0px\" }, { url: host + \"72.png\", title: \"刀\", position: \"-3408px 0px\" }, { url: host + \"73.png\", title: \"足球\", position: \"-3456px 0px\" }, { url: host + \"74.png\", title: \"瓢虫\", position: \"-3504px 0px\" }, { url: host + \"75.png\", title: \"便便\", position: \"-3552px 0px\" }, { url: host + \"76.png\", title: \"月亮\", position: \"-3600px 0px\" }, { url: host + \"77.png\", title: \"太阳\", position: \"-3648px 0px\" }, { url: host + \"78.png\", title: \"礼物\", position: \"-3696px 0px\" }, { url: host + \"79.png\", title: \"拥抱\", position: \"-3744px 0px\" }, { url: host + \"80.png\", title: \"强\", position: \"-3792px 0px\" }, { url: host + \"81.png\", title: \"弱\", position: \"-3840px 0px\" }, { url: host + \"82.png\", title: \"握手\", position: \"-3888px 0px\" }, { url: host + \"83.png\", title: \"胜利\", position: \"-3936px 0px\" }, { url: host + \"84.png\", title: \"抱拳\", position: \"-3984px 0px\" }, { url: host + \"85.png\", title: \"勾引\", position: \"-4032px 0px\" }, { url: host + \"86.png\", title: \"拳头\", position: \"-4080px 0px\" }, { url: host + \"87.png\", title: \"差劲\", position: \"-4128px 0px\" }, { url: host + \"88.png\", title: \"爱你\", position: \"-4176px 0px\" }, { url: host + \"89.png\", title: \"NO\", position: \"-4224px 0px\" }, { url: host + \"90.png\", title: \"OK\", position: \"-4272px 0px\" }, { url: host + \"91.png\", title: \"爱情\", position: \"-4320px 0px\" }, { url: host + \"92.png\", title: \"飞吻\", position: \"-4368px 0px\" }, { url: host + \"93.png\", title: \"跳跳\", position: \"-4416px 0px\" }, { url: host + \"94.png\", title: \"发抖\", position: \"-4464px 0px\" }, { url: host + \"95.png\", title: \"怄火\", position: \"-4512px 0px\" }, { url: host + \"96.png\", title: \"转圈\", position: \"-4560px 0px\" }, { url: host + \"97.png\", title: \"磕头\", position: \"-4608px 0px\" }, { url: host + \"98.png\", title: \"回头\", position: \"-4656px 0px\" }, { url: host + \"99.png\", title: \"跳绳\", position: \"-4704px 0px\" }, { url: host + \"100.png\", title: \"挥手\", position: \"-4752px 0px\" }],emotionSearchObj = {};emotionslist.forEach(function (t) {emotionSearchObj[t.title] = t;}), module.exports.emotionslist = emotionslist, module.exports.emotionSearchObj = emotionSearchObj;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///956\n");

/***/ }),

/***/ 964:
/*!****************************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/player/polyvlive.min.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 21));var _md = _interopRequireDefault(__webpack_require__(/*! ../../common/utils/md5 */ 30));var _jsBase = __webpack_require__(/*! ../../common/utils/js-base64 */ 965);var _index = _interopRequireDefault(__webpack_require__(/*! ../../common/api/index */ 40));var _runtimeModule = _interopRequireDefault(__webpack_require__(/*! ../../common/regenerator-runtime/runtime-module */ 24));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var getChannelJson = Symbol(\"getChannelJson\"),descryptChannelJson = Symbol(\"descryptChannelJson\"),handleJson = Symbol(\"handleJson\"),promiseRequest = Symbol(\"promiseRequest\");var PolyLive = /*#__PURE__*/function () {function PolyLive() {_classCallCheck(this, PolyLive);this.version = \"v2.1.0\", this.buildMetaData = \"20190626\", this.channel = {}, this.ProxyFieldArr = [], this.sendRtasTime = 10, this.apiState = \"\", this.apiTime = 6e3, this.apiCheckTs = 0, this.netWorkTime = 6e3, this.netWorkTs = 0, this.rtasTS = 0, this.renderInterval = null, this.playTime = 0, this.playState = \"\", this.stateType = { playing: \"playing\", pause: \"pause\", end: \"end\" }, this.changingType = \"live\", this.vodCurrentTime = 0, this.vodRecordTime = 0, this.uid = \"\", this.cid = \"\", this.isAutoChange = !1, this.vodsrc = \"\", this.success = function () {}, this.onChangeType = function () {}, this.onApiStatus = function () {}, this.onNetWorkChange = function () {}, this.statistics = {};}_createClass(PolyLive, [{ key: \"resetConfig\", value: function resetConfig(t) {return !(!t.uid || !t.vid) && (Object.assign(this, t), this.uid = t.uid, this.cid = t.vid, this.isSkinWhite = t.isSkinWhite, this.config = new Map([[\"ROUTER_HOST\", \"https://router.polyv.net/proxy/\"], [\"ASSETS_HOST\", \"livestatic.videocc.net/assets/wimages/\"], [\"JSON_URL\", \"https://router.polyv.net/proxy/player.polyv.net/service/v1/channel_\".concat(this.uid, \"_\").concat(this.cid, \".json?ran=\").concat(Math.floor(9999999 * Math.random()))], [\"API_HOST\", \"https://api.polyv.net/live_status/query?stream=\"], [\"RTAS_URL\", \"https://router.polyv.net/proxy/rtas.videocc.net/v2/view\"]]), this.ProxyFieldArr = [\"coverImage\", \"waitImage\", \"logoImage\", \"logoHref\"], this.timeStamp = this.getDate(), t.vodsrc || (this.vodsrc = \"\"), this.handleRtas(), !0);} }, { key: \"getRestrict\", value: function getRestrict() {var _this = this;var t = { uid: this.uid, cid: this.vid, pageDomain: \"https://live.polyv.cn\" };return new Promise(function (e, s) {_index.default.getRestrict(t).then(function (t) {200 === t.statusCode ? e(t.data) : _this.getBackRestrict().then(function (t) {e(t);}).catch(function (t) {s(t);});}).catch(function () {_this.getBackRestrict().then(function (t) {e(t);}).catch(function (t) {s(t);});});});} }, { key: \"getBackRestrict\", value: function getBackRestrict() {var t = { uid: this.uid, vid: this.vid, pageDomain: \"https://live.polyv.cn\" };return new Promise(function (e, s) {_index.default.getBackRestrict(t).then(function (t) {200 === t.statusCode ? e(t.data) : s({ msg: \"fail\" });}).catch(function () {return s({ msg: \"fail\" });});});} }, { key: \"getVideo\", value: function getVideo(t) {var _this2 = this;this.resetConfig(t) && this.getRestrict().then(function (t) {t.canWatch ? _this2.normalPlay() : _this2.success(t);}).catch(function (t) {_this2.normalPlay();});} }, { key: \"normalPlay\", value: function normalPlay() {var _this3 = this;this[getChannelJson]().then(function () {var t = { flvSrc: _this3.channel.flvSrc, src: _this3.channel.src, poster: _this3.channel.coverImage };\"function\" == typeof _this3.success && _this3.success(t);}), this.setPlayId(), this.startRender();} }, { key: \"getReconnectSrc\", value: function getReconnectSrc(t) {var _this4 = this;this[getChannelJson]().then(function () {\"function\" == typeof t && t(_this4.channel.flvSrc);});} }, { key: \"changeSessionId\", value: function changeSessionId(t) {this.statistics.session_id = t, this.handleRtas();} }, { key: \"changeLiveMode\", value: function changeLiveMode() {} }, { key: \"changeVodMode\", value: function changeVodMode() {} }, { key: \"updateTime\", value: function updateTime(t) {\"vod\" === !this.changingType && (this.changingType = \"vod\"), this.vodCurrentTime = t;} }, { key: \"destroy\", value: function destroy() {this.renderInterval && (clearInterval(this.renderInterval), this.renderInterval = null);} }, { key: \"startRender\", value: function startRender() {var _this5 = this;this.destroy(), this.renderInterval = setInterval(function () {_this5.startCheckApi(), _this5.sendRtas(), _this5.startCheckNetWork();}, 1e3);} }, { key: getChannelJson, value: function () {var _value = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {var t, e;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:t = this.config.get(\"JSON_URL\");_context.next = 3;return this[promiseRequest](t);case 3:e = _context.sent;_context.next = 6;return this[handleJson](e);case 6:case \"end\":return _context.stop();}}}, _callee, this);}));function value() {return _value.apply(this, arguments);}return value;}() }, { key: handleJson, value: function value(t) {var _this6 = this;Object.keys(t).forEach(function (e, s, i) {_this6.ProxyFieldArr.includes(e) && (t[e] = _this6.proxyUrl(t[e]));}), t.src = t.lines[0].m3u8, \"Y\" === t.isOnlyAudio && (t.src = this.concatSrc(t.src, \"only-audio=1\")), t.flvSrc = t.lines[0].flv, this.sendRtasTime = t.reportFreq || this.sendRtasTime, this.channel = {}, Object.assign(this.channel, t);} }, { key: descryptChannelJson, value: function value() {} }, { key: promiseRequest, value: function value(t) {var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};return new Promise(function (s, i) {wx.request({ url: t, method: \"GET\", data: e, success: function success(t) {s(t.data);} });});} }, { key: \"concatSrc\", value: function concatSrc(t, e) {return t.include(\"?\") ? \"\".concat(t, \"&\").concat(e) : \"\".concat(t, \"?\").concat(e);} }, { key: \"handleRtas\", value: function handleRtas() {for (var t in this.statistics) {this.statistics[t] = _jsBase.Base64.encodeURI(this.statistics[t]);}/vod|live/i.test(this.changingType) && (this.statistics.param3 = _jsBase.Base64.encodeURI(this.changingType));} }, { key: \"startCheckNetWork\", value: function startCheckNetWork() {var _this7 = this;var t = Date.now();t - this.netWorkTs > this.netWorkTime && (this.netWorkTs = t, wx.getNetworkType({ success: function success(t) {var e = t.networkType;_this7.onNetWorkChange && _this7.onNetWorkChange(\"none\" === e);} }));} }, { key: \"startCheckApi\", value: function startCheckApi() {var _this8 = this;var t = Date.now();t - this.apiCheckTs > this.apiTime && (this.apiCheckTs = t, _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var t;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (_this8.channel.stream) {_context2.next = 2;break;}return _context2.abrupt(\"return\");case 2:_context2.next = 4;return _this8[promiseRequest](\"\".concat(_this8.config.get(\"API_HOST\")).concat(_this8.channel.stream));case 4:t = _context2.sent;_this8.updateApiState(t.trim());case 6:case \"end\":return _context2.stop();}}}, _callee2, this);}))());} }, { key: \"updateApiState\", value: function updateApiState(t) {var _this9 = this;_asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3() {var e, s, i, a, _t;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:e = \"\", s = \"\", i = null;a = t;if (!(a !== _this9.apiState)) {_context3.next = 17;break;}_this9.apiState = a;if (!(\"end\" === a)) {_context3.next = 10;break;}_context3.next = 7;return _this9.getLatestVodSrc();case 7:e = (i = _context3.sent).recordUrl;_context3.next = 15;break;case 10:_this9.playState = _this9.stateType.playing;_context3.next = 13;return _this9.getChannel();case 13:e = (i = _context3.sent).src;s = i.flvSrc;case 15:_t = { apiState: _this9.apiState, coverImage: i.coverImage, waitImage: i.waitImage, liveType: i.liveType, latestSrc: e, latestFlvSrc: s };_this9.updateChangeType(_t), _this9.onApiStatus && _this9.onApiStatus(_this9.apiState);case 17:case \"end\":return _context3.stop();}}}, _callee3, this);}))();} }, { key: \"getChannel\", value: function getChannel() {var _this10 = this;var t = this;return new Promise(function (e, s) {wx.request({ url: _this10.config.get(\"JSON_URL\"), method: \"GET\", success: function success(s) {var i = {};i.title = s.data.name, i.src = s.data.m3u8Url, i.poster = t.proxyUrl(s.data.coverImage), i.waitImage = t.proxyUrl(s.data.waitImage), i.logoImage = t.proxyUrl(s.data.logoImage), i.logoHref = t.proxyUrl(s.data.logoHref), i.logoOpacity = s.data.logoOpacity, i.logoPosition = s.data.logoPosition, i.liveType = s.data.liveType;var a = i.src;\"Y\" === s.data.isOnlyAudio && (a.indexOf(\"?\") > -1 ? i.src = \"\".concat(i.src, \"&only-audio=1\") : i.src = \"\".concat(i.src, \"?only-audio=1\")), i.flvSrc = \"\".concat(s.data.url + s.data.stream, \".flv\"), \"Y\" == s.data.isNgbEnabled ? i.flvSrc = \"\".concat(s.data.ngbUrl + s.data.stream, \".flv\") : \"Y\" == s.data.isUrlProtected && (i.flvSrc = \"\".concat(s.data.bakUrl + s.data.stream, \".flv\")), \"Y\" == s.data.isUrlProtected && (i.flvSrc = \"\".concat(i.flvSrc, \"?wsSecret=\").concat(s.data.streamSign, \"&wsTime=\").concat(s.data.currentTimeSecs)), i.flvSrc = i.flvSrc, e(i);} });});} }, { key: \"getLatestVodSrc\", value: function getLatestVodSrc() {var t = this;return new Promise(function (e, s) {wx.request({ url: \"https://router.polyv.net/proxy/player.polyv.net/service/v1/channel_\".concat(t.uid, \"_\").concat(t.cid, \".json?ran=\").concat(Math.floor(9999999 * Math.random())), method: \"GET\", success: function success(s) {var i = s.data.recordFileM3u8Url,a = s.data.recordFileUrl,n = s.data.coverImage,r = s.data.waitImage,h = s.data.liveType;var o = a || \"\";o || (o = i || \"\"), t.recordFileTest && (o = a || \"\"), e({ recordUrl: o, coverImage: n, waitImage: r, liveType: h });} });});} }, { key: \"updateChangeType\", value: function updateChangeType(t) {if (t.coverImage && (t.coverImage = t.coverImage.replace(\"livestatic.videocc.net\", \"router.polyv.net/proxy/livestatic.videocc.net\")), !t.coverImage) {var _e = \"\".concat(this.config.get(\"ROUTER_HOST\")).concat(this.config.get(\"ASSETS_HOST\"), \"mini-images/nolive_webapp_ppt.png\"),s = \"\".concat(this.config.get(\"ROUTER_HOST\")).concat(this.config.get(\"ASSETS_HOST\"), \"player/ppt/nolive_ppt_white.png\");t.coverImage = this.isSkinWhite ? s : _e;}var e = !1;\"live\" !== t.apiState ? t.latestSrc.length > 0 && this.isAutoChange ? (this.changingType = \"vod\", e = !0) : t.waitImage.length > 0 && t.waitImage.indexOf(\".mp4\") > 0 ? (this.changingType = \"warmVideo\", t.latestSrc = t.waitImage) : t.coverImage.length > 0 && (t.coverImage.indexOf(\".png\") > 0 || t.coverImage.indexOf(\".jpg\") > 0 || t.coverImage.indexOf(\".gif\") > 0) && (this.changingType = \"warmImage\", t.latestSrc = t.coverImage) : \"live\" === t.apiState && t.latestSrc.length > 0 && (this.changingType = \"live\", e = !0), this.vodsrc && (this.changingType = \"vod\", t.latestSrc = this.vodsrc), /vod|live/i.test(this.changingType) && (this.statistics.param3 = _jsBase.Base64.encodeURI(this.changingType)), e && !this.vodsrc && (this.setPlayId(), this.playTime = 0), this.onChangeType && this.onChangeType(this.changingType, t.latestSrc, t.latestFlvSrc);} }, { key: \"sendRtas\", value: function sendRtas() {\"live\" === this.changingType && \"live\" === this.apiState && this.playTime++, \"vod\" === this.changingType && (this.vodRecordTime !== this.vodCurrentTime ? (this.playState = this.stateType.playing, this.vodRecordTime = this.vodCurrentTime, this.playTime++) : this.playState = this.stateType.pause);var t = Date.now(),e = t - this.rtasTS > 1e3 * this.sendRtasTime,s = this.playState === this.stateType.playing || this.playState === this.stateType.end,_this$statistics = this.statistics,i = _this$statistics.param1,a = _this$statistics.param2,n = _this$statistics.param3,r = _this$statistics.param4,h = _this$statistics.param5,o = _this$statistics.session_id;if (e && this.playTime > this.sendRtasTime && s) {this.rtasTS = t;var _e2 = this.getDate(),_s = \"rtas.net\".concat(this.pid).concat(this.cid, \"0\").concat(this.playTime),c = \"\".concat((0, _md.default)(_s)),l = { pid: this.pid, uid: this.uid, cid: this.cid, pd: this.playTime, sd: this.playTime, sign: c, flow: 0, ts: _e2, pn: \"webapp_sdk_live\", pv: \"\".concat(this.version, \"_\").concat(this.buildMetaData), param1: i, param2: a, param3: n, param4: r, param5: h, session_id: o };this.rtasTS = t, this[promiseRequest](this.config.get(\"RTAS_URL\"), l);}} }, { key: \"setPlayId\", value: function setPlayId() {var t = \"\".concat(Date.now()),e = \"\".concat(parseInt(1e6 * Math.random() + 1e6));this.pid = \"\".concat(t, \"X\").concat(e);} }, { key: \"proxyUrl\", value: function proxyUrl(t) {return \"\" === (t = t.replace(/.*?:\\/\\//g, \"\")) ? t : \"https://router.polyv.net/proxy/\".concat(t);} }, { key: \"getDate\", value: function getDate() {return Date.now();} }]);return PolyLive;}();exports.default = PolyLive;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///964\n");

/***/ }),

/***/ 965:
/*!***********************************************************************************!*\
  !*** J:/kesionEDU_APP/KS_EDU_APP/客户APP/欣程APP/lib/polyv/common/utils/js-base64.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function (e, r) { true ? module.exports = r(e) : undefined;}(\"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : void 0, function (global) {\"use strict\";var _Base64 = global.Base64,version = \"2.5.0\",buffer;if ( true && module.exports) try {buffer = eval(\"require('buffer').Buffer\");} catch (e) {buffer = void 0;}var b64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",b64tab = function (e) {for (var r = {}, o = 0, t = e.length; o < t; o++) {r[e.charAt(o)] = o;}return r;}(b64chars),fromCharCode = String.fromCharCode,cb_utob = function cb_utob(e) {if (e.length < 2) return (r = e.charCodeAt(0)) < 128 ? e : r < 2048 ? fromCharCode(192 | r >>> 6) + fromCharCode(128 | 63 & r) : fromCharCode(224 | r >>> 12 & 15) + fromCharCode(128 | r >>> 6 & 63) + fromCharCode(128 | 63 & r);var r = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320);return fromCharCode(240 | r >>> 18 & 7) + fromCharCode(128 | r >>> 12 & 63) + fromCharCode(128 | r >>> 6 & 63) + fromCharCode(128 | 63 & r);},re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g,utob = function utob(e) {return e.replace(re_utob, cb_utob);},cb_encode = function cb_encode(e) {var r = [0, 2, 1][e.length % 3],o = e.charCodeAt(0) << 16 | (e.length > 1 ? e.charCodeAt(1) : 0) << 8 | (e.length > 2 ? e.charCodeAt(2) : 0);return [b64chars.charAt(o >>> 18), b64chars.charAt(o >>> 12 & 63), r >= 2 ? \"=\" : b64chars.charAt(o >>> 6 & 63), r >= 1 ? \"=\" : b64chars.charAt(63 & o)].join(\"\");},btoa = global.btoa ? function (e) {return global.btoa(e);} : function (e) {return e.replace(/[\\s\\S]{1,3}/g, cb_encode);},_encode = buffer ? buffer.from && Uint8Array && buffer.from !== Uint8Array.from ? function (e) {return (e.constructor === buffer.constructor ? e : buffer.from(e)).toString(\"base64\");} : function (e) {return (e.constructor === buffer.constructor ? e : new buffer(e)).toString(\"base64\");} : function (e) {return btoa(utob(e));},encode = function encode(e, r) {return r ? _encode(String(e)).replace(/[+\\/]/g, function (e) {return \"+\" == e ? \"-\" : \"_\";}).replace(/=/g, \"\") : _encode(String(e));},encodeURI = function encodeURI(e) {return encode(e, !0);},re_btou = new RegExp([\"[À-ß][-¿]\", \"[à-ï][-¿]{2}\", \"[ð-÷][-¿]{3}\"].join(\"|\"), \"g\"),cb_btou = function cb_btou(e) {switch (e.length) {case 4:var r = ((7 & e.charCodeAt(0)) << 18 | (63 & e.charCodeAt(1)) << 12 | (63 & e.charCodeAt(2)) << 6 | 63 & e.charCodeAt(3)) - 65536;return fromCharCode(55296 + (r >>> 10)) + fromCharCode(56320 + (1023 & r));case 3:return fromCharCode((15 & e.charCodeAt(0)) << 12 | (63 & e.charCodeAt(1)) << 6 | 63 & e.charCodeAt(2));default:return fromCharCode((31 & e.charCodeAt(0)) << 6 | 63 & e.charCodeAt(1));}},btou = function btou(e) {return e.replace(re_btou, cb_btou);},cb_decode = function cb_decode(e) {var r = e.length,o = r % 4,t = (r > 0 ? b64tab[e.charAt(0)] << 18 : 0) | (r > 1 ? b64tab[e.charAt(1)] << 12 : 0) | (r > 2 ? b64tab[e.charAt(2)] << 6 : 0) | (r > 3 ? b64tab[e.charAt(3)] : 0),n = [fromCharCode(t >>> 16), fromCharCode(t >>> 8 & 255), fromCharCode(255 & t)];return n.length -= [0, 0, 2, 1][o], n.join(\"\");},_atob = global.atob ? function (e) {return global.atob(e);} : function (e) {return e.replace(/\\S{1,4}/g, cb_decode);},atob = function atob(e) {return _atob(String(e).replace(/[^A-Za-z0-9\\+\\/]/g, \"\"));},_decode = buffer ? buffer.from && Uint8Array && buffer.from !== Uint8Array.from ? function (e) {return (e.constructor === buffer.constructor ? e : buffer.from(e, \"base64\")).toString();} : function (e) {return (e.constructor === buffer.constructor ? e : new buffer(e, \"base64\")).toString();} : function (e) {return btou(_atob(e));},decode = function decode(e) {return _decode(String(e).replace(/[-_]/g, function (e) {return \"-\" == e ? \"+\" : \"/\";}).replace(/[^A-Za-z0-9\\+\\/]/g, \"\"));},noConflict = function noConflict() {var e = global.Base64;return global.Base64 = _Base64, e;};if (global.Base64 = { VERSION: version, atob: atob, btoa: btoa, fromBase64: decode, toBase64: encode, utob: utob, encode: encode, encodeURI: encodeURI, btou: btou, decode: decode, noConflict: noConflict, __buffer__: buffer }, \"function\" == typeof Object.defineProperty) {var noEnum = function noEnum(e) {return { value: e, enumerable: !1, writable: !0, configurable: !0 };};global.Base64.extendString = function () {Object.defineProperty(String.prototype, \"fromBase64\", noEnum(function () {return decode(this);})), Object.defineProperty(String.prototype, \"toBase64\", noEnum(function (e) {return encode(this, e);})), Object.defineProperty(String.prototype, \"toBase64URI\", noEnum(function () {return encode(this, !0);}));};}return global.Meteor && (Base64 = global.Base64),  true && module.exports ? module.exports.Base64 = global.Base64 :  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {return global.Base64;}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)), { Base64: global.Base64 };});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../软件/HBuilderX.1.9.4.20190426/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///965\n");

/***/ })

}]);